   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ahrs_int_cmpl_quat.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.stateGetBodyRates_i,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	stateGetBodyRates_i:
  24              	.LFB82:
  25              		.file 1 "./state.h"
   1:./state.h     **** /*
   2:./state.h     ****  * Copyright (C) 2011-2012 Felix Ruess <felix.ruess@gmail.com>
   3:./state.h     ****  *
   4:./state.h     ****  * This file is part of paparazzi.
   5:./state.h     ****  *
   6:./state.h     ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./state.h     ****  * it under the terms of the GNU General Public License as published by
   8:./state.h     ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./state.h     ****  * any later version.
  10:./state.h     ****  *
  11:./state.h     ****  * paparazzi is distributed in the hope that it will be useful,
  12:./state.h     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./state.h     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./state.h     ****  * GNU General Public License for more details.
  15:./state.h     ****  *
  16:./state.h     ****  * You should have received a copy of the GNU General Public License
  17:./state.h     ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./state.h     ****  * <http://www.gnu.org/licenses/>.
  19:./state.h     ****  */
  20:./state.h     **** 
  21:./state.h     **** /**
  22:./state.h     ****  * @file state.h
  23:./state.h     ****  *
  24:./state.h     ****  * API to get/set the generic vehicle states.
  25:./state.h     ****  *
  26:./state.h     ****  * Also see the @ref state_interface "State Interface" page.
  27:./state.h     ****  *
  28:./state.h     ****  * @author Felix Ruess <felix.ruess@gmail.com>
  29:./state.h     ****  */
  30:./state.h     **** 
  31:./state.h     **** #ifndef STATE_H
  32:./state.h     **** #define STATE_H
  33:./state.h     **** 
  34:./state.h     **** #include "math/pprz_algebra_int.h"
  35:./state.h     **** #include "math/pprz_algebra_float.h"
  36:./state.h     **** #include "math/pprz_geodetic_int.h"
  37:./state.h     **** #include "math/pprz_geodetic_float.h"
  38:./state.h     **** #include "math/pprz_orientation_conversion.h"
  39:./state.h     **** 
  40:./state.h     **** #include "std.h"
  41:./state.h     **** #include <string.h>
  42:./state.h     **** 
  43:./state.h     **** /**
  44:./state.h     ****  * This general state interface holds all the most important vehicle states like
  45:./state.h     ****  * position, velocity, attitude, etc. It handles coordinate system and
  46:./state.h     ****  * fixed-/floating-point conversion on the fly when needed.
  47:./state.h     ****  *
  48:./state.h     ****  * You can set e.g. the position in any coordinate system you wish:
  49:./state.h     ****  * stateSetPositionNed_i() to set the position in fixed-point NED coordinates.
  50:./state.h     ****  * If you need to read the position somewhere else in a different representation,
  51:./state.h     ****  * call: stateGetPositionLla_f() and only then the LLA float position representation
  52:./state.h     ****  * is calculated on the fly and returned. It's also only calculated once,
  53:./state.h     ****  * until a new position is set which invalidates all the other representations again.
  54:./state.h     ****  */
  55:./state.h     **** 
  56:./state.h     **** /**
  57:./state.h     ****  * @defgroup state_interface State interface
  58:./state.h     ****  * @{
  59:./state.h     ****  */
  60:./state.h     **** 
  61:./state.h     **** /**
  62:./state.h     ****  * @defgroup state_position Position representations
  63:./state.h     ****  * @{
  64:./state.h     ****  */
  65:./state.h     **** #define POS_ECEF_I 0
  66:./state.h     **** #define POS_NED_I  1
  67:./state.h     **** #define POS_ENU_I  2
  68:./state.h     **** #define POS_LLA_I  3
  69:./state.h     **** #define POS_UTM_I  4
  70:./state.h     **** #define POS_ECEF_F 5
  71:./state.h     **** #define POS_NED_F  6
  72:./state.h     **** #define POS_ENU_F  7
  73:./state.h     **** #define POS_LLA_F  8
  74:./state.h     **** #define POS_UTM_F  9
  75:./state.h     **** #define POS_LOCAL_COORD ((1<<POS_NED_I)|(1<<POS_NED_F)|(1<<POS_ENU_I)|(1<<POS_ENU_F))
  76:./state.h     **** #define POS_GLOBAL_COORD ((1<<POS_ECEF_I)|(1<<POS_ECEF_F)|(1<<POS_LLA_I)|(1<<POS_LLA_F)|(1<<POS_UTM
  77:./state.h     **** /**@}*/
  78:./state.h     **** 
  79:./state.h     **** /**
  80:./state.h     ****  * @defgroup state_velocity Speed representations
  81:./state.h     ****  * @{
  82:./state.h     ****  */
  83:./state.h     **** #define SPEED_ECEF_I  0
  84:./state.h     **** #define SPEED_NED_I   1
  85:./state.h     **** #define SPEED_ENU_I   2
  86:./state.h     **** #define SPEED_HNORM_I 3
  87:./state.h     **** #define SPEED_HDIR_I  4
  88:./state.h     **** #define SPEED_ECEF_F  5
  89:./state.h     **** #define SPEED_NED_F   6
  90:./state.h     **** #define SPEED_ENU_F   7
  91:./state.h     **** #define SPEED_HNORM_F 8
  92:./state.h     **** #define SPEED_HDIR_F  9
  93:./state.h     **** #define SPEED_LOCAL_COORD ((1<<SPEED_NED_I)|(1<<SPEED_ENU_I)|(1<<SPEED_NED_F)|(1<<SPEED_ENU_F))
  94:./state.h     **** /**@}*/
  95:./state.h     **** 
  96:./state.h     **** /**
  97:./state.h     ****  * @defgroup state_acceleration Acceleration representations
  98:./state.h     ****  * @{
  99:./state.h     ****  */
 100:./state.h     **** #define ACCEL_ECEF_I 0
 101:./state.h     **** #define ACCEL_NED_I  1
 102:./state.h     **** #define ACCEL_ECEF_F 2
 103:./state.h     **** #define ACCEL_NED_F  3
 104:./state.h     **** /**@}*/
 105:./state.h     **** 
 106:./state.h     **** /**
 107:./state.h     ****  * @defgroup state_rate Angular rate representations
 108:./state.h     ****  * @{
 109:./state.h     ****  */
 110:./state.h     **** #define RATE_I 0
 111:./state.h     **** #define RATE_F 1
 112:./state.h     **** /**@}*/
 113:./state.h     **** 
 114:./state.h     **** /**
 115:./state.h     ****  * @defgroup state_wind_airspeed Wind- and airspeed representations
 116:./state.h     ****  * @{
 117:./state.h     ****  */
 118:./state.h     **** #define WINDSPEED_I 0
 119:./state.h     **** #define AIRSPEED_I  1
 120:./state.h     **** #define WINDSPEED_F 2
 121:./state.h     **** #define AIRSPEED_F  3
 122:./state.h     **** #define AOA_F       4
 123:./state.h     **** #define SIDESLIP_F  5
 124:./state.h     **** /**@}*/
 125:./state.h     **** 
 126:./state.h     **** 
 127:./state.h     **** /**
 128:./state.h     ****  * Structure holding vehicle state data.
 129:./state.h     ****  */
 130:./state.h     **** struct State {
 131:./state.h     **** 
 132:./state.h     ****   /** @addtogroup state_position
 133:./state.h     ****    *  @{ */
 134:./state.h     **** 
 135:./state.h     ****   /**
 136:./state.h     ****    * Holds the status bits for all position representations.
 137:./state.h     ****    * When the corresponding bit is set the representation
 138:./state.h     ****    * is already computed.
 139:./state.h     ****    */
 140:./state.h     ****   uint16_t pos_status;
 141:./state.h     **** 
 142:./state.h     ****   /**
 143:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 144:./state.h     ****    * Units: centimeters
 145:./state.h     ****    */
 146:./state.h     ****   struct EcefCoor_i ecef_pos_i;
 147:./state.h     **** 
 148:./state.h     ****   /**
 149:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 150:./state.h     ****    * Units lat,lon: radians*1e7
 151:./state.h     ****    * Units alt: milimeters above reference ellipsoid
 152:./state.h     ****    */
 153:./state.h     ****   struct LlaCoor_i lla_pos_i;
 154:./state.h     **** 
 155:./state.h     ****   /**
 156:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 157:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 158:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 159:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 160:./state.h     ****    * (int version)
 161:./state.h     ****    */
 162:./state.h     ****   struct LtpDef_i ned_origin_i;
 163:./state.h     **** 
 164:./state.h     ****   /**
 165:./state.h     ****    * true if local int coordinate frame is initialsed
 166:./state.h     ****    */
 167:./state.h     ****   bool_t ned_initialized_i;
 168:./state.h     **** 
 169:./state.h     ****   /**
 170:./state.h     ****    * Position in North East Down coordinates.
 171:./state.h     ****    * with respect to ned_origin_i (flat earth)
 172:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 173:./state.h     ****    */
 174:./state.h     ****   struct NedCoor_i ned_pos_i;
 175:./state.h     **** 
 176:./state.h     ****   /**
 177:./state.h     ****    * Position in East North Up coordinates.
 178:./state.h     ****    * with respect to ned_origin_i (flat earth)
 179:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 180:./state.h     ****    */
 181:./state.h     ****   struct EnuCoor_i enu_pos_i;
 182:./state.h     **** 
 183:./state.h     ****   /**
 184:./state.h     ****    * Position in UTM coordinates.
 185:./state.h     ****    * Units x,y: meters.
 186:./state.h     ****    * Units z: meters above MSL
 187:./state.h     ****    */
 188:./state.h     ****   struct UtmCoor_f utm_pos_f;
 189:./state.h     **** 
 190:./state.h     ****   /**
 191:./state.h     ****    * Altitude above ground level.
 192:./state.h     ****    * Unit: meters
 193:./state.h     ****    */
 194:./state.h     ****   float alt_agl_f;
 195:./state.h     **** 
 196:./state.h     ****   /**
 197:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 198:./state.h     ****    * Units lat,lon: radians
 199:./state.h     ****    * Units alt: meters above reference ellipsoid
 200:./state.h     ****    */
 201:./state.h     ****   struct LlaCoor_f lla_pos_f;
 202:./state.h     **** 
 203:./state.h     ****   /**
 204:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 205:./state.h     ****    * Units: meters
 206:./state.h     ****    */
 207:./state.h     ****   struct EcefCoor_f ecef_pos_f;
 208:./state.h     **** 
 209:./state.h     ****   /**
 210:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 211:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 212:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 213:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 214:./state.h     ****    * (float version)
 215:./state.h     ****    */
 216:./state.h     ****   struct LtpDef_f ned_origin_f;
 217:./state.h     **** 
 218:./state.h     ****   /// True if local float coordinate frame is initialsed
 219:./state.h     ****   bool_t ned_initialized_f;
 220:./state.h     **** 
 221:./state.h     ****   /**
 222:./state.h     ****    * Definition of the origin of Utm coordinate system.
 223:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 224:./state.h     ****    * in UTM coordinates, used as a reference when ned_origin is not
 225:./state.h     ****    * initialized.
 226:./state.h     ****    * (float version)
 227:./state.h     ****    */
 228:./state.h     ****   struct UtmCoor_f utm_origin_f;
 229:./state.h     **** 
 230:./state.h     ****   /// True if utm origin (float) coordinate frame is initialsed
 231:./state.h     ****   bool_t utm_initialized_f;
 232:./state.h     **** 
 233:./state.h     ****   /**
 234:./state.h     ****    * Position in North East Down coordinates.
 235:./state.h     ****    * with respect to ned_origin_i (flat earth)
 236:./state.h     ****    * Units: meters
 237:./state.h     ****    */
 238:./state.h     ****   struct NedCoor_f ned_pos_f;
 239:./state.h     **** 
 240:./state.h     ****   /**
 241:./state.h     ****    * Position in East North Up coordinates.
 242:./state.h     ****    * with respect to ned_origin_i (flat earth)
 243:./state.h     ****    * Units: meters
 244:./state.h     ****    */
 245:./state.h     ****   struct EnuCoor_f enu_pos_f;
 246:./state.h     ****   /** @}*/
 247:./state.h     **** 
 248:./state.h     **** 
 249:./state.h     ****   /** @addtogroup state_velocity
 250:./state.h     ****    *  @{ */
 251:./state.h     ****   /**
 252:./state.h     ****    * Holds the status bits for all ground speed representations.
 253:./state.h     ****    * When the corresponding bit is one the representation
 254:./state.h     ****    * is already computed.
 255:./state.h     ****    */
 256:./state.h     ****   uint16_t speed_status;
 257:./state.h     **** 
 258:./state.h     ****   /**
 259:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 260:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 261:./state.h     ****    */
 262:./state.h     ****   struct EcefCoor_i ecef_speed_i;
 263:./state.h     **** 
 264:./state.h     ****   /**
 265:./state.h     ****    * Velocity in North East Down coordinates.
 266:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 267:./state.h     ****    */
 268:./state.h     ****   struct NedCoor_i ned_speed_i;
 269:./state.h     **** 
 270:./state.h     ****   /**
 271:./state.h     ****    * Velocity in East North Up coordinates.
 272:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 273:./state.h     ****    */
 274:./state.h     ****   struct EnuCoor_i enu_speed_i;
 275:./state.h     **** 
 276:./state.h     ****   /**
 277:./state.h     ****    * Norm of horizontal ground speed.
 278:./state.h     ****    * Unit: m/s in BFP with #INT32_SPEED_FRAC
 279:./state.h     ****    */
 280:./state.h     ****   int32_t h_speed_norm_i;
 281:./state.h     **** 
 282:./state.h     ****   /**
 283:./state.h     ****    * Direction of horizontal ground speed.
 284:./state.h     ****    * Unit: rad in BFP with #INT32_ANGLE_FRAC
 285:./state.h     ****    * (clockwise, zero=north)
 286:./state.h     ****    */
 287:./state.h     ****   int32_t h_speed_dir_i;
 288:./state.h     **** 
 289:./state.h     ****   /**
 290:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 291:./state.h     ****    * Units: m/s
 292:./state.h     ****    */
 293:./state.h     ****   struct EcefCoor_f ecef_speed_f;
 294:./state.h     **** 
 295:./state.h     ****   /**
 296:./state.h     ****    * @brief speed in North East Down coordinates
 297:./state.h     ****    * @details Units: m/s */
 298:./state.h     ****   struct NedCoor_f ned_speed_f;
 299:./state.h     **** 
 300:./state.h     ****   /**
 301:./state.h     ****    * Velocity in East North Up coordinates.
 302:./state.h     ****    * Units: m/s
 303:./state.h     ****    */
 304:./state.h     ****   struct EnuCoor_f enu_speed_f;
 305:./state.h     **** 
 306:./state.h     ****   /**
 307:./state.h     ****    * Norm of horizontal ground speed.
 308:./state.h     ****    * Unit: m/s
 309:./state.h     ****    */
 310:./state.h     ****   float h_speed_norm_f;
 311:./state.h     **** 
 312:./state.h     ****   /**
 313:./state.h     ****    * Direction of horizontal ground speed.
 314:./state.h     ****    * Unit: rad (clockwise, zero=north)
 315:./state.h     ****    */
 316:./state.h     ****   float h_speed_dir_f;
 317:./state.h     ****   /** @}*/
 318:./state.h     **** 
 319:./state.h     **** 
 320:./state.h     ****   /** @addtogroup state_acceleration
 321:./state.h     ****    *  @{ */
 322:./state.h     ****   /**
 323:./state.h     ****    * Holds the status bits for all acceleration representations.
 324:./state.h     ****    * When the corresponding bit is one the representation
 325:./state.h     ****    * is already computed.
 326:./state.h     ****    */
 327:./state.h     ****   uint8_t accel_status;
 328:./state.h     **** 
 329:./state.h     ****   /**
 330:./state.h     ****    * Acceleration in North East Down coordinates.
 331:./state.h     ****    * Units: m/s^2 in BFP with #INT32_ACCEL_FRAC
 332:./state.h     ****    */
 333:./state.h     ****   struct NedCoor_i ned_accel_i;
 334:./state.h     **** 
 335:./state.h     ****   /**
 336:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 337:./state.h     ****    * Units: m/s^2 in BFP with INT32_ACCEL_FRAC
 338:./state.h     ****    */
 339:./state.h     ****   struct EcefCoor_i ecef_accel_i;
 340:./state.h     **** 
 341:./state.h     ****   /**
 342:./state.h     ****    * Acceleration in North East Down coordinates.
 343:./state.h     ****    * Units: m/s^2
 344:./state.h     ****    */
 345:./state.h     ****   struct NedCoor_f ned_accel_f;
 346:./state.h     **** 
 347:./state.h     ****   /**
 348:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 349:./state.h     ****    * Units: m/s^2
 350:./state.h     ****    */
 351:./state.h     ****   struct EcefCoor_f ecef_accel_f;
 352:./state.h     ****   /** @}*/
 353:./state.h     **** 
 354:./state.h     **** 
 355:./state.h     ****   /** @defgroup state_attitude Attitude representations
 356:./state.h     ****    */
 357:./state.h     ****   struct OrientationReps ned_to_body_orientation;
 358:./state.h     **** 
 359:./state.h     **** 
 360:./state.h     ****   /** @addtogroup state_rate
 361:./state.h     ****    *  @{ */
 362:./state.h     ****   /**
 363:./state.h     ****    * Holds the status bits for all angular rate representations.
 364:./state.h     ****    * When the corresponding bit is one the representation
 365:./state.h     ****    * is already computed.
 366:./state.h     ****    */
 367:./state.h     ****   uint8_t rate_status;
 368:./state.h     **** 
 369:./state.h     ****   /**
 370:./state.h     ****    * Angular rates in body frame.
 371:./state.h     ****    * Units: rad/s in BFP with #INT32_RATE_FRAC
 372:./state.h     ****    */
 373:./state.h     ****   struct Int32Rates  body_rates_i;
 374:./state.h     **** 
 375:./state.h     ****   /**
 376:./state.h     ****    * Angular rates in body frame.
 377:./state.h     ****    * Units: rad/s
 378:./state.h     ****    */
 379:./state.h     ****   struct FloatRates  body_rates_f;
 380:./state.h     ****   /** @}*/
 381:./state.h     **** 
 382:./state.h     **** 
 383:./state.h     ****   /** @addtogroup state_wind_airspeed
 384:./state.h     ****    *  @{ */
 385:./state.h     ****   /**
 386:./state.h     ****    * Holds the status bits for all wind- and airspeed representations.
 387:./state.h     ****    * When the corresponding bit is one the representation
 388:./state.h     ****    * is already computed.
 389:./state.h     ****    */
 390:./state.h     ****   uint8_t wind_air_status;
 391:./state.h     **** 
 392:./state.h     ****   /**
 393:./state.h     ****    * Horizontal windspeed in north/east.
 394:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 395:./state.h     ****    */
 396:./state.h     ****   struct Int32Vect2 h_windspeed_i;
 397:./state.h     **** 
 398:./state.h     ****   /**
 399:./state.h     ****    * Norm of horizontal ground speed.
 400:./state.h     ****    * @details Unit: m/s in BFP with #INT32_SPEED_FRAC
 401:./state.h     ****    */
 402:./state.h     ****   int32_t airspeed_i;
 403:./state.h     **** 
 404:./state.h     ****   /**
 405:./state.h     ****    * Horizontal windspeed.
 406:./state.h     ****    * Units: m/s with x=north, y=east
 407:./state.h     ****    */
 408:./state.h     ****   struct FloatVect2 h_windspeed_f;
 409:./state.h     **** 
 410:./state.h     ****   /**
 411:./state.h     ****    * Norm of relative air speed.
 412:./state.h     ****    * Unit: m/s
 413:./state.h     ****    */
 414:./state.h     ****   float airspeed_f;
 415:./state.h     **** 
 416:./state.h     ****   /**
 417:./state.h     ****    * Angle of attack
 418:./state.h     ****    * Unit: rad
 419:./state.h     ****    */
 420:./state.h     ****   float angle_of_attack_f;
 421:./state.h     **** 
 422:./state.h     ****   /**
 423:./state.h     ****    * Sideslip angle
 424:./state.h     ****    * Unit: rad
 425:./state.h     ****    */
 426:./state.h     ****   float sideslip_f;
 427:./state.h     **** 
 428:./state.h     ****   /** @}*/
 429:./state.h     **** 
 430:./state.h     **** };
 431:./state.h     **** 
 432:./state.h     **** extern struct State state;
 433:./state.h     **** 
 434:./state.h     **** extern void stateInit(void);
 435:./state.h     **** 
 436:./state.h     **** /** @addtogroup state_position
 437:./state.h     ****  *  @{ */
 438:./state.h     **** 
 439:./state.h     **** /// Set the local (flat earth) coordinate frame origin (int).
 440:./state.h     **** static inline void stateSetLocalOrigin_i(struct LtpDef_i* ltp_def) {
 441:./state.h     ****   memcpy(&state.ned_origin_i, ltp_def, sizeof(struct LtpDef_i));
 442:./state.h     ****   /* convert to float */
 443:./state.h     ****   ECEF_FLOAT_OF_BFP(state.ned_origin_f.ecef, state.ned_origin_i.ecef);
 444:./state.h     ****   LLA_FLOAT_OF_BFP(state.ned_origin_f.lla, state.ned_origin_i.lla);
 445:./state.h     ****   RMAT_FLOAT_OF_BFP(state.ned_origin_f.ltp_of_ecef, state.ned_origin_i.ltp_of_ecef);
 446:./state.h     ****   state.ned_origin_f.hmsl = M_OF_MM(state.ned_origin_i.hmsl);
 447:./state.h     **** 
 448:./state.h     ****   /* clear bits for all local frame representations */
 449:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 450:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 451:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 452:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 453:./state.h     **** 
 454:./state.h     ****   state.ned_initialized_i = TRUE;
 455:./state.h     ****   state.ned_initialized_f = TRUE;
 456:./state.h     **** }
 457:./state.h     **** 
 458:./state.h     **** /// Set the local (flat earth) coordinate frame origin from UTM (float).
 459:./state.h     **** static inline void stateSetLocalUtmOrigin_f(struct UtmCoor_f* utm_def) {
 460:./state.h     ****   memcpy(&state.utm_origin_f, utm_def, sizeof(struct UtmCoor_f));
 461:./state.h     ****   state.utm_initialized_f = TRUE;
 462:./state.h     **** 
 463:./state.h     ****   /* clear bits for all local frame representations */
 464:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 465:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 466:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 467:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 468:./state.h     **** }
 469:./state.h     **** /*******************************************************************************
 470:./state.h     ****  *                                                                             *
 471:./state.h     ****  * Set and Get functions for the POSITION representations                      *
 472:./state.h     ****  *                                                                             *
 473:./state.h     ****  ******************************************************************************/
 474:./state.h     **** 
 475:./state.h     **** /************* declaration of transformation functions ************/
 476:./state.h     **** extern void stateCalcPositionEcef_i(void);
 477:./state.h     **** extern void stateCalcPositionNed_i(void);
 478:./state.h     **** extern void stateCalcPositionEnu_i(void);
 479:./state.h     **** extern void stateCalcPositionLla_i(void);
 480:./state.h     **** extern void stateCalcPositionUtm_f(void);
 481:./state.h     **** extern void stateCalcPositionEcef_f(void);
 482:./state.h     **** extern void stateCalcPositionNed_f(void);
 483:./state.h     **** extern void stateCalcPositionEnu_f(void);
 484:./state.h     **** extern void stateCalcPositionLla_f(void);
 485:./state.h     **** 
 486:./state.h     **** /*********************** validity test functions ******************/
 487:./state.h     **** 
 488:./state.h     **** /// Test if local coordinates are valid.
 489:./state.h     **** static inline bool_t stateIsLocalCoordinateValid(void) {
 490:./state.h     ****   return ((state.ned_initialized_i || state.utm_initialized_f) && (state.pos_status & (POS_LOCAL_CO
 491:./state.h     **** }
 492:./state.h     **** 
 493:./state.h     **** /// Test if global coordinates are valid.
 494:./state.h     **** static inline bool_t stateIsGlobalCoordinateValid(void) {
 495:./state.h     ****   return ((state.pos_status & (POS_GLOBAL_COORD)) || stateIsLocalCoordinateValid());
 496:./state.h     **** }
 497:./state.h     **** 
 498:./state.h     **** /************************ Set functions ****************************/
 499:./state.h     **** 
 500:./state.h     **** /// Set position from ECEF coordinates (int).
 501:./state.h     **** static inline void stateSetPositionEcef_i(struct EcefCoor_i* ecef_pos) {
 502:./state.h     ****   INT32_VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 503:./state.h     ****   /* clear bits for all position representations and only set the new one */
 504:./state.h     ****   state.pos_status = (1 << POS_ECEF_I);
 505:./state.h     **** }
 506:./state.h     **** 
 507:./state.h     **** /// Set position from local NED coordinates (int).
 508:./state.h     **** static inline void stateSetPositionNed_i(struct NedCoor_i* ned_pos) {
 509:./state.h     ****   INT32_VECT3_COPY(state.ned_pos_i, *ned_pos);
 510:./state.h     ****   /* clear bits for all position representations and only set the new one */
 511:./state.h     ****   state.pos_status = (1 << POS_NED_I);
 512:./state.h     **** }
 513:./state.h     **** 
 514:./state.h     **** /// Set position from local ENU coordinates (int).
 515:./state.h     **** static inline void stateSetPositionEnu_i(struct EnuCoor_i* enu_pos) {
 516:./state.h     ****   INT32_VECT3_COPY(state.enu_pos_i, *enu_pos);
 517:./state.h     ****   /* clear bits for all position representations and only set the new one */
 518:./state.h     ****   state.pos_status = (1 << POS_ENU_I);
 519:./state.h     **** }
 520:./state.h     **** 
 521:./state.h     **** /// Set position from LLA coordinates (int).
 522:./state.h     **** static inline void stateSetPositionLla_i(struct LlaCoor_i* lla_pos) {
 523:./state.h     ****   LLA_COPY(state.lla_pos_i, *lla_pos);
 524:./state.h     ****   /* clear bits for all position representations and only set the new one */
 525:./state.h     ****   state.pos_status = (1 << POS_LLA_I);
 526:./state.h     **** }
 527:./state.h     **** 
 528:./state.h     **** /// Set multiple position coordinates (int).
 529:./state.h     **** static inline void stateSetPosition_i(
 530:./state.h     ****     struct EcefCoor_i* ecef_pos,
 531:./state.h     ****     struct NedCoor_i* ned_pos,
 532:./state.h     ****     struct EnuCoor_i* enu_pos,
 533:./state.h     ****     struct LlaCoor_i* lla_pos) {
 534:./state.h     ****   /* clear all status bit */
 535:./state.h     ****   state.pos_status = 0;
 536:./state.h     ****   if (ecef_pos != NULL) {
 537:./state.h     ****     INT32_VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 538:./state.h     ****     state.pos_status |= (1 << POS_ECEF_I);
 539:./state.h     ****   }
 540:./state.h     ****   if (ned_pos != NULL) {
 541:./state.h     ****     INT32_VECT3_COPY(state.ned_pos_i, *ned_pos);
 542:./state.h     ****     state.pos_status |= (1 << POS_NED_I);
 543:./state.h     ****   }
 544:./state.h     ****   if (enu_pos != NULL) {
 545:./state.h     ****     INT32_VECT3_COPY(state.enu_pos_i, *enu_pos);
 546:./state.h     ****     state.pos_status |= (1 << POS_ENU_I);
 547:./state.h     ****   }
 548:./state.h     ****   if (lla_pos != NULL) {
 549:./state.h     ****     LLA_COPY(state.lla_pos_i, *lla_pos);
 550:./state.h     ****     state.pos_status |= (1 << POS_LLA_I);
 551:./state.h     ****   }
 552:./state.h     **** }
 553:./state.h     **** 
 554:./state.h     **** /// Set position from UTM coordinates (float).
 555:./state.h     **** static inline void stateSetPositionUtm_f(struct UtmCoor_f* utm_pos) {
 556:./state.h     ****   memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 557:./state.h     ****   /* clear bits for all position representations and only set the new one */
 558:./state.h     ****   state.pos_status = (1 << POS_UTM_F);
 559:./state.h     **** }
 560:./state.h     **** 
 561:./state.h     **** /// Set position from ECEF coordinates (float).
 562:./state.h     **** static inline void stateSetPositionEcef_f(struct EcefCoor_f* ecef_pos) {
 563:./state.h     ****   VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 564:./state.h     ****   /* clear bits for all position representations and only set the new one */
 565:./state.h     ****   state.pos_status = (1 << POS_ECEF_F);
 566:./state.h     **** }
 567:./state.h     **** 
 568:./state.h     **** /// Set position from local NED coordinates (float).
 569:./state.h     **** static inline void stateSetPositionNed_f(struct NedCoor_f* ned_pos) {
 570:./state.h     ****   VECT3_COPY(state.ned_pos_f, *ned_pos);
 571:./state.h     ****   /* clear bits for all position representations and only set the new one */
 572:./state.h     ****   state.pos_status = (1 << POS_NED_F);
 573:./state.h     **** }
 574:./state.h     **** 
 575:./state.h     **** /// Set position from local ENU coordinates (float).
 576:./state.h     **** static inline void stateSetPositionEnu_f(struct EnuCoor_f* enu_pos) {
 577:./state.h     ****   VECT3_COPY(state.enu_pos_f, *enu_pos);
 578:./state.h     ****   /* clear bits for all position representations and only set the new one */
 579:./state.h     ****   state.pos_status = (1 << POS_ENU_F);
 580:./state.h     **** }
 581:./state.h     **** 
 582:./state.h     **** /// Set position from LLA coordinates (float).
 583:./state.h     **** static inline void stateSetPositionLla_f(struct LlaCoor_f* lla_pos) {
 584:./state.h     ****   LLA_COPY(state.lla_pos_f, *lla_pos);
 585:./state.h     ****   /* clear bits for all position representations and only set the new one */
 586:./state.h     ****   state.pos_status = (1 << POS_LLA_F);
 587:./state.h     **** }
 588:./state.h     **** 
 589:./state.h     **** /// Set multiple position coordinates (float).
 590:./state.h     **** static inline void stateSetPosition_f(
 591:./state.h     ****     struct EcefCoor_f* ecef_pos,
 592:./state.h     ****     struct NedCoor_f* ned_pos,
 593:./state.h     ****     struct EnuCoor_f* enu_pos,
 594:./state.h     ****     struct LlaCoor_f* lla_pos,
 595:./state.h     ****     struct UtmCoor_f* utm_pos) {
 596:./state.h     ****   /* clear all status bit */
 597:./state.h     ****   state.pos_status = 0;
 598:./state.h     ****   if (ecef_pos != NULL) {
 599:./state.h     ****     VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 600:./state.h     ****     state.pos_status |= (1 << POS_ECEF_F);
 601:./state.h     ****   }
 602:./state.h     ****   if (ned_pos != NULL) {
 603:./state.h     ****     VECT3_COPY(state.ned_pos_f, *ned_pos);
 604:./state.h     ****     state.pos_status |= (1 << POS_NED_F);
 605:./state.h     ****   }
 606:./state.h     ****   if (enu_pos != NULL) {
 607:./state.h     ****     VECT3_COPY(state.enu_pos_f, *enu_pos);
 608:./state.h     ****     state.pos_status |= (1 << POS_ENU_F);
 609:./state.h     ****   }
 610:./state.h     ****   if (lla_pos != NULL) {
 611:./state.h     ****     LLA_COPY(state.lla_pos_f, *lla_pos);
 612:./state.h     ****     state.pos_status |= (1 << POS_LLA_F);
 613:./state.h     ****   }
 614:./state.h     ****   if (utm_pos != NULL) {
 615:./state.h     ****     memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 616:./state.h     ****     state.pos_status |= (1 << POS_UTM_F);
 617:./state.h     ****   }
 618:./state.h     **** }
 619:./state.h     **** 
 620:./state.h     **** /************************ Get functions ****************************/
 621:./state.h     **** 
 622:./state.h     **** /// Get position in ECEF coordinates (int).
 623:./state.h     **** static inline struct EcefCoor_i* stateGetPositionEcef_i(void) {
 624:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_I))
 625:./state.h     ****     stateCalcPositionEcef_i();
 626:./state.h     ****   return &state.ecef_pos_i;
 627:./state.h     **** }
 628:./state.h     **** 
 629:./state.h     **** /// Get position in local NED coordinates (int).
 630:./state.h     **** static inline struct NedCoor_i* stateGetPositionNed_i(void) {
 631:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_I))
 632:./state.h     ****     stateCalcPositionNed_i();
 633:./state.h     ****   return &state.ned_pos_i;
 634:./state.h     **** }
 635:./state.h     **** 
 636:./state.h     **** /// Get position in local ENU coordinates (int).
 637:./state.h     **** static inline struct EnuCoor_i* stateGetPositionEnu_i(void) {
 638:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_I))
 639:./state.h     ****     stateCalcPositionEnu_i();
 640:./state.h     ****   return &state.enu_pos_i;
 641:./state.h     **** }
 642:./state.h     **** 
 643:./state.h     **** /// Get position in LLA coordinates (int).
 644:./state.h     **** static inline struct LlaCoor_i* stateGetPositionLla_i(void) {
 645:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_I))
 646:./state.h     ****     stateCalcPositionLla_i();
 647:./state.h     ****   return &state.lla_pos_i;
 648:./state.h     **** }
 649:./state.h     **** 
 650:./state.h     **** /// Get position in UTM coordinates (float).
 651:./state.h     **** static inline struct UtmCoor_f* stateGetPositionUtm_f(void) {
 652:./state.h     ****   if (!bit_is_set(state.pos_status, POS_UTM_F))
 653:./state.h     ****     stateCalcPositionUtm_f();
 654:./state.h     ****   return &state.utm_pos_f;
 655:./state.h     **** }
 656:./state.h     **** 
 657:./state.h     **** /// Get position in ECEF coordinates (float).
 658:./state.h     **** static inline struct EcefCoor_f* stateGetPositionEcef_f(void) {
 659:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_F))
 660:./state.h     ****     stateCalcPositionEcef_f();
 661:./state.h     ****   return &state.ecef_pos_f;
 662:./state.h     **** }
 663:./state.h     **** 
 664:./state.h     **** /// Get position in local NED coordinates (float).
 665:./state.h     **** static inline struct NedCoor_f* stateGetPositionNed_f(void) {
 666:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_F))
 667:./state.h     ****     stateCalcPositionNed_f();
 668:./state.h     ****   return &state.ned_pos_f;
 669:./state.h     **** }
 670:./state.h     **** 
 671:./state.h     **** /// Get position in local ENU coordinates (float).
 672:./state.h     **** static inline struct EnuCoor_f* stateGetPositionEnu_f(void) {
 673:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_F))
 674:./state.h     ****     stateCalcPositionEnu_f();
 675:./state.h     ****   return &state.enu_pos_f;
 676:./state.h     **** }
 677:./state.h     **** 
 678:./state.h     **** /// Get position in LLA coordinates (float).
 679:./state.h     **** static inline struct LlaCoor_f* stateGetPositionLla_f(void) {
 680:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_F))
 681:./state.h     ****     stateCalcPositionLla_f();
 682:./state.h     ****   return &state.lla_pos_f;
 683:./state.h     **** }
 684:./state.h     **** 
 685:./state.h     **** /** @}*/
 686:./state.h     **** 
 687:./state.h     **** 
 688:./state.h     **** 
 689:./state.h     **** /******************************************************************************
 690:./state.h     ****  *                                                                            *
 691:./state.h     ****  * Set and Get functions for the SPEED representations                        *
 692:./state.h     ****  *                                                                            *
 693:./state.h     ****  *****************************************************************************/
 694:./state.h     **** /** @addtogroup state_velocity
 695:./state.h     ****  *  @{ */
 696:./state.h     **** 
 697:./state.h     **** /************* declaration of transformation functions ************/
 698:./state.h     **** extern void stateCalcSpeedNed_i(void);
 699:./state.h     **** extern void stateCalcSpeedEnu_i(void);
 700:./state.h     **** extern void stateCalcSpeedEcef_i(void);
 701:./state.h     **** extern void stateCalcHorizontalSpeedNorm_i(void);
 702:./state.h     **** extern void stateCalcHorizontalSpeedDir_i(void);
 703:./state.h     **** extern void stateCalcSpeedNed_f(void);
 704:./state.h     **** extern void stateCalcSpeedEnu_f(void);
 705:./state.h     **** extern void stateCalcSpeedEcef_f(void);
 706:./state.h     **** extern void stateCalcHorizontalSpeedNorm_f(void);
 707:./state.h     **** extern void stateCalcHorizontalSpeedDir_f(void);
 708:./state.h     **** 
 709:./state.h     **** /************************ Set functions ****************************/
 710:./state.h     **** 
 711:./state.h     **** /// Set ground speed in local NED coordinates (int).
 712:./state.h     **** static inline void stateSetSpeedNed_i(struct NedCoor_i* ned_speed) {
 713:./state.h     ****   INT32_VECT3_COPY(state.ned_speed_i, *ned_speed);
 714:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 715:./state.h     ****   state.speed_status = (1 << SPEED_NED_I);
 716:./state.h     **** }
 717:./state.h     **** 
 718:./state.h     **** /// Set ground speed in local ENU coordinates (int).
 719:./state.h     **** static inline void stateSetSpeedEnu_i(struct EnuCoor_i* enu_speed) {
 720:./state.h     ****   INT32_VECT3_COPY(state.enu_speed_i, *enu_speed);
 721:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 722:./state.h     ****   state.speed_status = (1 << SPEED_ENU_I);
 723:./state.h     **** }
 724:./state.h     **** 
 725:./state.h     **** /// Set ground speed in ECEF coordinates (int).
 726:./state.h     **** static inline void stateSetSpeedEcef_i(struct EcefCoor_i* ecef_speed) {
 727:./state.h     ****   INT32_VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 728:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 729:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_I);
 730:./state.h     **** }
 731:./state.h     **** 
 732:./state.h     **** /// Set multiple speed coordinates (int).
 733:./state.h     **** static inline void stateSetSpeed_i(
 734:./state.h     ****     struct EcefCoor_i* ecef_speed,
 735:./state.h     ****     struct NedCoor_i* ned_speed,
 736:./state.h     ****     struct EnuCoor_i* enu_speed) {
 737:./state.h     ****   /* clear all status bit */
 738:./state.h     ****   state.speed_status = 0;
 739:./state.h     ****   if (ecef_speed != NULL) {
 740:./state.h     ****     INT32_VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 741:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_I);
 742:./state.h     ****   }
 743:./state.h     ****   if (ned_speed != NULL) {
 744:./state.h     ****     INT32_VECT3_COPY(state.ned_speed_i, *ned_speed);
 745:./state.h     ****     state.speed_status |= (1 << SPEED_NED_I);
 746:./state.h     ****   }
 747:./state.h     ****   if (enu_speed != NULL) {
 748:./state.h     ****     INT32_VECT3_COPY(state.enu_speed_i, *enu_speed);
 749:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_I);
 750:./state.h     ****   }
 751:./state.h     **** }
 752:./state.h     **** 
 753:./state.h     **** /// Set ground speed in local NED coordinates (float).
 754:./state.h     **** static inline void stateSetSpeedNed_f(struct NedCoor_f* ned_speed) {
 755:./state.h     ****   VECT3_COPY(state.ned_speed_f, *ned_speed);
 756:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 757:./state.h     ****   state.speed_status = (1 << SPEED_NED_F);
 758:./state.h     **** }
 759:./state.h     **** 
 760:./state.h     **** /// Set ground speed in local ENU coordinates (float).
 761:./state.h     **** static inline void stateSetSpeedEnu_f(struct EnuCoor_f* enu_speed) {
 762:./state.h     ****   VECT3_COPY(state.enu_speed_f, *enu_speed);
 763:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 764:./state.h     ****   state.speed_status = (1 << SPEED_ENU_F);
 765:./state.h     **** }
 766:./state.h     **** 
 767:./state.h     **** /// Set ground speed in ECEF coordinates (float).
 768:./state.h     **** static inline void stateSetSpeedEcef_f(struct EcefCoor_f* ecef_speed) {
 769:./state.h     ****   VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 770:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 771:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_F);
 772:./state.h     **** }
 773:./state.h     **** 
 774:./state.h     **** /// Set multiple speed coordinates (float).
 775:./state.h     **** static inline void stateSetSpeed_f(
 776:./state.h     ****     struct EcefCoor_f* ecef_speed,
 777:./state.h     ****     struct NedCoor_f* ned_speed,
 778:./state.h     ****     struct EnuCoor_f* enu_speed) {
 779:./state.h     ****   /* clear all status bit */
 780:./state.h     ****   state.speed_status = 0;
 781:./state.h     ****   if (ecef_speed != NULL) {
 782:./state.h     ****     VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 783:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_F);
 784:./state.h     ****   }
 785:./state.h     ****   if (ned_speed != NULL) {
 786:./state.h     ****     VECT3_COPY(state.ned_speed_f, *ned_speed);
 787:./state.h     ****     state.speed_status |= (1 << SPEED_NED_F);
 788:./state.h     ****   }
 789:./state.h     ****   if (enu_speed != NULL) {
 790:./state.h     ****     VECT3_COPY(state.enu_speed_f, *enu_speed);
 791:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_F);
 792:./state.h     ****   }
 793:./state.h     **** }
 794:./state.h     **** 
 795:./state.h     **** /************************ Get functions ****************************/
 796:./state.h     **** 
 797:./state.h     **** /// Get ground speed in local NED coordinates (int).
 798:./state.h     **** static inline struct NedCoor_i* stateGetSpeedNed_i(void) {
 799:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_I))
 800:./state.h     ****     stateCalcSpeedNed_i();
 801:./state.h     ****   return &state.ned_speed_i;
 802:./state.h     **** }
 803:./state.h     **** 
 804:./state.h     **** /// Get ground speed in local ENU coordinates (int).
 805:./state.h     **** static inline struct EnuCoor_i* stateGetSpeedEnu_i(void) {
 806:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_I))
 807:./state.h     ****     stateCalcSpeedEnu_i();
 808:./state.h     ****   return &state.enu_speed_i;
 809:./state.h     **** }
 810:./state.h     **** 
 811:./state.h     **** /// Get ground speed in ECEF coordinates (int).
 812:./state.h     **** static inline struct EcefCoor_i* stateGetSpeedEcef_i(void) {
 813:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_I))
 814:./state.h     ****     stateCalcSpeedEcef_i();
 815:./state.h     ****   return &state.ecef_speed_i;
 816:./state.h     **** }
 817:./state.h     **** 
 818:./state.h     **** /// Get norm of horizontal ground speed (int).
 819:./state.h     **** static inline int32_t* stateGetHorizontalSpeedNorm_i(void) {
 820:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_I))
 821:./state.h     ****     stateCalcHorizontalSpeedNorm_i();
 822:./state.h     ****   return &state.h_speed_norm_i;
 823:./state.h     **** }
 824:./state.h     **** 
 825:./state.h     **** /// Get dir of horizontal ground speed (int).
 826:./state.h     **** static inline int32_t* stateGetHorizontalSpeedDir_i(void) {
 827:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_I))
 828:./state.h     ****     stateCalcHorizontalSpeedDir_i();
 829:./state.h     ****   return &state.h_speed_dir_i;
 830:./state.h     **** }
 831:./state.h     **** 
 832:./state.h     **** /// Get ground speed in local NED coordinates (float).
 833:./state.h     **** static inline struct NedCoor_f* stateGetSpeedNed_f(void) {
 834:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_F))
 835:./state.h     ****     stateCalcSpeedNed_f();
 836:./state.h     ****   return &state.ned_speed_f;
 837:./state.h     **** }
 838:./state.h     **** 
 839:./state.h     **** /// Get ground speed in local ENU coordinates (float).
 840:./state.h     **** static inline struct EnuCoor_f* stateGetSpeedEnu_f(void) {
 841:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_F))
 842:./state.h     ****     stateCalcSpeedEnu_f();
 843:./state.h     ****   return &state.enu_speed_f;
 844:./state.h     **** }
 845:./state.h     **** 
 846:./state.h     **** /// Get ground speed in ECEF coordinates (float).
 847:./state.h     **** static inline struct EcefCoor_f* stateGetSpeedEcef_f(void) {
 848:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_F))
 849:./state.h     ****     stateCalcSpeedEcef_f();
 850:./state.h     ****   return &state.ecef_speed_f;
 851:./state.h     **** }
 852:./state.h     **** 
 853:./state.h     **** /// Get norm of horizontal ground speed (float).
 854:./state.h     **** static inline float* stateGetHorizontalSpeedNorm_f(void) {
 855:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_F))
 856:./state.h     ****     stateCalcHorizontalSpeedNorm_f();
 857:./state.h     ****   return &state.h_speed_norm_f;
 858:./state.h     **** }
 859:./state.h     **** 
 860:./state.h     **** /// Get dir of horizontal ground speed (float).
 861:./state.h     **** static inline float* stateGetHorizontalSpeedDir_f(void) {
 862:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_F))
 863:./state.h     ****     stateCalcHorizontalSpeedDir_f();
 864:./state.h     ****   return &state.h_speed_dir_f;
 865:./state.h     **** }
 866:./state.h     **** /** @}*/
 867:./state.h     **** 
 868:./state.h     **** 
 869:./state.h     **** 
 870:./state.h     **** /******************************************************************************
 871:./state.h     ****  *                                                                            *
 872:./state.h     ****  * Set and Get functions for the ACCELERATION representations                 *
 873:./state.h     ****  *                                                                            *
 874:./state.h     ****  *****************************************************************************/
 875:./state.h     **** /** @addtogroup state_acceleration
 876:./state.h     ****  *  @{ */
 877:./state.h     **** 
 878:./state.h     **** /************* declaration of transformation functions ************/
 879:./state.h     **** extern void stateCalcAccelNed_i(void);
 880:./state.h     **** extern void stateCalcAccelEcef_i(void);
 881:./state.h     **** extern void stateCalcAccelNed_f(void);
 882:./state.h     **** extern void stateCalcAccelEcef_f(void);
 883:./state.h     **** 
 884:./state.h     **** /*********************** validity test functions ******************/
 885:./state.h     **** 
 886:./state.h     **** /// Test if accelerations are valid.
 887:./state.h     **** static inline bool_t stateIsAccelValid(void) {
 888:./state.h     ****   return (state.accel_status);
 889:./state.h     **** }
 890:./state.h     **** 
 891:./state.h     **** /************************ Set functions ****************************/
 892:./state.h     **** 
 893:./state.h     **** /// Set acceleration in NED coordinates (int).
 894:./state.h     **** static inline void stateSetAccelNed_i(struct NedCoor_i* ned_accel) {
 895:./state.h     ****   INT32_VECT3_COPY(state.ned_accel_i, *ned_accel);
 896:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 897:./state.h     ****   state.accel_status = (1 << ACCEL_NED_I);
 898:./state.h     **** }
 899:./state.h     **** 
 900:./state.h     **** /// Set acceleration in ECEF coordinates (int).
 901:./state.h     **** static inline void stateSetAccelEcef_i(struct EcefCoor_i* ecef_accel) {
 902:./state.h     ****   INT32_VECT3_COPY(state.ecef_accel_i, *ecef_accel);
 903:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 904:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_I);
 905:./state.h     **** }
 906:./state.h     **** 
 907:./state.h     **** /// Set acceleration in NED coordinates (float).
 908:./state.h     **** static inline void stateSetAccelNed_f(struct NedCoor_f* ned_accel) {
 909:./state.h     ****   VECT3_COPY(state.ned_accel_f, *ned_accel);
 910:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 911:./state.h     ****   state.accel_status = (1 << ACCEL_NED_F);
 912:./state.h     **** }
 913:./state.h     **** 
 914:./state.h     **** /// Set acceleration in ECEF coordinates (float).
 915:./state.h     **** static inline void stateSetAccelEcef_f(struct EcefCoor_f* ecef_accel) {
 916:./state.h     ****   VECT3_COPY(state.ecef_accel_f, *ecef_accel);
 917:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 918:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_F);
 919:./state.h     **** }
 920:./state.h     **** 
 921:./state.h     **** /************************ Get functions ****************************/
 922:./state.h     **** 
 923:./state.h     **** /// Get acceleration in NED coordinates (int).
 924:./state.h     **** static inline struct NedCoor_i* stateGetAccelNed_i(void) {
 925:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_I))
 926:./state.h     ****     stateCalcAccelNed_i();
 927:./state.h     ****   return &state.ned_accel_i;
 928:./state.h     **** }
 929:./state.h     **** 
 930:./state.h     **** /// Get acceleration in ECEF coordinates (int).
 931:./state.h     **** static inline struct EcefCoor_i* stateGetAccelEcef_i(void) {
 932:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_I))
 933:./state.h     ****     stateCalcAccelEcef_i();
 934:./state.h     ****   return &state.ecef_accel_i;
 935:./state.h     **** }
 936:./state.h     **** 
 937:./state.h     **** /// Get acceleration in NED coordinates (float).
 938:./state.h     **** static inline struct NedCoor_f* stateGetAccelNed_f(void) {
 939:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_F))
 940:./state.h     ****     stateCalcAccelNed_f();
 941:./state.h     ****   return &state.ned_accel_f;
 942:./state.h     **** }
 943:./state.h     **** 
 944:./state.h     **** /// Get acceleration in ECEF coordinates (float).
 945:./state.h     **** static inline struct EcefCoor_f* stateGetAccelEcef_f(void) {
 946:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_F))
 947:./state.h     ****     stateCalcAccelEcef_f();
 948:./state.h     ****   return &state.ecef_accel_f;
 949:./state.h     **** }
 950:./state.h     **** /** @}*/
 951:./state.h     **** 
 952:./state.h     **** /******************************************************************************
 953:./state.h     **** *                                                                             *
 954:./state.h     **** * Set and Get functions for the ATTITUDE representations                      *
 955:./state.h     **** * (Calls the functions in math/pprz_orientation_conversion)                   *
 956:./state.h     **** *                                                                             *
 957:./state.h     **** *****************************************************************************/
 958:./state.h     **** /** @addtogroup state_attitude
 959:./state.h     **** * @{ */
 960:./state.h     **** /*********************** validity test functions ******************/
 961:./state.h     **** 
 962:./state.h     **** /// Test if attitudes are valid.
 963:./state.h     **** static inline bool_t stateIsAttitudeValid(void) {
 964:./state.h     ****   return (orienationCheckValid(&state.ned_to_body_orientation));
 965:./state.h     **** }
 966:./state.h     **** 
 967:./state.h     **** /************************ Set functions ****************************/
 968:./state.h     **** 
 969:./state.h     **** /// Set vehicle body attitude from quaternion (int).
 970:./state.h     **** static inline void stateSetNedToBodyQuat_i(struct Int32Quat* ned_to_body_quat) {
 971:./state.h     ****   orientationSetQuat_i(&state.ned_to_body_orientation,ned_to_body_quat);
 972:./state.h     **** }
 973:./state.h     **** 
 974:./state.h     **** /// Set vehicle body attitude from rotation matrix (int).
 975:./state.h     **** static inline void stateSetNedToBodyRMat_i(struct Int32RMat* ned_to_body_rmat) {
 976:./state.h     ****   orientationSetRMat_i(&state.ned_to_body_orientation,ned_to_body_rmat);
 977:./state.h     **** }
 978:./state.h     **** 
 979:./state.h     **** /// Set vehicle body attitude from euler angles (int).
 980:./state.h     **** static inline void stateSetNedToBodyEulers_i(struct Int32Eulers* ned_to_body_eulers) {
 981:./state.h     ****   orientationSetEulers_i(&state.ned_to_body_orientation,ned_to_body_eulers);
 982:./state.h     **** }
 983:./state.h     **** 
 984:./state.h     **** /// Set vehicle body attitude from quaternion (float).
 985:./state.h     **** static inline void stateSetNedToBodyQuat_f(struct FloatQuat* ned_to_body_quat) {
 986:./state.h     ****   orientationSetQuat_f(&state.ned_to_body_orientation,ned_to_body_quat);
 987:./state.h     **** }
 988:./state.h     **** 
 989:./state.h     **** /// Set vehicle body attitude from rotation matrix (float).
 990:./state.h     **** static inline void stateSetNedToBodyRMat_f(struct FloatRMat* ned_to_body_rmat) {
 991:./state.h     ****   orientationSetRMat_f(&state.ned_to_body_orientation,ned_to_body_rmat);
 992:./state.h     **** }
 993:./state.h     **** 
 994:./state.h     **** /// Set vehicle body attitude from euler angles (float).
 995:./state.h     **** static inline void stateSetNedToBodyEulers_f(struct FloatEulers* ned_to_body_eulers) {
 996:./state.h     ****   orientationSetEulers_f(&state.ned_to_body_orientation,ned_to_body_eulers);
 997:./state.h     **** }
 998:./state.h     **** 
 999:./state.h     **** /************************ Get functions ****************************/
1000:./state.h     **** 
1001:./state.h     **** /// Get vehicle body attitude quaternion (int).
1002:./state.h     **** static inline struct Int32Quat* stateGetNedToBodyQuat_i(void) {
1003:./state.h     ****   return orientationGetQuat_i(&state.ned_to_body_orientation);
1004:./state.h     **** }
1005:./state.h     **** 
1006:./state.h     **** /// Get vehicle body attitude rotation matrix (int).
1007:./state.h     **** static inline struct Int32RMat* stateGetNedToBodyRMat_i(void) {
1008:./state.h     ****   return orientationGetRMat_i(&state.ned_to_body_orientation);
1009:./state.h     **** }
1010:./state.h     **** 
1011:./state.h     **** /// Get vehicle body attitude euler angles (int).
1012:./state.h     **** static inline struct Int32Eulers* stateGetNedToBodyEulers_i(void) {
1013:./state.h     ****   return orientationGetEulers_i(&state.ned_to_body_orientation);
1014:./state.h     **** }
1015:./state.h     **** 
1016:./state.h     **** /// Get vehicle body attitude quaternion (float).
1017:./state.h     **** static inline struct FloatQuat* stateGetNedToBodyQuat_f(void) {
1018:./state.h     ****   return orientationGetQuat_f(&state.ned_to_body_orientation);
1019:./state.h     **** }
1020:./state.h     **** 
1021:./state.h     **** /// Get vehicle body attitude rotation matrix (float).
1022:./state.h     **** static inline struct FloatRMat* stateGetNedToBodyRMat_f(void) {
1023:./state.h     ****   return orientationGetRMat_f(&state.ned_to_body_orientation);
1024:./state.h     **** }
1025:./state.h     **** 
1026:./state.h     **** /// Get vehicle body attitude euler angles (float).
1027:./state.h     **** static inline struct FloatEulers* stateGetNedToBodyEulers_f(void) {
1028:./state.h     ****   return orientationGetEulers_f(&state.ned_to_body_orientation);
1029:./state.h     **** }
1030:./state.h     **** /** @}*/
1031:./state.h     **** 
1032:./state.h     **** 
1033:./state.h     **** /******************************************************************************
1034:./state.h     ****  *                                                                            *
1035:./state.h     ****  * Set and Get functions for the ANGULAR RATE representations                 *
1036:./state.h     ****  *                                                                            *
1037:./state.h     ****  *****************************************************************************/
1038:./state.h     **** /** @addtogroup state_rate
1039:./state.h     ****  *  @{ */
1040:./state.h     **** 
1041:./state.h     **** /************* declaration of transformation functions ************/
1042:./state.h     **** extern void stateCalcBodyRates_i(void);
1043:./state.h     **** extern void stateCalcBodyRates_f(void);
1044:./state.h     **** 
1045:./state.h     **** /*********************** validity test functions ******************/
1046:./state.h     **** 
1047:./state.h     **** /// Test if rates are valid.
1048:./state.h     **** static inline bool_t stateIsRateValid(void) {
1049:./state.h     ****   return (state.rate_status);
1050:./state.h     **** }
1051:./state.h     **** 
1052:./state.h     **** /************************ Set functions ****************************/
1053:./state.h     **** 
1054:./state.h     **** /// Set vehicle body angular rate (int).
1055:./state.h     **** static inline void stateSetBodyRates_i(struct Int32Rates* body_rate) {
1056:./state.h     ****   RATES_COPY(state.body_rates_i, *body_rate);
1057:./state.h     ****   /* clear bits for all attitude representations and only set the new one */
1058:./state.h     ****   state.rate_status = (1 << RATE_I);
1059:./state.h     **** }
1060:./state.h     **** 
1061:./state.h     **** /// Set vehicle body angular rate (float).
1062:./state.h     **** static inline void stateSetBodyRates_f(struct FloatRates* body_rate) {
1063:./state.h     ****   RATES_COPY(state.body_rates_f, *body_rate);
1064:./state.h     ****   /* clear bits for all attitude representations and only set the new one */
1065:./state.h     ****   state.rate_status = (1 << RATE_F);
1066:./state.h     **** }
1067:./state.h     **** 
1068:./state.h     **** /************************ Get functions ****************************/
1069:./state.h     **** 
1070:./state.h     **** /// Get vehicle body angular rate (int).
1071:./state.h     **** static inline struct Int32Rates* stateGetBodyRates_i(void) {
  26              		.loc 1 1071 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 08B5     		push	{r3, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
1072:./state.h     ****   if (!bit_is_set(state.rate_status, RATE_I))
  35              		.loc 1 1072 0
  36 0002 044B     		ldr	r3, .L4
  37 0004 93F82802 		ldrb	r0, [r3, #552]	@ zero_extendqisi2
  38 0008 C307     		lsls	r3, r0, #31
  39 000a 01D4     		bmi	.L2
1073:./state.h     ****     stateCalcBodyRates_i();
  40              		.loc 1 1073 0
  41 000c FFF7FEFF 		bl	stateCalcBodyRates_i
  42              	.LVL0:
  43              	.L2:
1074:./state.h     ****   return &state.body_rates_i;
1075:./state.h     **** }
  44              		.loc 1 1075 0
  45 0010 0148     		ldr	r0, .L4+4
  46 0012 08BD     		pop	{r3, pc}
  47              	.L5:
  48              		.align	2
  49              	.L4:
  50 0014 00000000 		.word	state
  51 0018 2C020000 		.word	state+556
  52              		.cfi_endproc
  53              	.LFE82:
  55              		.section	.text.ahrs_init,"ax",%progbits
  56              		.align	1
  57              		.global	ahrs_init
  58              		.thumb
  59              		.thumb_func
  61              	ahrs_init:
  62              	.LFB127:
  63              		.file 2 "subsystems/ahrs/ahrs_int_cmpl_quat.c"
   1:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /*
   2:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * Copyright (C) 2008-2012 The Paparazzi Team
   3:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
   4:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * This file is part of paparazzi.
   5:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
   6:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * it under the terms of the GNU General Public License as published by
   8:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * any later version.
  10:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
  11:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * GNU General Public License for more details.
  15:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
  16:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * You should have received a copy of the GNU General Public License
  17:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * Boston, MA 02111-1307, USA.
  20:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  */
  21:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  22:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /**
  23:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * @file subsystems/ahrs/ahrs_int_cmpl_quat.c
  24:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
  25:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * Quaternion complementary filter (fixed-point).
  26:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
  27:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * Estimate the attitude, heading and gyro bias.
  28:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
  29:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  */
  30:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  31:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/ahrs/ahrs_int_cmpl_quat.h"
  32:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/ahrs/ahrs_aligner.h"
  33:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/ahrs/ahrs_int_utils.h"
  34:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  35:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "state.h"
  36:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  37:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/imu.h"
  38:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if USE_GPS
  39:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/gps.h"
  40:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  41:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "math/pprz_trig_int.h"
  42:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "math/pprz_algebra_int.h"
  43:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  44:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "generated/airframe.h"
  45:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  46:subsystems/ahrs/ahrs_int_cmpl_quat.c **** //#include "../../test/pprz_algebra_print.h"
  47:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  48:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_full(void);
  49:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_2d(void);
  50:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  51:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifdef AHRS_MAG_UPDATE_YAW_ONLY
  52:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #warning "AHRS_MAG_UPDATE_YAW_ONLY is deprecated, please remove it. This is the default behaviour. 
  53:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  54:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  55:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if USE_MAGNETOMETER && AHRS_USE_GPS_HEADING
  56:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #warning "Using magnetometer and GPS course to update heading. Probably better to set USE_MAGNETOME
  57:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  58:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  59:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifndef AHRS_PROPAGATE_FREQUENCY
  60:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #define AHRS_PROPAGATE_FREQUENCY PERIODIC_FREQUENCY
  61:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  62:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  63:subsystems/ahrs/ahrs_int_cmpl_quat.c **** struct AhrsIntCmpl ahrs_impl;
  64:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  65:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifdef AHRS_UPDATE_FW_ESTIMATOR
  66:subsystems/ahrs/ahrs_int_cmpl_quat.c **** // remotely settable
  67:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifndef INS_ROLL_NEUTRAL_DEFAULT
  68:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #define INS_ROLL_NEUTRAL_DEFAULT 0
  69:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  70:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifndef INS_PITCH_NEUTRAL_DEFAULT
  71:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #define INS_PITCH_NEUTRAL_DEFAULT 0
  72:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  73:subsystems/ahrs/ahrs_int_cmpl_quat.c **** float ins_roll_neutral = INS_ROLL_NEUTRAL_DEFAULT;
  74:subsystems/ahrs/ahrs_int_cmpl_quat.c **** float ins_pitch_neutral = INS_PITCH_NEUTRAL_DEFAULT;
  75:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  76:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  77:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void set_body_state_from_quat(void);
  78:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  79:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  80:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_init(void) {
  64              		.loc 2 80 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  81:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  82:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_UNINIT;
  69              		.loc 2 82 0
  70 0000 194B     		ldr	r3, .L7
  71 0002 0020     		movs	r0, #0
  72 0004 1870     		strb	r0, [r3, #0]
  83:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.ltp_vel_norm_valid = FALSE;
  84:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = FALSE;
  85:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  86:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* set ltp_to_imu so that body is zero */
  87:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
  73              		.loc 2 87 0
  74 0006 194B     		ldr	r3, .L7+4
  83:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.ltp_vel_norm_valid = FALSE;
  75              		.loc 2 83 0
  76 0008 1949     		ldr	r1, .L7+8
  77              		.loc 2 87 0
  78 000a D3F88420 		ldr	r2, [r3, #132]
  83:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.ltp_vel_norm_valid = FALSE;
  79              		.loc 2 83 0
  80 000e 81F87000 		strb	r0, [r1, #112]
  81              		.loc 2 87 0
  82 0012 0A65     		str	r2, [r1, #80]
  83 0014 D3F88820 		ldr	r2, [r3, #136]
  84:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = FALSE;
  84              		.loc 2 84 0
  85 0018 81F87300 		strb	r0, [r1, #115]
  86              		.loc 2 87 0
  87 001c 4A65     		str	r2, [r1, #84]
  88 001e D3F88C20 		ldr	r2, [r3, #140]
  89 0022 D3F89030 		ldr	r3, [r3, #144]
  90 0026 8A65     		str	r2, [r1, #88]
  91 0028 CB65     		str	r3, [r1, #92]
  88:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.imu_rate);
  89:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  90:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.gyro_bias);
  91:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
  92:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.high_rez_bias);
  92              		.loc 2 92 0
  93 002a 0022     		movs	r2, #0
  94 002c 0023     		movs	r3, #0
  95 002e C1E90E23 		strd	r2, [r1, #56]
  96 0032 C1E91023 		strd	r2, [r1, #64]
  97 0036 C1E91223 		strd	r2, [r1, #72]
  88:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.imu_rate);
  98              		.loc 2 88 0
  99 003a C860     		str	r0, [r1, #12]
 100 003c 0861     		str	r0, [r1, #16]
 101 003e 4861     		str	r0, [r1, #20]
  90:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.gyro_bias);
 102              		.loc 2 90 0
 103 0040 0860     		str	r0, [r1, #0]
 104 0042 4860     		str	r0, [r1, #4]
 105 0044 8860     		str	r0, [r1, #8]
  91:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
 106              		.loc 2 91 0
 107 0046 8861     		str	r0, [r1, #24]
 108 0048 C861     		str	r0, [r1, #28]
 109 004a 0862     		str	r0, [r1, #32]
  93:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  94:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_GRAVITY_UPDATE_COORDINATED_TURN
  95:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.correct_gravity = TRUE;
  96:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
  97:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.correct_gravity = FALSE;
 110              		.loc 2 97 0
 111 004c 81F87100 		strb	r0, [r1, #113]
  98:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  99:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 100:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_GRAVITY_UPDATE_NORM_HEURISTIC
 101:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.use_gravity_heuristic = TRUE;
 102:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
 103:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.use_gravity_heuristic = FALSE;
 112              		.loc 2 103 0
 113 0050 81F87200 		strb	r0, [r1, #114]
 104:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 105:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 106:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   VECT3_ASSIGN(ahrs_impl.mag_h, MAG_BFP_OF_REAL(AHRS_H_X), MAG_BFP_OF_REAL(AHRS_H_Y), MAG_BFP_OF_RE
 114              		.loc 2 106 0
 115 0054 6FF04B02 		mvn	r2, #75
 116 0058 4FF4D760 		mov	r0, #1720
 117 005c 40F25343 		movw	r3, #1107
 118 0060 0866     		str	r0, [r1, #96]
 119 0062 4A66     		str	r2, [r1, #100]
 120 0064 8B66     		str	r3, [r1, #104]
 121 0066 7047     		bx	lr
 122              	.L8:
 123              		.align	2
 124              	.L7:
 125 0068 00000000 		.word	ahrs
 126 006c 00000000 		.word	imu
 127 0070 00000000 		.word	.LANCHOR0
 128              		.cfi_endproc
 129              	.LFE127:
 131              		.global	__aeabi_i2f
 132              		.global	__aeabi_fmul
 133              		.global	__aeabi_fadd
 134              		.global	__aeabi_f2d
 135              		.global	__aeabi_ddiv
 136              		.global	__aeabi_dmul
 137              		.global	__aeabi_d2f
 138              		.global	__aeabi_dsub
 139              		.global	__aeabi_dcmplt
 140              		.global	__aeabi_dcmpgt
 141              		.global	__aeabi_fsub
 142              		.global	__aeabi_fcmpgt
 143              		.global	__aeabi_fdiv
 144              		.global	__aeabi_dadd
 145              		.global	__aeabi_fcmplt
 146              		.global	__aeabi_f2iz
 147              		.section	.text.ahrs_align,"ax",%progbits
 148              		.align	1
 149              		.global	ahrs_align
 150              		.thumb
 151              		.thumb_func
 153              	ahrs_align:
 154              	.LFB128:
 107:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 108:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 109:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 110:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_align(void) {
 155              		.loc 2 110 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 32
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              	.LVL1:
 160 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 161              	.LCFI1:
 162              		.cfi_def_cfa_offset 36
 163              		.cfi_offset 4, -36
 164              		.cfi_offset 5, -32
 165              		.cfi_offset 6, -28
 166              		.cfi_offset 7, -24
 167              		.cfi_offset 8, -20
 168              		.cfi_offset 9, -16
 169              		.cfi_offset 10, -12
 170              		.cfi_offset 11, -8
 171              		.cfi_offset 14, -4
 172              	.LBB34:
 173              	.LBB35:
 174              	.LBB36:
 175              	.LBB37:
 176              	.LBB38:
 177              	.LBB39:
 178              		.file 3 "./subsystems/ahrs/ahrs_float_utils.h"
   1:./subsystems/ahrs/ahrs_float_utils.h **** /*
   2:./subsystems/ahrs/ahrs_float_utils.h ****  * Copyright (C) 2009 Felix Ruess <felix.ruess@gmail.com>
   3:./subsystems/ahrs/ahrs_float_utils.h ****  * Copyright (C) 2009 Antoine Drouin <poinix@gmail.com>
   4:./subsystems/ahrs/ahrs_float_utils.h ****  *
   5:./subsystems/ahrs/ahrs_float_utils.h ****  * This file is part of paparazzi.
   6:./subsystems/ahrs/ahrs_float_utils.h ****  *
   7:./subsystems/ahrs/ahrs_float_utils.h ****  * paparazzi is free software; you can redistribute it and/or modify
   8:./subsystems/ahrs/ahrs_float_utils.h ****  * it under the terms of the GNU General Public License as published by
   9:./subsystems/ahrs/ahrs_float_utils.h ****  * the Free Software Foundation; either version 2, or (at your option)
  10:./subsystems/ahrs/ahrs_float_utils.h ****  * any later version.
  11:./subsystems/ahrs/ahrs_float_utils.h ****  *
  12:./subsystems/ahrs/ahrs_float_utils.h ****  * paparazzi is distributed in the hope that it will be useful,
  13:./subsystems/ahrs/ahrs_float_utils.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:./subsystems/ahrs/ahrs_float_utils.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:./subsystems/ahrs/ahrs_float_utils.h ****  * GNU General Public License for more details.
  16:./subsystems/ahrs/ahrs_float_utils.h ****  *
  17:./subsystems/ahrs/ahrs_float_utils.h ****  * You should have received a copy of the GNU General Public License
  18:./subsystems/ahrs/ahrs_float_utils.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  19:./subsystems/ahrs/ahrs_float_utils.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  20:./subsystems/ahrs/ahrs_float_utils.h ****  * Boston, MA 02111-1307, USA.
  21:./subsystems/ahrs/ahrs_float_utils.h ****  */
  22:./subsystems/ahrs/ahrs_float_utils.h **** 
  23:./subsystems/ahrs/ahrs_float_utils.h **** /**
  24:./subsystems/ahrs/ahrs_float_utils.h ****  * @file subsystems/ahrs/ahrs_float_utils.h
  25:./subsystems/ahrs/ahrs_float_utils.h ****  *
  26:./subsystems/ahrs/ahrs_float_utils.h ****  * Utility functions for floating point AHRS implementations.
  27:./subsystems/ahrs/ahrs_float_utils.h ****  *
  28:./subsystems/ahrs/ahrs_float_utils.h ****  */
  29:./subsystems/ahrs/ahrs_float_utils.h **** 
  30:./subsystems/ahrs/ahrs_float_utils.h **** #ifndef AHRS_FLOAT_UTILS_H
  31:./subsystems/ahrs/ahrs_float_utils.h **** #define AHRS_FLOAT_UTILS_H
  32:./subsystems/ahrs/ahrs_float_utils.h **** 
  33:./subsystems/ahrs/ahrs_float_utils.h **** #include "subsystems/ahrs/ahrs_magnetic_field_model.h"
  34:./subsystems/ahrs/ahrs_float_utils.h **** 
  35:./subsystems/ahrs/ahrs_float_utils.h **** #include "std.h" // for ABS
  36:./subsystems/ahrs/ahrs_float_utils.h **** 
  37:./subsystems/ahrs/ahrs_float_utils.h **** static inline void ahrs_float_get_euler_from_accel_mag(struct FloatEulers* e, struct Int32Vect3* ac
  38:./subsystems/ahrs/ahrs_float_utils.h ****   /* get phi and theta from accelerometer */
  39:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 accelf;
  40:./subsystems/ahrs/ahrs_float_utils.h ****   ACCELS_FLOAT_OF_BFP(accelf, *accel);
  41:./subsystems/ahrs/ahrs_float_utils.h ****   const float phi   = atan2f(-accelf.y, -accelf.z);
  42:./subsystems/ahrs/ahrs_float_utils.h ****   const float cphi = cosf(phi);
  43:./subsystems/ahrs/ahrs_float_utils.h ****   const float theta = atan2f(cphi*accelf.x, -accelf.z);
  44:./subsystems/ahrs/ahrs_float_utils.h **** 
  45:./subsystems/ahrs/ahrs_float_utils.h ****   /* get psi from magnetometer */
  46:./subsystems/ahrs/ahrs_float_utils.h ****   /* project mag on local tangeant plane */
  47:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 magf;
  48:./subsystems/ahrs/ahrs_float_utils.h ****   MAGS_FLOAT_OF_BFP(magf, *mag);
  49:./subsystems/ahrs/ahrs_float_utils.h ****   const float sphi   = sinf(phi);
  50:./subsystems/ahrs/ahrs_float_utils.h ****   const float ctheta = cosf(theta);
  51:./subsystems/ahrs/ahrs_float_utils.h ****   const float stheta = sinf(theta);
  52:./subsystems/ahrs/ahrs_float_utils.h ****   const float mn = ctheta * magf.x + sphi*stheta*magf.y + cphi*stheta*magf.z;
  53:./subsystems/ahrs/ahrs_float_utils.h ****   const float me =     0. * magf.x + cphi       *magf.y - sphi       *magf.z;
  54:./subsystems/ahrs/ahrs_float_utils.h ****   float psi = -atan2f(me, mn) + atan2(AHRS_H_Y, AHRS_H_X);
  55:./subsystems/ahrs/ahrs_float_utils.h ****   if (psi > M_PI) psi -= 2.*M_PI; if (psi < -M_PI) psi+= 2.*M_PI;
  56:./subsystems/ahrs/ahrs_float_utils.h ****   EULERS_ASSIGN(*e, phi, theta, psi);
  57:./subsystems/ahrs/ahrs_float_utils.h **** 
  58:./subsystems/ahrs/ahrs_float_utils.h **** }
  59:./subsystems/ahrs/ahrs_float_utils.h **** 
  60:./subsystems/ahrs/ahrs_float_utils.h **** /** Compute a quaternion representing roll and pitch from an accelerometer measurement. */
  61:./subsystems/ahrs/ahrs_float_utils.h **** static inline void ahrs_float_get_quat_from_accel(struct FloatQuat* q, struct Int32Vect3* accel) {
  62:./subsystems/ahrs/ahrs_float_utils.h ****   /* normalized accel measurement in floating point */
  63:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 acc_normalized;
  64:./subsystems/ahrs/ahrs_float_utils.h ****   ACCELS_FLOAT_OF_BFP(acc_normalized, *accel);
 179              		.loc 3 64 0
 180 0004 5F4C     		ldr	r4, .L46
 181              	.LBE39:
 182              	.LBE38:
 183              	.LBE37:
 184              	.LBE36:
 185              	.LBE35:
 186              	.LBE34:
 187              		.loc 2 110 0
 188 0006 89B0     		sub	sp, sp, #36
 189              	.LCFI2:
 190              		.cfi_def_cfa_offset 72
 191              	.LBB67:
 192              	.LBB65:
 193              	.LBB64:
 194              	.LBB63:
 195              	.LBB47:
 196              	.LBB46:
 197              		.loc 3 64 0
 198 0008 E068     		ldr	r0, [r4, #12]
 199 000a FFF7FEFF 		bl	__aeabi_i2f
 200              	.LVL2:
 201 000e 4FF06A51 		mov	r1, #981467136
 202 0012 FFF7FEFF 		bl	__aeabi_fmul
 203              	.LVL3:
 204 0016 8246     		mov	sl, r0
 205              	.LVL4:
 206 0018 2069     		ldr	r0, [r4, #16]
 207              	.LVL5:
 208 001a FFF7FEFF 		bl	__aeabi_i2f
 209              	.LVL6:
 210 001e 4FF06A51 		mov	r1, #981467136
 211 0022 FFF7FEFF 		bl	__aeabi_fmul
 212              	.LVL7:
 213 0026 8046     		mov	r8, r0
 214              	.LVL8:
 215 0028 6069     		ldr	r0, [r4, #20]
 216              	.LVL9:
 217 002a FFF7FEFF 		bl	__aeabi_i2f
 218              	.LVL10:
 219 002e 4FF06A51 		mov	r1, #981467136
 220 0032 FFF7FEFF 		bl	__aeabi_fmul
 221              	.LVL11:
 222              	.LBB40:
  65:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_VECT3_NORMALIZE(acc_normalized);
 223              		.loc 3 65 0
 224 0036 5146     		mov	r1, sl
 225              	.LBE40:
  64:./subsystems/ahrs/ahrs_float_utils.h ****   ACCELS_FLOAT_OF_BFP(acc_normalized, *accel);
 226              		.loc 3 64 0
 227 0038 0646     		mov	r6, r0
 228              	.LVL12:
 229              	.LBB41:
 230              		.loc 3 65 0
 231 003a 5046     		mov	r0, sl
 232              	.LVL13:
 233 003c FFF7FEFF 		bl	__aeabi_fmul
 234              	.LVL14:
 235 0040 4146     		mov	r1, r8
 236 0042 0546     		mov	r5, r0
 237 0044 4046     		mov	r0, r8
 238 0046 FFF7FEFF 		bl	__aeabi_fmul
 239              	.LVL15:
 240 004a 0146     		mov	r1, r0
 241 004c 2846     		mov	r0, r5
 242 004e FFF7FEFF 		bl	__aeabi_fadd
 243              	.LVL16:
 244 0052 3146     		mov	r1, r6
 245 0054 0746     		mov	r7, r0
 246 0056 3046     		mov	r0, r6
 247 0058 FFF7FEFF 		bl	__aeabi_fmul
 248              	.LVL17:
 249 005c 0146     		mov	r1, r0
 250 005e 3846     		mov	r0, r7
 251 0060 FFF7FEFF 		bl	__aeabi_fadd
 252              	.LVL18:
 253 0064 FFF7FEFF 		bl	sqrtf
 254              	.LVL19:
 255 0068 FFF7FEFF 		bl	__aeabi_f2d
 256              	.LVL20:
 257 006c 0246     		mov	r2, r0
 258 006e 0B46     		mov	r3, r1
 259 0070 0020     		movs	r0, #0
 260 0072 4549     		ldr	r1, .L46+4
 261 0074 FFF7FEFF 		bl	__aeabi_ddiv
 262              	.LVL21:
 263 0078 0446     		mov	r4, r0
 264 007a 0D46     		mov	r5, r1
 265              	.LVL22:
 266 007c 3046     		mov	r0, r6
 267 007e FFF7FEFF 		bl	__aeabi_f2d
 268              	.LVL23:
 269 0082 2246     		mov	r2, r4
 270 0084 2B46     		mov	r3, r5
 271 0086 FFF7FEFF 		bl	__aeabi_dmul
 272              	.LVL24:
 273 008a FFF7FEFF 		bl	__aeabi_d2f
 274              	.LVL25:
 275 008e 8146     		mov	r9, r0
 276              	.LVL26:
 277              	.LBE41:
  66:./subsystems/ahrs/ahrs_float_utils.h **** 
  67:./subsystems/ahrs/ahrs_float_utils.h ****   /* check for 180deg case */
  68:./subsystems/ahrs/ahrs_float_utils.h ****   if ( ABS(acc_normalized.z - 1.0) < 5*FLT_MIN ) {
 278              		.loc 3 68 0
 279 0090 FFF7FEFF 		bl	__aeabi_f2d
 280              	.LVL27:
 281 0094 0022     		movs	r2, #0
 282 0096 3C4B     		ldr	r3, .L46+4
 283 0098 FFF7FEFF 		bl	__aeabi_dsub
 284              	.LVL28:
 285 009c 0022     		movs	r2, #0
 286 009e 0023     		movs	r3, #0
 287 00a0 0646     		mov	r6, r0
 288 00a2 0F46     		mov	r7, r1
 289 00a4 FFF7FEFF 		bl	__aeabi_dcmplt
 290              	.LVL29:
 291 00a8 4FF0010B 		mov	fp, #1
 292 00ac 30B1     		cbz	r0, .L38
 293 00ae 3046     		mov	r0, r6
 294 00b0 3946     		mov	r1, r7
 295 00b2 0022     		movs	r2, #0
 296 00b4 354B     		ldr	r3, .L46+8
 297 00b6 FFF7FEFF 		bl	__aeabi_dcmpgt
 298              	.LVL30:
 299 00ba 05E0     		b	.L43
 300              	.L38:
 301 00bc 3046     		mov	r0, r6
 302 00be 3946     		mov	r1, r7
 303 00c0 0022     		movs	r2, #0
 304 00c2 334B     		ldr	r3, .L46+12
 305 00c4 FFF7FEFF 		bl	__aeabi_dcmplt
 306              	.LVL31:
 307              	.L43:
 308 00c8 00B9     		cbnz	r0, .L14
 309 00ca 8346     		mov	fp, r0
 310              	.L14:
 311 00cc 5FFA8BF3 		uxtb	r3, fp
 312 00d0 002B     		cmp	r3, #0
 313 00d2 4FD1     		bne	.L28
 314              	.LBB42:
  65:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_VECT3_NORMALIZE(acc_normalized);
 315              		.loc 3 65 0
 316 00d4 5046     		mov	r0, sl
 317 00d6 FFF7FEFF 		bl	__aeabi_f2d
 318              	.LVL32:
 319 00da 2246     		mov	r2, r4
 320 00dc 2B46     		mov	r3, r5
 321 00de FFF7FEFF 		bl	__aeabi_dmul
 322              	.LVL33:
 323 00e2 FFF7FEFF 		bl	__aeabi_d2f
 324              	.LVL34:
 325 00e6 8246     		mov	sl, r0
 326              	.LVL35:
 327 00e8 4046     		mov	r0, r8
 328 00ea FFF7FEFF 		bl	__aeabi_f2d
 329              	.LVL36:
 330 00ee 2246     		mov	r2, r4
 331 00f0 2B46     		mov	r3, r5
 332 00f2 FFF7FEFF 		bl	__aeabi_dmul
 333              	.LVL37:
 334 00f6 FFF7FEFF 		bl	__aeabi_d2f
 335              	.LVL38:
 336              	.LBE42:
  69:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(*q, 0.0, 1.0, 0.0, 0.0);
  70:./subsystems/ahrs/ahrs_float_utils.h ****   }
  71:./subsystems/ahrs/ahrs_float_utils.h ****   else {
  72:./subsystems/ahrs/ahrs_float_utils.h ****     /*
  73:./subsystems/ahrs/ahrs_float_utils.h ****      * axis we want to rotate around is cross product of accel and reference [0,0,-g]
  74:./subsystems/ahrs/ahrs_float_utils.h ****      * normalized: cross(acc_normalized, [0,0,-1])
  75:./subsystems/ahrs/ahrs_float_utils.h ****      * vector part of quaternion is the axis
  76:./subsystems/ahrs/ahrs_float_utils.h ****      * scalar part (angle): 1.0 + dot(acc_normalized, [0,0,-1])
  77:./subsystems/ahrs/ahrs_float_utils.h ****      */
  78:./subsystems/ahrs/ahrs_float_utils.h ****     q->qx = - acc_normalized.y;
  79:./subsystems/ahrs/ahrs_float_utils.h ****     q->qy = acc_normalized.x;
  80:./subsystems/ahrs/ahrs_float_utils.h ****     q->qz = 0.0;
  81:./subsystems/ahrs/ahrs_float_utils.h ****     q->qi = 1.0 - acc_normalized.z;
 337              		.loc 3 81 0
 338 00fa 4946     		mov	r1, r9
  78:./subsystems/ahrs/ahrs_float_utils.h ****     q->qx = - acc_normalized.y;
 339              		.loc 3 78 0
 340 00fc 00F1004B 		add	fp, r0, #-2147483648
 341              	.LVL39:
 342              		.loc 3 81 0
 343 0100 4FF07E50 		mov	r0, #1065353216
 344 0104 FFF7FEFF 		bl	__aeabi_fsub
 345              	.LVL40:
 346              	.LBB43:
  82:./subsystems/ahrs/ahrs_float_utils.h ****     FLOAT_QUAT_NORMALIZE(*q);
 347              		.loc 3 82 0
 348 0108 0146     		mov	r1, r0
 349              	.LBE43:
  81:./subsystems/ahrs/ahrs_float_utils.h ****     q->qi = 1.0 - acc_normalized.z;
 350              		.loc 3 81 0
 351 010a 0190     		str	r0, [sp, #4]	@ float
 352              	.LVL41:
 353              	.LBB44:
 354              		.loc 3 82 0
 355 010c FFF7FEFF 		bl	__aeabi_fmul
 356              	.LVL42:
 357 0110 5946     		mov	r1, fp
 358 0112 0446     		mov	r4, r0
 359              	.LVL43:
 360 0114 5846     		mov	r0, fp
 361 0116 FFF7FEFF 		bl	__aeabi_fmul
 362              	.LVL44:
 363 011a 0146     		mov	r1, r0
 364 011c 2046     		mov	r0, r4
 365 011e FFF7FEFF 		bl	__aeabi_fadd
 366              	.LVL45:
 367 0122 5146     		mov	r1, sl
 368 0124 0546     		mov	r5, r0
 369 0126 5046     		mov	r0, sl
 370 0128 FFF7FEFF 		bl	__aeabi_fmul
 371              	.LVL46:
 372 012c 0146     		mov	r1, r0
 373 012e 2846     		mov	r0, r5
 374 0130 FFF7FEFF 		bl	__aeabi_fadd
 375              	.LVL47:
 376 0134 0021     		movs	r1, #0
 377 0136 FFF7FEFF 		bl	__aeabi_fadd
 378              	.LVL48:
 379 013a FFF7FEFF 		bl	sqrtf
 380              	.LVL49:
 381 013e 4FF40001 		mov	r1, #8388608
 382 0142 0646     		mov	r6, r0
 383              	.LVL50:
 384 0144 FFF7FEFF 		bl	__aeabi_fcmpgt
 385              	.LVL51:
 386 0148 20B3     		cbz	r0, .L39
 387 014a 0198     		ldr	r0, [sp, #4]	@ float
 388 014c 3146     		mov	r1, r6
 389 014e FFF7FEFF 		bl	__aeabi_fdiv
 390              	.LVL52:
 391 0152 3146     		mov	r1, r6
 392 0154 0190     		str	r0, [sp, #4]	@ float
 393              	.LVL53:
 394 0156 5846     		mov	r0, fp
 395              	.LVL54:
 396 0158 FFF7FEFF 		bl	__aeabi_fdiv
 397              	.LVL55:
 398 015c 3146     		mov	r1, r6
 399 015e 8346     		mov	fp, r0
 400              	.LVL56:
 401 0160 5046     		mov	r0, sl
 402              	.LVL57:
 403 0162 FFF7FEFF 		bl	__aeabi_fdiv
 404              	.LVL58:
 405 0166 3146     		mov	r1, r6
 406 0168 8246     		mov	sl, r0
 407              	.LVL59:
 408 016a 0020     		movs	r0, #0
 409              	.LVL60:
 410 016c FFF7FEFF 		bl	__aeabi_fdiv
 411              	.LVL61:
 412 0170 0290     		str	r0, [sp, #8]	@ float
 413              	.LVL62:
 414 0172 13E0     		b	.L15
 415              	.LVL63:
 416              	.L28:
 417              	.LBE44:
  69:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(*q, 0.0, 1.0, 0.0, 0.0);
 418              		.loc 3 69 0
 419 0174 0020     		movs	r0, #0
 420 0176 0290     		str	r0, [sp, #8]	@ float
 421 0178 8246     		mov	sl, r0
 422              	.LVL64:
 423 017a 4FF07E5B 		mov	fp, #1065353216
 424 017e 0190     		str	r0, [sp, #4]	@ float
 425 0180 0CE0     		b	.L15
 426              	.L47:
 427 0182 00BF     		.align	2
 428              	.L46:
 429 0184 00000000 		.word	ahrs_aligner
 430 0188 0000F03F 		.word	1072693248
 431 018c 000034B8 		.word	-1204551680
 432 0190 00003438 		.word	942931968
 433              	.LVL65:
 434              	.L39:
 435              	.LBB45:
  80:./subsystems/ahrs/ahrs_float_utils.h ****     q->qz = 0.0;
 436              		.loc 3 80 0
 437 0194 4FF0000C 		mov	ip, #0
 438 0198 CDF808C0 		str	ip, [sp, #8]	@ float
 439              	.LVL66:
 440              	.L15:
 441              	.LBE45:
 442              	.LBE46:
 443              	.LBE47:
  83:./subsystems/ahrs/ahrs_float_utils.h ****   }
  84:./subsystems/ahrs/ahrs_float_utils.h **** }
  85:./subsystems/ahrs/ahrs_float_utils.h **** 
  86:./subsystems/ahrs/ahrs_float_utils.h **** static inline void ahrs_float_get_quat_from_accel_mag(struct FloatQuat* q, struct Int32Vect3* accel
  87:./subsystems/ahrs/ahrs_float_utils.h **** 
  88:./subsystems/ahrs/ahrs_float_utils.h ****   /* the quaternion representing roll and pitch from acc measurement */
  89:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatQuat q_a;
  90:./subsystems/ahrs/ahrs_float_utils.h ****   ahrs_float_get_quat_from_accel(&q_a, accel);
  91:./subsystems/ahrs/ahrs_float_utils.h **** 
  92:./subsystems/ahrs/ahrs_float_utils.h **** 
  93:./subsystems/ahrs/ahrs_float_utils.h ****   /* convert mag measurement to float */
  94:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 mag_float;
  95:./subsystems/ahrs/ahrs_float_utils.h ****   MAGS_FLOAT_OF_BFP(mag_float, *mag);
 444              		.loc 3 95 0
 445 019c B04F     		ldr	r7, .L48+24
 446 019e B869     		ldr	r0, [r7, #24]
 447 01a0 FFF7FEFF 		bl	__aeabi_i2f
 448              	.LVL67:
 449 01a4 4FF06851 		mov	r1, #973078528
 450 01a8 FFF7FEFF 		bl	__aeabi_fmul
 451              	.LVL68:
 452 01ac 0390     		str	r0, [sp, #12]	@ float
 453              	.LVL69:
 454 01ae F869     		ldr	r0, [r7, #28]
 455              	.LVL70:
 456 01b0 FFF7FEFF 		bl	__aeabi_i2f
 457              	.LVL71:
 458 01b4 4FF06851 		mov	r1, #973078528
 459 01b8 FFF7FEFF 		bl	__aeabi_fmul
 460              	.LVL72:
 461 01bc 0490     		str	r0, [sp, #16]	@ float
 462              	.LVL73:
 463 01be 386A     		ldr	r0, [r7, #32]
 464              	.LVL74:
 465 01c0 FFF7FEFF 		bl	__aeabi_i2f
 466              	.LVL75:
 467 01c4 4FF06851 		mov	r1, #973078528
 468 01c8 FFF7FEFF 		bl	__aeabi_fmul
 469              	.LVL76:
 470 01cc 0590     		str	r0, [sp, #20]	@ float
 471              	.LVL77:
 472              	.LBB48:
  96:./subsystems/ahrs/ahrs_float_utils.h **** 
  97:./subsystems/ahrs/ahrs_float_utils.h ****   /* and rotate to horizontal plane using the quat from above */
  98:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatRMat rmat_phi_theta;
  99:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 473              		.loc 3 99 0
 474 01ce 0198     		ldr	r0, [sp, #4]	@ float
 475              	.LVL78:
 476 01d0 FFF7FEFF 		bl	__aeabi_f2d
 477              	.LVL79:
 478 01d4 9CA3     		adr	r3, .L48
 479 01d6 D3E90023 		ldrd	r2, [r3]
 480 01da FFF7FEFF 		bl	__aeabi_dmul
 481              	.LVL80:
 482 01de FFF7FEFF 		bl	__aeabi_d2f
 483              	.LVL81:
 484 01e2 0546     		mov	r5, r0
 485              	.LVL82:
 486 01e4 5846     		mov	r0, fp
 487              	.LVL83:
 488 01e6 FFF7FEFF 		bl	__aeabi_f2d
 489              	.LVL84:
 490 01ea 97A3     		adr	r3, .L48
 491 01ec D3E90023 		ldrd	r2, [r3]
 492 01f0 FFF7FEFF 		bl	__aeabi_dmul
 493              	.LVL85:
 494 01f4 FFF7FEFF 		bl	__aeabi_d2f
 495              	.LVL86:
 496 01f8 0446     		mov	r4, r0
 497              	.LVL87:
 498 01fa 5046     		mov	r0, sl
 499              	.LVL88:
 500 01fc FFF7FEFF 		bl	__aeabi_f2d
 501              	.LVL89:
 502 0200 91A3     		adr	r3, .L48
 503 0202 D3E90023 		ldrd	r2, [r3]
 504 0206 FFF7FEFF 		bl	__aeabi_dmul
 505              	.LVL90:
 506 020a FFF7FEFF 		bl	__aeabi_d2f
 507              	.LVL91:
 508 020e 0646     		mov	r6, r0
 509              	.LVL92:
 510 0210 0298     		ldr	r0, [sp, #8]	@ float
 511              	.LVL93:
 512 0212 FFF7FEFF 		bl	__aeabi_f2d
 513              	.LVL94:
 514 0216 8CA3     		adr	r3, .L48
 515 0218 D3E90023 		ldrd	r2, [r3]
 516 021c FFF7FEFF 		bl	__aeabi_dmul
 517              	.LVL95:
 518 0220 FFF7FEFF 		bl	__aeabi_d2f
 519              	.LVL96:
 520 0224 2946     		mov	r1, r5
 521 0226 0746     		mov	r7, r0
 522              	.LVL97:
 523 0228 2846     		mov	r0, r5
 524              	.LVL98:
 525 022a FFF7FEFF 		bl	__aeabi_fmul
 526              	.LVL99:
 527 022e 4FF07E51 		mov	r1, #1065353216
 528 0232 FFF7FEFF 		bl	__aeabi_fsub
 529              	.LVL100:
 530 0236 3946     		mov	r1, r7
 531 0238 0690     		str	r0, [sp, #24]	@ float
 532              	.LVL101:
 533 023a 2846     		mov	r0, r5
 534              	.LVL102:
 535 023c FFF7FEFF 		bl	__aeabi_fmul
 536              	.LVL103:
 537 0240 3146     		mov	r1, r6
 538 0242 0790     		str	r0, [sp, #28]	@ float
 539              	.LVL104:
 540 0244 2046     		mov	r0, r4
 541              	.LVL105:
 542 0246 FFF7FEFF 		bl	__aeabi_fmul
 543              	.LVL106:
 544 024a 2146     		mov	r1, r4
 545 024c 8046     		mov	r8, r0
 546              	.LVL107:
 547 024e 2046     		mov	r0, r4
 548              	.LVL108:
 549 0250 FFF7FEFF 		bl	__aeabi_fmul
 550              	.LVL109:
 551 0254 0146     		mov	r1, r0
 552 0256 0698     		ldr	r0, [sp, #24]	@ float
 553 0258 FFF7FEFF 		bl	__aeabi_fadd
 554              	.LVL110:
 555              	.LBE48:
 100:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 mag_ltp;
 101:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_VECT3_TRANSP_MUL(mag_ltp, rmat_phi_theta, mag_float);
 556              		.loc 3 101 0
 557 025c 0399     		ldr	r1, [sp, #12]	@ float
 558 025e FFF7FEFF 		bl	__aeabi_fmul
 559              	.LVL111:
 560              	.LBB49:
  99:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 561              		.loc 3 99 0
 562 0262 0799     		ldr	r1, [sp, #28]	@ float
 563              	.LBE49:
 564              		.loc 3 101 0
 565 0264 8146     		mov	r9, r0
 566              	.LVL112:
 567              	.LBB50:
  99:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 568              		.loc 3 99 0
 569 0266 4046     		mov	r0, r8
 570 0268 FFF7FEFF 		bl	__aeabi_fsub
 571              	.LVL113:
 572              	.LBE50:
 573              		.loc 3 101 0
 574 026c 0499     		ldr	r1, [sp, #16]	@ float
 575 026e FFF7FEFF 		bl	__aeabi_fmul
 576              	.LVL114:
 577 0272 0146     		mov	r1, r0
 578 0274 4846     		mov	r0, r9
 579 0276 FFF7FEFF 		bl	__aeabi_fadd
 580              	.LVL115:
 581              	.LBB51:
  99:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 582              		.loc 3 99 0
 583 027a 3946     		mov	r1, r7
 584              	.LBE51:
 585              		.loc 3 101 0
 586 027c 8146     		mov	r9, r0
 587              	.LBB52:
  99:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 588              		.loc 3 99 0
 589 027e 2046     		mov	r0, r4
 590 0280 FFF7FEFF 		bl	__aeabi_fmul
 591              	.LVL116:
 592 0284 3146     		mov	r1, r6
 593 0286 0246     		mov	r2, r0
 594 0288 2846     		mov	r0, r5
 595 028a 0092     		str	r2, [sp, #0]
 596 028c FFF7FEFF 		bl	__aeabi_fmul
 597              	.LVL117:
 598 0290 009B     		ldr	r3, [sp, #0]
 599 0292 0146     		mov	r1, r0
 600 0294 1846     		mov	r0, r3
 601 0296 FFF7FEFF 		bl	__aeabi_fadd
 602              	.LVL118:
 603              	.LBE52:
 604              		.loc 3 101 0
 605 029a 0599     		ldr	r1, [sp, #20]	@ float
 606 029c FFF7FEFF 		bl	__aeabi_fmul
 607              	.LVL119:
 608 02a0 0146     		mov	r1, r0
 609 02a2 4846     		mov	r0, r9
 610 02a4 FFF7FEFF 		bl	__aeabi_fadd
 611              	.LVL120:
 612              	.LBB53:
  99:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 613              		.loc 3 99 0
 614 02a8 0799     		ldr	r1, [sp, #28]	@ float
 615              	.LBE53:
 616              		.loc 3 101 0
 617 02aa 8146     		mov	r9, r0
 618              	.LVL121:
 619              	.LBB54:
  99:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 620              		.loc 3 99 0
 621 02ac 4046     		mov	r0, r8
 622              	.LVL122:
 623 02ae FFF7FEFF 		bl	__aeabi_fadd
 624              	.LVL123:
 625              	.LBE54:
 626              		.loc 3 101 0
 627 02b2 0399     		ldr	r1, [sp, #12]	@ float
 628 02b4 FFF7FEFF 		bl	__aeabi_fmul
 629              	.LVL124:
 630              	.LBB55:
  99:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 631              		.loc 3 99 0
 632 02b8 3146     		mov	r1, r6
 633              	.LBE55:
 634              		.loc 3 101 0
 635 02ba 8046     		mov	r8, r0
 636              	.LVL125:
 637              	.LBB56:
  99:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 638              		.loc 3 99 0
 639 02bc 3046     		mov	r0, r6
 640 02be FFF7FEFF 		bl	__aeabi_fmul
 641              	.LVL126:
 642 02c2 0146     		mov	r1, r0
 643 02c4 0698     		ldr	r0, [sp, #24]	@ float
 644 02c6 FFF7FEFF 		bl	__aeabi_fadd
 645              	.LVL127:
 646              	.LBE56:
 647              		.loc 3 101 0
 648 02ca 0499     		ldr	r1, [sp, #16]	@ float
 649 02cc FFF7FEFF 		bl	__aeabi_fmul
 650              	.LVL128:
 651 02d0 0146     		mov	r1, r0
 652 02d2 4046     		mov	r0, r8
 653 02d4 FFF7FEFF 		bl	__aeabi_fadd
 654              	.LVL129:
 655              	.LBB57:
  99:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 656              		.loc 3 99 0
 657 02d8 3946     		mov	r1, r7
 658              	.LBE57:
 659              		.loc 3 101 0
 660 02da 8046     		mov	r8, r0
 661              	.LBB58:
  99:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 662              		.loc 3 99 0
 663 02dc 3046     		mov	r0, r6
 664 02de FFF7FEFF 		bl	__aeabi_fmul
 665              	.LVL130:
 666 02e2 2146     		mov	r1, r4
 667 02e4 0646     		mov	r6, r0
 668              	.LVL131:
 669 02e6 2846     		mov	r0, r5
 670 02e8 FFF7FEFF 		bl	__aeabi_fmul
 671              	.LVL132:
 672 02ec 0146     		mov	r1, r0
 673 02ee 3046     		mov	r0, r6
 674 02f0 FFF7FEFF 		bl	__aeabi_fsub
 675              	.LVL133:
 676              	.LBE58:
 677              		.loc 3 101 0
 678 02f4 0599     		ldr	r1, [sp, #20]	@ float
 679 02f6 FFF7FEFF 		bl	__aeabi_fmul
 680              	.LVL134:
 681 02fa 0146     		mov	r1, r0
 682 02fc 4046     		mov	r0, r8
 683 02fe FFF7FEFF 		bl	__aeabi_fadd
 684              	.LVL135:
 685 0302 8046     		mov	r8, r0
 686              	.LVL136:
 102:./subsystems/ahrs/ahrs_float_utils.h **** 
 103:./subsystems/ahrs/ahrs_float_utils.h ****   /* heading from mag -> make quaternion to rotate around ltp z axis*/
 104:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatQuat q_m;
 105:./subsystems/ahrs/ahrs_float_utils.h **** 
 106:./subsystems/ahrs/ahrs_float_utils.h ****   /* dot([mag_n.x, mag_n.x, 0], [AHRS_H_X, AHRS_H_Y, 0]) */
 107:./subsystems/ahrs/ahrs_float_utils.h ****   float dot = mag_ltp.x * AHRS_H_X + mag_ltp.y * AHRS_H_Y;
 687              		.loc 3 107 0
 688 0304 4846     		mov	r0, r9
 689              	.LVL137:
 690 0306 FFF7FEFF 		bl	__aeabi_f2d
 691              	.LVL138:
 692 030a 0646     		mov	r6, r0
 693 030c 4046     		mov	r0, r8
 694 030e 0F46     		mov	r7, r1
 695              	.LVL139:
 696 0310 FFF7FEFF 		bl	__aeabi_f2d
 697              	.LVL140:
 698 0314 0446     		mov	r4, r0
 699              	.LVL141:
 700 0316 0D46     		mov	r5, r1
 701              	.LVL142:
 108:./subsystems/ahrs/ahrs_float_utils.h **** 
 109:./subsystems/ahrs/ahrs_float_utils.h ****   /* |v1||v2| */
 110:./subsystems/ahrs/ahrs_float_utils.h ****   float norm2 = sqrtf(SQUARE(mag_ltp.x) + SQUARE(mag_ltp.y))
 702              		.loc 3 110 0
 703 0318 4846     		mov	r0, r9
 704 031a 4946     		mov	r1, r9
 705 031c FFF7FEFF 		bl	__aeabi_fmul
 706              	.LVL143:
 707 0320 4146     		mov	r1, r8
 708 0322 8146     		mov	r9, r0
 709              	.LVL144:
 710 0324 4046     		mov	r0, r8
 711 0326 FFF7FEFF 		bl	__aeabi_fmul
 712              	.LVL145:
 713 032a 0146     		mov	r1, r0
 714 032c 4846     		mov	r0, r9
 715 032e FFF7FEFF 		bl	__aeabi_fadd
 716              	.LVL146:
 717 0332 FFF7FEFF 		bl	sqrtf
 718              	.LVL147:
 719 0336 4B49     		ldr	r1, .L48+28
 720 0338 FFF7FEFF 		bl	__aeabi_fmul
 721              	.LVL148:
 107:./subsystems/ahrs/ahrs_float_utils.h ****   float dot = mag_ltp.x * AHRS_H_X + mag_ltp.y * AHRS_H_Y;
 722              		.loc 3 107 0
 723 033c 44A3     		adr	r3, .L48+8
 724 033e D3E90023 		ldrd	r2, [r3]
 725              		.loc 3 110 0
 726 0342 8446     		mov	ip, r0
 107:./subsystems/ahrs/ahrs_float_utils.h ****   float dot = mag_ltp.x * AHRS_H_X + mag_ltp.y * AHRS_H_Y;
 727              		.loc 3 107 0
 728 0344 3946     		mov	r1, r7
 729 0346 3046     		mov	r0, r6
 730 0348 CDF800C0 		str	ip, [sp, #0]
 731 034c FFF7FEFF 		bl	__aeabi_dmul
 732              	.LVL149:
 733 0350 41A3     		adr	r3, .L48+16
 734 0352 D3E90023 		ldrd	r2, [r3]
 735 0356 8046     		mov	r8, r0
 736              	.LVL150:
 737 0358 8946     		mov	r9, r1
 738 035a 2046     		mov	r0, r4
 739 035c 2946     		mov	r1, r5
 740 035e FFF7FEFF 		bl	__aeabi_dmul
 741              	.LVL151:
 742 0362 0246     		mov	r2, r0
 743 0364 0B46     		mov	r3, r1
 744 0366 4046     		mov	r0, r8
 745 0368 4946     		mov	r1, r9
 746 036a FFF7FEFF 		bl	__aeabi_dadd
 747              	.LVL152:
 748 036e FFF7FEFF 		bl	__aeabi_d2f
 749              	.LVL153:
 111:./subsystems/ahrs/ahrs_float_utils.h ****     * sqrtf(SQUARE(AHRS_H_X) + SQUARE(AHRS_H_Y));
 112:./subsystems/ahrs/ahrs_float_utils.h **** 
 113:./subsystems/ahrs/ahrs_float_utils.h ****   // catch 180deg case
 114:./subsystems/ahrs/ahrs_float_utils.h ****   if (ABS(norm2 + dot) < 5*FLT_MIN) {
 750              		.loc 3 114 0
 751 0372 DDF800C0 		ldr	ip, [sp, #0]
 107:./subsystems/ahrs/ahrs_float_utils.h ****   float dot = mag_ltp.x * AHRS_H_X + mag_ltp.y * AHRS_H_Y;
 752              		.loc 3 107 0
 753 0376 0146     		mov	r1, r0
 754              		.loc 3 114 0
 755 0378 6046     		mov	r0, ip
 756 037a FFF7FEFF 		bl	__aeabi_fadd
 757              	.LVL154:
 758 037e 0021     		movs	r1, #0
 759 0380 8046     		mov	r8, r0
 760 0382 FFF7FEFF 		bl	__aeabi_fcmplt
 761              	.LVL155:
 762 0386 4FF00109 		mov	r9, #1
 763 038a 20B1     		cbz	r0, .L40
 764 038c 4046     		mov	r0, r8
 765 038e 3649     		ldr	r1, .L48+32
 766 0390 FFF7FEFF 		bl	__aeabi_fcmpgt
 767              	.LVL156:
 768 0394 04E0     		b	.L45
 769              	.L40:
 770 0396 4046     		mov	r0, r8
 771 0398 4FF0D071 		mov	r1, #27262976
 772 039c FFF7FEFF 		bl	__aeabi_fcmplt
 773              	.LVL157:
 774              	.L45:
 775 03a0 08B9     		cbnz	r0, .L21
 776 03a2 4FF00009 		mov	r9, #0
 777              	.L21:
 778 03a6 5FFA89F1 		uxtb	r1, r9
 779 03aa 0029     		cmp	r1, #0
 780 03ac 43D1     		bne	.L30
 781              	.LVL158:
 115:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(q_m, 0.0, 0.0, 0.0, 1.0);
 116:./subsystems/ahrs/ahrs_float_utils.h ****   } else {
 117:./subsystems/ahrs/ahrs_float_utils.h ****     /* q_xyz = cross([mag_n.x, mag_n.y, 0], [AHRS_H_X, AHRS_H_Y, 0]) */
 118:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qx = 0.0;
 119:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qy = 0.0;
 120:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qz = mag_ltp.x * AHRS_H_Y - mag_ltp.y * AHRS_H_X;
 782              		.loc 3 120 0
 783 03ae 3046     		mov	r0, r6
 784 03b0 3946     		mov	r1, r7
 785 03b2 29A3     		adr	r3, .L48+16
 786 03b4 D3E90023 		ldrd	r2, [r3]
 787 03b8 FFF7FEFF 		bl	__aeabi_dmul
 788              	.LVL159:
 789 03bc 24A3     		adr	r3, .L48+8
 790 03be D3E90023 		ldrd	r2, [r3]
 791 03c2 0F46     		mov	r7, r1
 792 03c4 0646     		mov	r6, r0
 793              	.LVL160:
 794 03c6 2946     		mov	r1, r5
 795 03c8 2046     		mov	r0, r4
 796 03ca FFF7FEFF 		bl	__aeabi_dmul
 797              	.LVL161:
 798 03ce 0246     		mov	r2, r0
 799 03d0 0B46     		mov	r3, r1
 800 03d2 3046     		mov	r0, r6
 801 03d4 3946     		mov	r1, r7
 802 03d6 FFF7FEFF 		bl	__aeabi_dsub
 803              	.LVL162:
 804 03da FFF7FEFF 		bl	__aeabi_d2f
 805              	.LVL163:
 806              	.LBB59:
 121:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qi = norm2 + dot;
 122:./subsystems/ahrs/ahrs_float_utils.h ****     FLOAT_QUAT_NORMALIZE(q_m);
 807              		.loc 3 122 0
 808 03de 4146     		mov	r1, r8
 809              	.LBE59:
 120:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qz = mag_ltp.x * AHRS_H_Y - mag_ltp.y * AHRS_H_X;
 810              		.loc 3 120 0
 811 03e0 0446     		mov	r4, r0
 812              	.LVL164:
 813              	.LBB60:
 814              		.loc 3 122 0
 815 03e2 4046     		mov	r0, r8
 816              	.LVL165:
 817 03e4 FFF7FEFF 		bl	__aeabi_fmul
 818              	.LVL166:
 819 03e8 0021     		movs	r1, #0
 820 03ea FFF7FEFF 		bl	__aeabi_fadd
 821              	.LVL167:
 822 03ee 0021     		movs	r1, #0
 823 03f0 FFF7FEFF 		bl	__aeabi_fadd
 824              	.LVL168:
 825 03f4 2146     		mov	r1, r4
 826 03f6 0546     		mov	r5, r0
 827 03f8 2046     		mov	r0, r4
 828 03fa FFF7FEFF 		bl	__aeabi_fmul
 829              	.LVL169:
 830 03fe 0146     		mov	r1, r0
 831 0400 2846     		mov	r0, r5
 832 0402 FFF7FEFF 		bl	__aeabi_fadd
 833              	.LVL170:
 834 0406 FFF7FEFF 		bl	sqrtf
 835              	.LVL171:
 836 040a 4FF40001 		mov	r1, #8388608
 837 040e 0746     		mov	r7, r0
 838              	.LVL172:
 839 0410 FFF7FEFF 		bl	__aeabi_fcmpgt
 840              	.LVL173:
 841 0414 50B3     		cbz	r0, .L41
 842 0416 4046     		mov	r0, r8
 843 0418 3946     		mov	r1, r7
 844 041a FFF7FEFF 		bl	__aeabi_fdiv
 845              	.LVL174:
 846 041e 3946     		mov	r1, r7
 847 0420 8046     		mov	r8, r0
 848              	.LVL175:
 849 0422 0020     		movs	r0, #0
 850              	.LVL176:
 851 0424 FFF7FEFF 		bl	__aeabi_fdiv
 852              	.LVL177:
 853 0428 3946     		mov	r1, r7
 854 042a 0646     		mov	r6, r0
 855              	.LVL178:
 856 042c 2046     		mov	r0, r4
 857              	.LVL179:
 858 042e FFF7FEFF 		bl	__aeabi_fdiv
 859              	.LVL180:
 860 0432 0446     		mov	r4, r0
 861              	.LVL181:
 862 0434 1BE0     		b	.L22
 863              	.LVL182:
 864              	.L30:
 865              	.LBE60:
 115:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(q_m, 0.0, 0.0, 0.0, 1.0);
 866              		.loc 3 115 0
 867 0436 4FF00008 		mov	r8, #0
 868 043a 4FF07E54 		mov	r4, #1065353216
 869              	.LVL183:
 870 043e 4646     		mov	r6, r8
 871 0440 15E0     		b	.L22
 872              	.L49:
 873 0442 00BFAFF3 		.align	3
 873      0080
 874              	.L48:
 875 0448 CD3B7F66 		.word	1719614413
 876 044c 9EA0F63F 		.word	1073127582
 877 0450 15D6D704 		.word	81253909
 878 0454 62E3EA3F 		.word	1072358242
 879 0458 668F06A6 		.word	2785447782
 880 045c 892DA3BF 		.word	-1079825015
 881 0460 00000000 		.word	ahrs_aligner
 882 0464 C051573F 		.word	1062687168
 883 0468 0000A081 		.word	-2120220672
 884              	.LVL184:
 885              	.L41:
 886              	.LBB61:
 118:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qx = 0.0;
 887              		.loc 3 118 0
 888 046c 0026     		movs	r6, #0
 889              	.LVL185:
 890              	.L22:
 891              	.LBE61:
 123:./subsystems/ahrs/ahrs_float_utils.h ****   }
 124:./subsystems/ahrs/ahrs_float_utils.h **** 
 125:./subsystems/ahrs/ahrs_float_utils.h ****   // q_ltp2imu = q_a * q_m
 126:./subsystems/ahrs/ahrs_float_utils.h ****   // and wrap and normalize
 127:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_QUAT_COMP_NORM_SHORTEST(*q, q_m, q_a);
 892              		.loc 3 127 0
 893 046e 3046     		mov	r0, r6
 894 0470 5946     		mov	r1, fp
 895 0472 FFF7FEFF 		bl	__aeabi_fmul
 896              	.LVL186:
 897 0476 5146     		mov	r1, sl
 898 0478 0746     		mov	r7, r0
 899 047a 3046     		mov	r0, r6
 900 047c FFF7FEFF 		bl	__aeabi_fmul
 901              	.LVL187:
 902 0480 0199     		ldr	r1, [sp, #4]	@ float
 903 0482 0390     		str	r0, [sp, #12]	@ float
 904 0484 4046     		mov	r0, r8
 905 0486 FFF7FEFF 		bl	__aeabi_fmul
 906              	.LVL188:
 907 048a 3946     		mov	r1, r7
 908 048c FFF7FEFF 		bl	__aeabi_fsub
 909              	.LVL189:
 910 0490 0399     		ldr	r1, [sp, #12]	@ float
 911 0492 FFF7FEFF 		bl	__aeabi_fsub
 912              	.LVL190:
 913 0496 0299     		ldr	r1, [sp, #8]	@ float
 914 0498 0546     		mov	r5, r0
 915 049a 2046     		mov	r0, r4
 916 049c FFF7FEFF 		bl	__aeabi_fmul
 917              	.LVL191:
 918 04a0 0146     		mov	r1, r0
 919 04a2 2846     		mov	r0, r5
 920 04a4 FFF7FEFF 		bl	__aeabi_fsub
 921              	.LVL192:
 922 04a8 0199     		ldr	r1, [sp, #4]	@ float
 923 04aa 8146     		mov	r9, r0
 924              	.LVL193:
 925 04ac 3046     		mov	r0, r6
 926              	.LVL194:
 927 04ae FFF7FEFF 		bl	__aeabi_fmul
 928              	.LVL195:
 929 04b2 0299     		ldr	r1, [sp, #8]	@ float
 930 04b4 0546     		mov	r5, r0
 931 04b6 3046     		mov	r0, r6
 932 04b8 FFF7FEFF 		bl	__aeabi_fmul
 933              	.LVL196:
 934 04bc 5946     		mov	r1, fp
 935 04be 0490     		str	r0, [sp, #16]	@ float
 936 04c0 4046     		mov	r0, r8
 937 04c2 FFF7FEFF 		bl	__aeabi_fmul
 938              	.LVL197:
 939 04c6 2946     		mov	r1, r5
 940 04c8 FFF7FEFF 		bl	__aeabi_fadd
 941              	.LVL198:
 942 04cc 0499     		ldr	r1, [sp, #16]	@ float
 943 04ce FFF7FEFF 		bl	__aeabi_fadd
 944              	.LVL199:
 945 04d2 5146     		mov	r1, sl
 946 04d4 0646     		mov	r6, r0
 947              	.LVL200:
 948 04d6 2046     		mov	r0, r4
 949 04d8 FFF7FEFF 		bl	__aeabi_fmul
 950              	.LVL201:
 951 04dc 0146     		mov	r1, r0
 952 04de 3046     		mov	r0, r6
 953 04e0 FFF7FEFF 		bl	__aeabi_fsub
 954              	.LVL202:
 955 04e4 5146     		mov	r1, sl
 956 04e6 0646     		mov	r6, r0
 957              	.LVL203:
 958 04e8 4046     		mov	r0, r8
 959              	.LVL204:
 960 04ea FFF7FEFF 		bl	__aeabi_fmul
 961              	.LVL205:
 962 04ee 0499     		ldr	r1, [sp, #16]	@ float
 963 04f0 FFF7FEFF 		bl	__aeabi_fsub
 964              	.LVL206:
 965 04f4 2946     		mov	r1, r5
 966 04f6 FFF7FEFF 		bl	__aeabi_fadd
 967              	.LVL207:
 968 04fa 5946     		mov	r1, fp
 969 04fc 0546     		mov	r5, r0
 970 04fe 2046     		mov	r0, r4
 971 0500 FFF7FEFF 		bl	__aeabi_fmul
 972              	.LVL208:
 973 0504 0146     		mov	r1, r0
 974 0506 2846     		mov	r0, r5
 975 0508 FFF7FEFF 		bl	__aeabi_fadd
 976              	.LVL209:
 977 050c 0299     		ldr	r1, [sp, #8]	@ float
 978 050e 0546     		mov	r5, r0
 979              	.LVL210:
 980 0510 4046     		mov	r0, r8
 981              	.LVL211:
 982 0512 FFF7FEFF 		bl	__aeabi_fmul
 983              	.LVL212:
 984 0516 0399     		ldr	r1, [sp, #12]	@ float
 985 0518 FFF7FEFF 		bl	__aeabi_fadd
 986              	.LVL213:
 987 051c 3946     		mov	r1, r7
 988 051e FFF7FEFF 		bl	__aeabi_fsub
 989              	.LVL214:
 990 0522 0199     		ldr	r1, [sp, #4]	@ float
 991 0524 0746     		mov	r7, r0
 992 0526 2046     		mov	r0, r4
 993 0528 FFF7FEFF 		bl	__aeabi_fmul
 994              	.LVL215:
 995 052c 0146     		mov	r1, r0
 996 052e 3846     		mov	r0, r7
 997 0530 FFF7FEFF 		bl	__aeabi_fadd
 998              	.LVL216:
 999 0534 0021     		movs	r1, #0
 1000 0536 0746     		mov	r7, r0
 1001              	.LVL217:
 1002 0538 4846     		mov	r0, r9
 1003              	.LVL218:
 1004 053a FFF7FEFF 		bl	__aeabi_fcmplt
 1005              	.LVL219:
 1006 053e 40B1     		cbz	r0, .L24
 1007 0540 09F10040 		add	r0, r9, #-2147483648
 1008 0544 8146     		mov	r9, r0
 1009              	.LVL220:
 1010 0546 06F10046 		add	r6, r6, #-2147483648
 1011              	.LVL221:
 1012 054a 05F10045 		add	r5, r5, #-2147483648
 1013              	.LVL222:
 1014 054e 07F10047 		add	r7, r7, #-2147483648
 1015              	.LVL223:
 1016              	.L24:
 1017              	.LBB62:
 1018 0552 4946     		mov	r1, r9
 1019 0554 4846     		mov	r0, r9
 1020 0556 FFF7FEFF 		bl	__aeabi_fmul
 1021              	.LVL224:
 1022 055a 3146     		mov	r1, r6
 1023 055c 0446     		mov	r4, r0
 1024              	.LVL225:
 1025 055e 3046     		mov	r0, r6
 1026 0560 FFF7FEFF 		bl	__aeabi_fmul
 1027              	.LVL226:
 1028 0564 0146     		mov	r1, r0
 1029 0566 2046     		mov	r0, r4
 1030 0568 FFF7FEFF 		bl	__aeabi_fadd
 1031              	.LVL227:
 1032 056c 2946     		mov	r1, r5
 1033 056e 0446     		mov	r4, r0
 1034 0570 2846     		mov	r0, r5
 1035 0572 FFF7FEFF 		bl	__aeabi_fmul
 1036              	.LVL228:
 1037 0576 0146     		mov	r1, r0
 1038 0578 2046     		mov	r0, r4
 1039 057a FFF7FEFF 		bl	__aeabi_fadd
 1040              	.LVL229:
 1041 057e 3946     		mov	r1, r7
 1042 0580 0446     		mov	r4, r0
 1043 0582 3846     		mov	r0, r7
 1044 0584 FFF7FEFF 		bl	__aeabi_fmul
 1045              	.LVL230:
 1046 0588 0146     		mov	r1, r0
 1047 058a 2046     		mov	r0, r4
 1048 058c FFF7FEFF 		bl	__aeabi_fadd
 1049              	.LVL231:
 1050 0590 FFF7FEFF 		bl	sqrtf
 1051              	.LVL232:
 1052 0594 4FF40001 		mov	r1, #8388608
 1053 0598 0446     		mov	r4, r0
 1054              	.LVL233:
 1055 059a FFF7FEFF 		bl	__aeabi_fcmpgt
 1056              	.LVL234:
 1057 059e 98B1     		cbz	r0, .L26
 1058 05a0 4846     		mov	r0, r9
 1059 05a2 2146     		mov	r1, r4
 1060 05a4 FFF7FEFF 		bl	__aeabi_fdiv
 1061              	.LVL235:
 1062 05a8 2146     		mov	r1, r4
 1063 05aa 8146     		mov	r9, r0
 1064              	.LVL236:
 1065 05ac 3046     		mov	r0, r6
 1066              	.LVL237:
 1067 05ae FFF7FEFF 		bl	__aeabi_fdiv
 1068              	.LVL238:
 1069 05b2 2146     		mov	r1, r4
 1070 05b4 0646     		mov	r6, r0
 1071              	.LVL239:
 1072 05b6 2846     		mov	r0, r5
 1073              	.LVL240:
 1074 05b8 FFF7FEFF 		bl	__aeabi_fdiv
 1075              	.LVL241:
 1076 05bc 2146     		mov	r1, r4
 1077 05be 0546     		mov	r5, r0
 1078              	.LVL242:
 1079 05c0 3846     		mov	r0, r7
 1080              	.LVL243:
 1081 05c2 FFF7FEFF 		bl	__aeabi_fdiv
 1082              	.LVL244:
 1083 05c6 0746     		mov	r7, r0
 1084              	.LVL245:
 1085              	.L26:
 1086              	.LBE62:
 1087              	.LBE63:
 1088              	.LBE64:
 1089              		.file 4 "./subsystems/ahrs/ahrs_int_utils.h"
   1:./subsystems/ahrs/ahrs_int_utils.h **** /*
   2:./subsystems/ahrs/ahrs_int_utils.h ****  * Copyright (C) 2009 Felix Ruess <felix.ruess@gmail.com>
   3:./subsystems/ahrs/ahrs_int_utils.h ****  * Copyright (C) 2009 Antoine Drouin <poinix@gmail.com>
   4:./subsystems/ahrs/ahrs_int_utils.h ****  *
   5:./subsystems/ahrs/ahrs_int_utils.h ****  * This file is part of paparazzi.
   6:./subsystems/ahrs/ahrs_int_utils.h ****  *
   7:./subsystems/ahrs/ahrs_int_utils.h ****  * paparazzi is free software; you can redistribute it and/or modify
   8:./subsystems/ahrs/ahrs_int_utils.h ****  * it under the terms of the GNU General Public License as published by
   9:./subsystems/ahrs/ahrs_int_utils.h ****  * the Free Software Foundation; either version 2, or (at your option)
  10:./subsystems/ahrs/ahrs_int_utils.h ****  * any later version.
  11:./subsystems/ahrs/ahrs_int_utils.h ****  *
  12:./subsystems/ahrs/ahrs_int_utils.h ****  * paparazzi is distributed in the hope that it will be useful,
  13:./subsystems/ahrs/ahrs_int_utils.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:./subsystems/ahrs/ahrs_int_utils.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:./subsystems/ahrs/ahrs_int_utils.h ****  * GNU General Public License for more details.
  16:./subsystems/ahrs/ahrs_int_utils.h ****  *
  17:./subsystems/ahrs/ahrs_int_utils.h ****  * You should have received a copy of the GNU General Public License
  18:./subsystems/ahrs/ahrs_int_utils.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  19:./subsystems/ahrs/ahrs_int_utils.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  20:./subsystems/ahrs/ahrs_int_utils.h ****  * Boston, MA 02111-1307, USA.
  21:./subsystems/ahrs/ahrs_int_utils.h ****  */
  22:./subsystems/ahrs/ahrs_int_utils.h **** 
  23:./subsystems/ahrs/ahrs_int_utils.h **** /**
  24:./subsystems/ahrs/ahrs_int_utils.h ****  * @file subsystems/ahrs/ahrs_int_utils.h
  25:./subsystems/ahrs/ahrs_int_utils.h ****  *
  26:./subsystems/ahrs/ahrs_int_utils.h ****  * Utility functions for fixed point AHRS implementations.
  27:./subsystems/ahrs/ahrs_int_utils.h ****  *
  28:./subsystems/ahrs/ahrs_int_utils.h ****  */
  29:./subsystems/ahrs/ahrs_int_utils.h **** 
  30:./subsystems/ahrs/ahrs_int_utils.h **** #ifndef AHRS_INT_UTILS_H
  31:./subsystems/ahrs/ahrs_int_utils.h **** #define AHRS_INT_UTILS_H
  32:./subsystems/ahrs/ahrs_int_utils.h **** 
  33:./subsystems/ahrs/ahrs_int_utils.h **** //#include "../../test/pprz_algebra_print.h"
  34:./subsystems/ahrs/ahrs_int_utils.h **** #include "math/pprz_algebra_int.h"
  35:./subsystems/ahrs/ahrs_int_utils.h **** 
  36:./subsystems/ahrs/ahrs_int_utils.h **** #include "subsystems/ahrs/ahrs_magnetic_field_model.h"
  37:./subsystems/ahrs/ahrs_int_utils.h **** 
  38:./subsystems/ahrs/ahrs_int_utils.h **** #include "subsystems/ahrs/ahrs_float_utils.h"
  39:./subsystems/ahrs/ahrs_int_utils.h **** 
  40:./subsystems/ahrs/ahrs_int_utils.h **** static inline void ahrs_int_get_euler_from_accel_mag(struct Int32Eulers* e, struct Int32Vect3* acce
  41:./subsystems/ahrs/ahrs_int_utils.h ****   //  DISPLAY_INT32_VECT3("# accel", (*accel));
  42:./subsystems/ahrs/ahrs_int_utils.h ****   const float fphi = atan2f(-accel->y, -accel->z);
  43:./subsystems/ahrs/ahrs_int_utils.h ****   //  printf("# atan float %f\n", DegOfRad(fphi));
  44:./subsystems/ahrs/ahrs_int_utils.h ****   e->phi = ANGLE_BFP_OF_REAL(fphi);
  45:./subsystems/ahrs/ahrs_int_utils.h **** 
  46:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t cphi;
  47:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_COS(cphi, e->phi);
  48:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t cphi_ax = -INT_MULT_RSHIFT(cphi, accel->x, INT32_TRIG_FRAC);
  49:./subsystems/ahrs/ahrs_int_utils.h ****   const float ftheta = atan2f(-cphi_ax, -accel->z);
  50:./subsystems/ahrs/ahrs_int_utils.h ****   e->theta = ANGLE_BFP_OF_REAL(ftheta);
  51:./subsystems/ahrs/ahrs_int_utils.h **** 
  52:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t sphi;
  53:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_SIN(sphi, e->phi);
  54:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t stheta;
  55:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_SIN(stheta, e->theta);
  56:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t ctheta;
  57:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_COS(ctheta, e->theta);
  58:./subsystems/ahrs/ahrs_int_utils.h **** 
  59:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t sphi_stheta = (sphi*stheta)>>INT32_TRIG_FRAC;
  60:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t cphi_stheta = (cphi*stheta)>>INT32_TRIG_FRAC;
  61:./subsystems/ahrs/ahrs_int_utils.h ****   //int32_t sphi_ctheta = (sphi*ctheta)>>INT32_TRIG_FRAC;
  62:./subsystems/ahrs/ahrs_int_utils.h ****   //int32_t cphi_ctheta = (cphi*ctheta)>>INT32_TRIG_FRAC;
  63:./subsystems/ahrs/ahrs_int_utils.h **** 
  64:./subsystems/ahrs/ahrs_int_utils.h ****   const int32_t mn = ctheta * mag->x + sphi_stheta * mag->y + cphi_stheta * mag->z;
  65:./subsystems/ahrs/ahrs_int_utils.h ****   const int32_t me = 0      * mag->x + cphi        * mag->y - sphi        * mag->z;
  66:./subsystems/ahrs/ahrs_int_utils.h ****   //const int32_t md =
  67:./subsystems/ahrs/ahrs_int_utils.h ****   //  -stheta     * imu.mag.x +
  68:./subsystems/ahrs/ahrs_int_utils.h ****   //  sphi_ctheta * imu.mag.y +
  69:./subsystems/ahrs/ahrs_int_utils.h ****   //  cphi_ctheta * imu.mag.z;
  70:./subsystems/ahrs/ahrs_int_utils.h ****   //  float m_psi = -atan2(me, mn);
  71:./subsystems/ahrs/ahrs_int_utils.h ****   const float mag_dec = atan2(-AHRS_H_Y, AHRS_H_X);
  72:./subsystems/ahrs/ahrs_int_utils.h ****   const float fpsi = atan2f(-me, mn) - mag_dec;
  73:./subsystems/ahrs/ahrs_int_utils.h ****   e->psi = ANGLE_BFP_OF_REAL(fpsi);
  74:./subsystems/ahrs/ahrs_int_utils.h ****   INT32_ANGLE_NORMALIZE(e->psi);
  75:./subsystems/ahrs/ahrs_int_utils.h **** 
  76:./subsystems/ahrs/ahrs_int_utils.h **** }
  77:./subsystems/ahrs/ahrs_int_utils.h **** 
  78:./subsystems/ahrs/ahrs_int_utils.h **** static inline void ahrs_int_get_quat_from_accel(struct Int32Quat* q, struct Int32Vect3* accel) {
  79:./subsystems/ahrs/ahrs_int_utils.h ****   struct FloatQuat q_f;
  80:./subsystems/ahrs/ahrs_int_utils.h ****   ahrs_float_get_quat_from_accel(&q_f, accel);
  81:./subsystems/ahrs/ahrs_int_utils.h ****   QUAT_BFP_OF_REAL(*q, q_f);
  82:./subsystems/ahrs/ahrs_int_utils.h **** }
  83:./subsystems/ahrs/ahrs_int_utils.h **** 
  84:./subsystems/ahrs/ahrs_int_utils.h **** static inline void ahrs_int_get_quat_from_accel_mag(struct Int32Quat* q, struct Int32Vect3* accel, 
  85:./subsystems/ahrs/ahrs_int_utils.h **** 
  86:./subsystems/ahrs/ahrs_int_utils.h ****   struct FloatQuat q_f;
  87:./subsystems/ahrs/ahrs_int_utils.h ****   ahrs_float_get_quat_from_accel_mag(&q_f, accel, mag);
  88:./subsystems/ahrs/ahrs_int_utils.h ****   QUAT_BFP_OF_REAL(*q, q_f);
 1090              		.loc 4 88 0
 1091 05c8 4FF08E41 		mov	r1, #1191182336
 1092 05cc 4846     		mov	r0, r9
 1093 05ce FFF7FEFF 		bl	__aeabi_fmul
 1094              	.LVL246:
 1095 05d2 FFF7FEFF 		bl	__aeabi_f2iz
 1096              	.LVL247:
 1097 05d6 594C     		ldr	r4, .L50
 1098              	.LVL248:
 1099 05d8 8246     		mov	sl, r0
 1100              	.LVL249:
 1101 05da 4FF08E41 		mov	r1, #1191182336
 1102 05de 2065     		str	r0, [r4, #80]
 1103 05e0 3046     		mov	r0, r6
 1104 05e2 FFF7FEFF 		bl	__aeabi_fmul
 1105              	.LVL250:
 1106 05e6 FFF7FEFF 		bl	__aeabi_f2iz
 1107              	.LVL251:
 1108 05ea 4FF08E41 		mov	r1, #1191182336
 1109 05ee 0646     		mov	r6, r0
 1110              	.LVL252:
 1111 05f0 6065     		str	r0, [r4, #84]
 1112 05f2 2846     		mov	r0, r5
 1113 05f4 FFF7FEFF 		bl	__aeabi_fmul
 1114              	.LVL253:
 1115 05f8 FFF7FEFF 		bl	__aeabi_f2iz
 1116              	.LVL254:
 1117 05fc 4FF08E41 		mov	r1, #1191182336
 1118 0600 0546     		mov	r5, r0
 1119              	.LVL255:
 1120 0602 A065     		str	r0, [r4, #88]
 1121 0604 3846     		mov	r0, r7
 1122 0606 FFF7FEFF 		bl	__aeabi_fmul
 1123              	.LVL256:
 1124 060a FFF7FEFF 		bl	__aeabi_f2iz
 1125              	.LVL257:
 1126              	.LBE65:
 1127              	.LBE67:
 1128              	.LBB68:
 1129              	.LBB69:
 111:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 112:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if USE_MAGNETOMETER
 113:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute an initial orientation from accel and mag directly as quaternion */
 114:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_int_get_quat_from_accel_mag(&ahrs_impl.ltp_to_imu_quat, &ahrs_aligner.lp_accel, &ahrs_aligne
 115:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = TRUE;
 116:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
 117:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute an initial orientation from accel and just set heading to zero */
 118:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_int_get_quat_from_accel(&ahrs_impl.ltp_to_imu_quat, &ahrs_aligner.lp_accel);
 119:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = FALSE;
 120:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 121:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 122:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   set_body_state_from_quat();
 123:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 124:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Use low passed gyro value as initial bias */
 125:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 126:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 127:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 128:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 129:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_RUNNING;
 130:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 131:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 132:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 133:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 134:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /*
 135:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
 136:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
 137:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
 138:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  */
 139:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_propagate(void) {
 140:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 141:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* unbias gyro             */
 142:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Rates omega;
 143:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_DIFF(omega, imu.gyro_prev, ahrs_impl.gyro_bias);
 144:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 145:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* low pass rate */
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifdef AHRS_PROPAGATE_LOW_PASS_RATES
 147:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_SMUL(ahrs_impl.imu_rate, ahrs_impl.imu_rate,2);
 148:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(ahrs_impl.imu_rate, omega);
 149:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_SDIV(ahrs_impl.imu_rate, ahrs_impl.imu_rate, 3);
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
 151:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs_impl.imu_rate, omega);
 152:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 153:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 154:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* add correction     */
 155:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 156:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* and zeros it */
 157:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
 158:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 159:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* integrate quaternion */
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs_impl.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 162:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 163:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   set_body_state_from_quat();
 164:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 165:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 166:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 167:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 168:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 169:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 170:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_accel(void) {
 171:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 172:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // c2 = ltp z-axis in imu-frame
 173:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32RMat ltp_to_imu_rmat;
 174:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 175:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 c2 = { RMAT_ELMT(ltp_to_imu_rmat, 0,2),
 176:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                            RMAT_ELMT(ltp_to_imu_rmat, 1,2),
 177:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                            RMAT_ELMT(ltp_to_imu_rmat, 2,2)};
 178:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual;
 179:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 180:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 pseudo_gravity_measurement;
 181:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 183:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /*
 184:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * centrifugal acceleration in body frame
 185:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * a_c_body = omega x (omega x r)
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * (omega x r) = tangential velocity in body frame
 187:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * a_c_body = omega x vel_tangential_body
 188:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * assumption: tangential velocity only along body x-axis
 189:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      */
 190:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 191:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // FIXME: check overflows !
 192:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #define COMPUTATION_FRAC 16
 193:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 194:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const struct Int32Vect3 vel_tangential_body = {ahrs_impl.ltp_vel_norm >> COMPUTATION_FRAC, 0, 0
 195:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     struct Int32Vect3 acc_c_body;
 196:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, (*stateGetBodyRates_i()), vel_tangential_body);
 197:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_RSHIFT(acc_c_body, acc_c_body, INT32_SPEED_FRAC+INT32_RATE_FRAC-INT32_ACCEL_FRAC-CO
 198:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 199:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* convert centrifucal acceleration from body to imu frame */
 200:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     struct Int32Vect3 acc_c_imu;
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 202:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 203:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* and subtract it from imu measurement to get a corrected measurement of the gravitiy vector *
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(pseudo_gravity_measurement, imu.accel, acc_c_imu);
 205:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   } else {
 206:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_COPY(pseudo_gravity_measurement, imu.accel);
 207:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 208:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 209:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute the residual of the pseudo gravity vector in imu frame */
 210:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_VECT3_CROSS_PRODUCT(residual, pseudo_gravity_measurement, c2);
 211:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 212:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 213:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   int32_t inv_weight;
 214:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.use_gravity_heuristic) {
 215:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* heuristic on acceleration norm */
 216:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 217:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* FIR filtered pseudo_gravity_measurement */
 218:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     static struct Int32Vect3 filtered_gravity_measurement = {0, 0, 0};
 219:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_SMUL(filtered_gravity_measurement, filtered_gravity_measurement, 7);
 220:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_ADD(filtered_gravity_measurement, pseudo_gravity_measurement);
 221:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_SDIV(filtered_gravity_measurement, filtered_gravity_measurement, 8);
 222:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 223:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     int32_t acc_norm;
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, filtered_gravity_measurement);
 225:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 226:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(50*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 50);
 227:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 228:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   else {
 229:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = 1;
 230:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 231:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 232:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual FRAC : ACCEL_FRAC + TRIG_FRAC = 10 + 14 = 24
 233:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // rate_correction FRAC = RATE_FRAC = 12
 234:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^12 / 2^24 * 5e-2 = 1/81920
 235:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += -residual.x/82000/inv_weight;
 236:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += -residual.y/82000/inv_weight;
 237:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 238:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 239:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual FRAC = ACCEL_FRAC + TRIG_FRAC = 10 + 14 = 24
 240:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // high_rez_bias = RATE_FRAC+28 = 40
 241:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^40 / 2^24 * 5e-6 = 1/3.05
 242:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 243:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.p += residual.x*3;
 244:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.q += residual.y*3;
 245:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.r += residual.z*3;
 246:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 247:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/(2*inv_weight);
 248:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/(2*inv_weight);
 249:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/(2*inv_weight);
 250:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 251:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 252:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /*                        */
 253:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 254:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 255:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 256:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 257:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_mag(void) {
 258:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_MAG_UPDATE_ALL_AXES
 259:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_update_mag_full();
 260:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
 261:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_update_mag_2d();
 262:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 263:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 264:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 265:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 266:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_full(void) {
 267:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 268:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32RMat ltp_to_imu_rmat;
 269:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 270:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 271:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 expected_imu;
 272:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(expected_imu, ltp_to_imu_rmat, ahrs_impl.mag_h);
 273:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 274:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual;
 275:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_VECT3_CROSS_PRODUCT(residual, imu.mag, expected_imu);
 276:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 277:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual.x/32/16;
 278:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual.y/32/16;
 279:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual.z/32/16;
 280:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 281:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 282:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual.x/32*1024;
 283:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual.y/32*1024;
 284:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual.z/32*1024;
 285:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 286:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 287:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 288:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 289:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 290:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 291:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 292:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_2d(void) {
 293:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 294:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32RMat ltp_to_imu_rmat;
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 296:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 297:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 measured_ltp;
 298:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ltp_to_imu_rmat, imu.mag);
 299:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 300:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_ltp =
 301:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { 0,
 302:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       0,
 303:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * ahrs_impl.mag_h.y - measured_ltp.y * ahrs_impl.mag_h.x)/(1<<5)};
 304:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 305:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_imu;
 306:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 307:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 308:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual_ltp FRAC = 2 * MAG_FRAC = 22
 309:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // rate_correction FRAC = RATE_FRAC = 12
 310:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^12 / 2^22 * 2.5 = 1/410
 311:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 312:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.rate_correction.p += residual_imu.x*(1<<5)/410;
 313:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.rate_correction.q += residual_imu.y*(1<<5)/410;
 314:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.rate_correction.r += residual_imu.z*(1<<5)/410;
 315:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 316:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 317:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 318:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 319:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 320:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 321:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual_ltp FRAC = 2 * MAG_FRAC = 22
 322:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // high_rez_bias = RATE_FRAC+28 = 40
 323:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^40 / 2^22 * 2.5e-3 = 655
 324:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 325:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<5)*655;
 326:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<5)*655;
 327:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<5)*655;
 328:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 329:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 330:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 331:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 332:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 333:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 334:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 335:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 336:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 337:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 338:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_gps(void) {
 339:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_GRAVITY_UPDATE_COORDINATED_TURN && USE_GPS
 340:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (gps.fix == GPS_FIX_3D) {
 341:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm = SPEED_BFP_OF_REAL(gps.speed_3d / 100.);
 342:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm_valid = TRUE;
 343:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   } else {
 344:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm_valid = FALSE;
 345:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 346:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 347:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 348:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_USE_GPS_HEADING && USE_GPS
 349:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //got a 3d fix,ground speed > 0.5 m/s and course accuracy is better than 10deg
 350:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if(gps.fix == GPS_FIX_3D &&
 351:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      gps.gspeed >= 500 &&
 352:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      gps.cacc <= RadOfDeg(10*1e7)) {
 353:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 354:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // gps.course is in rad * 1e7, we need it in rad * 2^INT32_ANGLE_FRAC
 355:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     int32_t course = gps.course * ((1<<INT32_ANGLE_FRAC) / 1e7);
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 357:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* the assumption here is that there is no side-slip, so heading=course */
 358:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 359:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     if (ahrs_impl.heading_aligned) {
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       ahrs_update_heading(course);
 361:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     }
 362:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     else {
 363:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       /* hard reset the heading if this is the first measurement */
 364:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       ahrs_realign_heading(course);
 365:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     }
 366:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 367:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 368:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 369:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 370:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 371:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_heading(int32_t heading) {
 372:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 373:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 374:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 375:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // row 0 of ltp_to_body_rmat = body x-axis in ltp frame
 376:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // we only consider x and y
 377:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32RMat* ltp_to_body_rmat = stateGetNedToBodyRMat_i();
 378:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect2 expected_ltp =
 379:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { RMAT_ELMT((*ltp_to_body_rmat), 0, 0),
 380:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       RMAT_ELMT((*ltp_to_body_rmat), 0, 1) };
 381:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 382:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   int32_t heading_x, heading_y;
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 384:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 385:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 386:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // expected_heading cross measured_heading ??
 387:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_ltp =
 388:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { 0,
 389:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       0,
 390:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (expected_ltp.x * heading_y - expected_ltp.y * heading_x)/(1<<INT32_ANGLE_FRAC)};
 391:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 392:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_imu;
 393:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32RMat ltp_to_imu_rmat;
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 395:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 396:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 397:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual FRAC = TRIG_FRAC + TRIG_FRAC = 14 + 14 = 28
 398:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // rate_correction FRAC = RATE_FRAC = 12
 399:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^12 / 2^28 * 4.0 = 1/2^14
 400:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // (1<<INT32_ANGLE_FRAC)/2^14 = 1/4
 401:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 402:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/4;
 403:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/4;
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 406:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* crude attempt to only update bias if deviation is small
 407:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * e.g. needed when you only have gps providing heading
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * and the inital heading is totally different from
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * the gps course information you get once you have a gps fix.
 410:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * Otherwise the bias will be falsely "corrected".
 411:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    */
 412:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   int32_t sin_max_angle_deviation;
 413:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(sin_max_angle_deviation, TRIG_BFP_OF_REAL(RadOfDeg(5.)));
 414:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ABS(residual_ltp.z) < sin_max_angle_deviation)
 415:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   {
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // residual_ltp FRAC = 2 * TRIG_FRAC = 28
 417:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // high_rez_bias = RATE_FRAC+28 = 40
 418:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // 2^40 / 2^28 * 2.5e-4 = 1
 419:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<INT32_ANGLE_FRAC);
 421:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 422:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 423:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 425:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 426:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 427:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_realign_heading(int32_t heading) {
 428:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 429:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat ltp_to_body_quat = *stateGetNedToBodyQuat_i();
 430:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 431:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* quaternion representing only the heading rotation from ltp to body */
 432:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q_h_new;
 433:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h_new.qx = 0;
 434:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h_new.qy = 0;
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 437:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 438:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* quaternion representing current heading only */
 439:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q_h;
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(q_h, ltp_to_body_quat);
 441:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h.qx = 0;
 442:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h.qy = 0;
 443:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 445:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* quaternion representing rotation from current to new heading */
 446:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q_c;
 447:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 448:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 449:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* correct current heading in body frame */
 450:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q;
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 452:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ltp_to_body_quat, q);
 453:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 454:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute ltp to imu rotations */
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs_impl.ltp_to_imu_quat, ltp_to_body_quat, imu.body_to_imu_quat);
 456:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 457:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Set state */
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   stateSetNedToBodyQuat_i(&ltp_to_body_quat);
 459:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 460:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = TRUE;
 461:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 463:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 464:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /* Rotate angles and rates from imu to body frame and set state */
 465:subsystems/ahrs/ahrs_int_cmpl_quat.c **** __attribute__ ((always_inline)) static inline void set_body_state_from_quat(void) {
 466:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to BODY quaternion */
 467:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat ltp_to_body_quat;
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1130              		.loc 2 468 0
 1131 060e 4C4B     		ldr	r3, .L50+4
 1132              	.LBE69:
 1133              	.LBE68:
 1134              	.LBB97:
 1135              	.LBB66:
 1136              		.loc 4 88 0
 1137 0610 0146     		mov	r1, r0
 1138 0612 E065     		str	r0, [r4, #92]
 1139              	.LBE66:
 1140              	.LBE97:
 1141              	.LBB98:
 1142              	.LBB92:
 1143              		.loc 2 468 0
 1144 0614 D3F88800 		ldr	r0, [r3, #136]
 1145 0618 D3F884B0 		ldr	fp, [r3, #132]
 1146              	.LVL258:
 1147 061c 7043     		muls	r0, r6, r0
 1148 061e CAF1000C 		rsb	ip, sl, #0
 1149              	.LVL259:
 1150 0622 0BFB0A0A 		mla	sl, fp, sl, r0
 1151 0626 D3F88C80 		ldr	r8, [r3, #140]
 1152              	.LVL260:
 1153 062a D3F89090 		ldr	r9, [r3, #144]
 1154              	.LVL261:
 1155 062e 08FB05A0 		mla	r0, r8, r5, sl
 1156 0632 09FB010A 		mla	sl, r9, r1, r0
 1157              	.LBB70:
 1158              	.LBB71:
 1159              	.LBB72:
 1160              		.file 5 "./math/pprz_orientation_conversion.h"
   1:./math/pprz_orientation_conversion.h **** /*
   2:./math/pprz_orientation_conversion.h ****  * Copyright (C) 2011-2012 The Paparazzi Team
   3:./math/pprz_orientation_conversion.h ****  *
   4:./math/pprz_orientation_conversion.h ****  * This file is part of paparazzi.
   5:./math/pprz_orientation_conversion.h ****  *
   6:./math/pprz_orientation_conversion.h ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./math/pprz_orientation_conversion.h ****  * it under the terms of the GNU General Public License as published by
   8:./math/pprz_orientation_conversion.h ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./math/pprz_orientation_conversion.h ****  * any later version.
  10:./math/pprz_orientation_conversion.h ****  *
  11:./math/pprz_orientation_conversion.h ****  * paparazzi is distributed in the hope that it will be useful,
  12:./math/pprz_orientation_conversion.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./math/pprz_orientation_conversion.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./math/pprz_orientation_conversion.h ****  * GNU General Public License for more details.
  15:./math/pprz_orientation_conversion.h ****  *
  16:./math/pprz_orientation_conversion.h ****  * You should have received a copy of the GNU General Public License
  17:./math/pprz_orientation_conversion.h ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./math/pprz_orientation_conversion.h ****  * <http://www.gnu.org/licenses/>.
  19:./math/pprz_orientation_conversion.h ****  *
  20:./math/pprz_orientation_conversion.h ****  */
  21:./math/pprz_orientation_conversion.h **** 
  22:./math/pprz_orientation_conversion.h **** /**
  23:./math/pprz_orientation_conversion.h ****  * @file math/pprz_orientation_conversion.h
  24:./math/pprz_orientation_conversion.h ****  * Generic orientation representation and conversions.
  25:./math/pprz_orientation_conversion.h ****  *
  26:./math/pprz_orientation_conversion.h ****  * This file contains the functions to automatically convert between
  27:./math/pprz_orientation_conversion.h ****  * the different representations. They should normally not be used
  28:./math/pprz_orientation_conversion.h ****  * directly and instead the stateGet/Set interfaces used.
  29:./math/pprz_orientation_conversion.h ****  * Also see the @ref math_orientation_representation "Generic Orientation Representation" page.
  30:./math/pprz_orientation_conversion.h ****  *
  31:./math/pprz_orientation_conversion.h ****  * @author Felix Ruess <felix.ruess@gmail.com>
  32:./math/pprz_orientation_conversion.h ****  */
  33:./math/pprz_orientation_conversion.h **** 
  34:./math/pprz_orientation_conversion.h **** /**
  35:./math/pprz_orientation_conversion.h ****  * @addtogroup math
  36:./math/pprz_orientation_conversion.h ****  * @{
  37:./math/pprz_orientation_conversion.h ****  */
  38:./math/pprz_orientation_conversion.h **** 
  39:./math/pprz_orientation_conversion.h **** /**
  40:./math/pprz_orientation_conversion.h ****  * This generic orientation representation consists of a struct, containing the 6 orientation
  41:./math/pprz_orientation_conversion.h ****  * representations, and a status variable. The bits in the status variable indicate  which
  42:./math/pprz_orientation_conversion.h ****  * representations of the orientation are up-to-date.
  43:./math/pprz_orientation_conversion.h ****  *
  44:./math/pprz_orientation_conversion.h ****  * When a getter is used to get a certain representation, the status bit is checked to see if
  45:./math/pprz_orientation_conversion.h ****  * the current value is already available in the desired orientation representation.
  46:./math/pprz_orientation_conversion.h ****  * If the desired representation is not available, it will be calculated.
  47:./math/pprz_orientation_conversion.h ****  *
  48:./math/pprz_orientation_conversion.h ****  * When a setter is used to set a representation, all status bits are cleared, and only the
  49:./math/pprz_orientation_conversion.h ****  * status bit for the set representation is set to one.
  50:./math/pprz_orientation_conversion.h ****  */
  51:./math/pprz_orientation_conversion.h **** 
  52:./math/pprz_orientation_conversion.h **** /**
  53:./math/pprz_orientation_conversion.h ****  * @defgroup math_orientation_representation Generic Orientation Representations
  54:./math/pprz_orientation_conversion.h ****  * @{
  55:./math/pprz_orientation_conversion.h ****  */
  56:./math/pprz_orientation_conversion.h **** 
  57:./math/pprz_orientation_conversion.h **** #ifndef PPRZ_ORIENTATION_CONVERSION_H
  58:./math/pprz_orientation_conversion.h **** #define PPRZ_ORIENTATION_CONVERSION_H
  59:./math/pprz_orientation_conversion.h **** 
  60:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_int.h"
  61:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_float.h"
  62:./math/pprz_orientation_conversion.h **** 
  63:./math/pprz_orientation_conversion.h **** #include "std.h"
  64:./math/pprz_orientation_conversion.h **** 
  65:./math/pprz_orientation_conversion.h **** 
  66:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_I  0  ///< Quaternion (BFP int)
  67:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_I 1  ///< zyx Euler (BFP int)
  68:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_I  2  ///< Rotation Matrix (BFP int)
  69:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_F  3  ///< Quaternion (float)
  70:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_F 4  ///< zyx Euler (float)
  71:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_F  5  ///< Rotation Matrix (float)
  72:./math/pprz_orientation_conversion.h **** 
  73:./math/pprz_orientation_conversion.h **** /*
  74:./math/pprz_orientation_conversion.h ****  * @brief Struct with euler/rmat/quaternion orientation representations in BFP int and float
  75:./math/pprz_orientation_conversion.h ****  */
  76:./math/pprz_orientation_conversion.h **** struct OrientationReps {
  77:./math/pprz_orientation_conversion.h ****   /**
  78:./math/pprz_orientation_conversion.h ****    * Holds the status bits for all orientation representations.
  79:./math/pprz_orientation_conversion.h ****    * When the corresponding bit is set, the representation
  80:./math/pprz_orientation_conversion.h ****    * is already computed.
  81:./math/pprz_orientation_conversion.h ****    */
  82:./math/pprz_orientation_conversion.h ****   uint8_t status;
  83:./math/pprz_orientation_conversion.h **** 
  84:./math/pprz_orientation_conversion.h ****   /**
  85:./math/pprz_orientation_conversion.h ****    * Orientation quaternion.
  86:./math/pprz_orientation_conversion.h ****    * Units: #INT32_QUAT_FRAC
  87:./math/pprz_orientation_conversion.h ****    */
  88:./math/pprz_orientation_conversion.h ****   struct Int32Quat quat_i;
  89:./math/pprz_orientation_conversion.h **** 
  90:./math/pprz_orientation_conversion.h ****   /**
  91:./math/pprz_orientation_conversion.h ****    * Orientation in zyx euler angles.
  92:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_ANGLE_FRAC
  93:./math/pprz_orientation_conversion.h ****    */
  94:./math/pprz_orientation_conversion.h ****   struct Int32Eulers eulers_i;
  95:./math/pprz_orientation_conversion.h **** 
  96:./math/pprz_orientation_conversion.h ****   /**
  97:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
  98:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_TRIG_FRAC
  99:./math/pprz_orientation_conversion.h ****    */
 100:./math/pprz_orientation_conversion.h ****   struct Int32RMat rmat_i;
 101:./math/pprz_orientation_conversion.h **** 
 102:./math/pprz_orientation_conversion.h ****   /**
 103:./math/pprz_orientation_conversion.h ****    * Orientation as quaternion.
 104:./math/pprz_orientation_conversion.h ****    * Units: unit length quaternion
 105:./math/pprz_orientation_conversion.h ****    */
 106:./math/pprz_orientation_conversion.h ****   struct FloatQuat quat_f;
 107:./math/pprz_orientation_conversion.h **** 
 108:./math/pprz_orientation_conversion.h ****   /**
 109:./math/pprz_orientation_conversion.h ****    * Orienation in zyx euler angles.
 110:./math/pprz_orientation_conversion.h ****    * Units: rad
 111:./math/pprz_orientation_conversion.h ****    */
 112:./math/pprz_orientation_conversion.h ****   struct FloatEulers eulers_f;
 113:./math/pprz_orientation_conversion.h **** 
 114:./math/pprz_orientation_conversion.h ****   /**
 115:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
 116:./math/pprz_orientation_conversion.h ****    * Units: rad
 117:./math/pprz_orientation_conversion.h ****    */
 118:./math/pprz_orientation_conversion.h ****   struct FloatRMat   rmat_f;
 119:./math/pprz_orientation_conversion.h **** };
 120:./math/pprz_orientation_conversion.h **** 
 121:./math/pprz_orientation_conversion.h **** /************* declaration of transformation functions ************/
 122:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_i(struct OrientationReps* orientation);
 123:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_i(struct OrientationReps* orientation);
 124:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_i(struct OrientationReps* orientation);
 125:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_f(struct OrientationReps* orientation);
 126:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_f(struct OrientationReps* orientation);
 127:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_f(struct OrientationReps* orientation);
 128:./math/pprz_orientation_conversion.h **** 
 129:./math/pprz_orientation_conversion.h **** 
 130:./math/pprz_orientation_conversion.h **** /*********************** validity test functions ******************/
 131:./math/pprz_orientation_conversion.h **** /// Test if orientations are valid.
 132:./math/pprz_orientation_conversion.h **** static inline bool_t orienationCheckValid(struct OrientationReps* orientation) {
 133:./math/pprz_orientation_conversion.h ****   return (orientation->status);
 134:./math/pprz_orientation_conversion.h **** }
 135:./math/pprz_orientation_conversion.h **** 
 136:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (int).
 137:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_i(struct OrientationReps* orientation, struct Int32Quat* quat
 138:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 1161              		.loc 5 138 0
 1162 0636 434A     		ldr	r2, .L50+8
 1163              	.LBE72:
 1164              	.LBE71:
 1165              	.LBE70:
 1166              		.loc 2 468 0
 1167 0638 4FEAEA3A 		asr	sl, sl, #15
 1168              	.LBB83:
 1169              	.LBB78:
 1170              	.LBB73:
 1171              		.loc 5 138 0
 1172 063c C2F8A8A1 		str	sl, [r2, #424]
 1173              	.LBE73:
 1174              	.LBE78:
 1175              	.LBE83:
 1176              		.loc 2 468 0
 1177 0640 0BFB06FA 		mul	sl, fp, r6
 1178 0644 D3F88800 		ldr	r0, [r3, #136]
 1179              	.LBE92:
 1180              	.LBE98:
 115:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = TRUE;
 1181              		.loc 2 115 0
 1182 0648 0127     		movs	r7, #1
 1183              	.LVL262:
 1184              	.LBB99:
 1185              	.LBB93:
 1186              		.loc 2 468 0
 1187 064a 00FB0CAA 		mla	sl, r0, ip, sl
 1188 064e 09FB15AA 		mls	sl, r9, r5, sl
 1189 0652 08FB01AA 		mla	sl, r8, r1, sl
 1190 0656 4FEAEA3A 		asr	sl, sl, #15
 1191              	.LBB84:
 1192              	.LBB79:
 1193              	.LBB74:
 1194              		.loc 5 138 0
 1195 065a C2F8ACA1 		str	sl, [r2, #428]
 1196              	.LBE74:
 1197              	.LBE79:
 1198              	.LBE84:
 1199              		.loc 2 468 0
 1200 065e 09FB06FA 		mul	sl, r9, r6
 1201 0662 09FB0CF9 		mul	r9, r9, ip
 1202 0666 08FB0CAA 		mla	sl, r8, ip, sl
 1203 066a 08FB1696 		mls	r6, r8, r6, r9
 1204 066e 0BFB05AA 		mla	sl, fp, r5, sl
 1205 0672 00FB0565 		mla	r5, r0, r5, r6
 1206 0676 00FB11AA 		mls	sl, r0, r1, sl
 1207 067a 0BFB0151 		mla	r1, fp, r1, r5
 469:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Set state */
 470:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifdef AHRS_UPDATE_FW_ESTIMATOR
 471:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Eulers neutrals_to_body_eulers = {
 472:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ANGLE_BFP_OF_REAL(ins_roll_neutral),
 473:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ANGLE_BFP_OF_REAL(ins_pitch_neutral),
 474:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     0 };
 475:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat neutrals_to_body_quat, ltp_to_neutrals_quat;
 476:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_OF_EULERS(neutrals_to_body_quat, neutrals_to_body_eulers);
 477:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(neutrals_to_body_quat);
 478:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_neutrals_quat, ltp_to_body_quat, neutrals_to_body_quat);
 479:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   stateSetNedToBodyQuat_i(&ltp_to_neutrals_quat);
 480:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
 481:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   stateSetNedToBodyQuat_i(&ltp_to_body_quat);
 482:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 483:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 484:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute body rates */
 485:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Rates body_rate;
 486:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_RATEMULT(body_rate, imu.body_to_imu_rmat, ahrs_impl.imu_rate);
 1208              		.loc 2 486 0
 1209 067e 2669     		ldr	r6, [r4, #16]
 1210 0680 D3F8A450 		ldr	r5, [r3, #164]
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1211              		.loc 2 468 0
 1212 0684 C813     		asrs	r0, r1, #15
 1213              		.loc 2 486 0
 1214 0686 05FB06F8 		mul	r8, r5, r6
 1215              	.LBB85:
 1216              	.LBB80:
 1217              	.LBB75:
 1218              		.loc 5 138 0
 1219 068a C2F8B401 		str	r0, [r2, #436]
 1220              	.LBE75:
 1221              	.LBE80:
 1222              	.LBE85:
 1223              		.loc 2 486 0
 1224 068e D3F89850 		ldr	r5, [r3, #152]
 1225 0692 E068     		ldr	r0, [r4, #12]
 1226 0694 6169     		ldr	r1, [r4, #20]
 1227 0696 05FB008C 		mla	ip, r5, r0, r8
 1228 069a D3F8B050 		ldr	r5, [r3, #176]
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1229              		.loc 2 468 0
 1230 069e 4FEAEA3A 		asr	sl, sl, #15
 1231              		.loc 2 486 0
 1232 06a2 05FB01C5 		mla	r5, r5, r1, ip
 1233 06a6 4FEAA538 		asr	r8, r5, #14
 1234 06aa D3F8A850 		ldr	r5, [r3, #168]
 1235              	.LBB86:
 1236              	.LBB81:
 1237              	.LBB76:
 1238              		.loc 5 138 0
 1239 06ae C2F8B0A1 		str	sl, [r2, #432]
 1240              	.LBE76:
 1241              	.LBE81:
 1242              	.LBE86:
 1243              		.loc 2 486 0
 1244 06b2 05FB06F9 		mul	r9, r5, r6
 1245 06b6 D3F89C50 		ldr	r5, [r3, #156]
 1246              	.LBB87:
 1247              	.LBB82:
 1248              	.LBB77:
 139:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 140:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_I);
 1249              		.loc 5 140 0
 1250 06ba 82F8A471 		strb	r7, [r2, #420]
 1251              	.LBE77:
 1252              	.LBE82:
 1253              	.LBE87:
 1254              		.loc 2 486 0
 1255 06be 05FB009C 		mla	ip, r5, r0, r9
 1256 06c2 D3F8B450 		ldr	r5, [r3, #180]
 1257              	.LBE93:
 1258              	.LBE99:
 115:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = TRUE;
 1259              		.loc 2 115 0
 1260 06c6 84F87370 		strb	r7, [r4, #115]
 1261              	.LBB100:
 1262              	.LBB94:
 1263              		.loc 2 486 0
 1264 06ca 05FB01C5 		mla	r5, r5, r1, ip
 1265 06ce 4FEAA539 		asr	r9, r5, #14
 1266              	.LVL263:
 1267 06d2 D3F8A050 		ldr	r5, [r3, #160]
 1268 06d6 6E43     		muls	r6, r5, r6
 1269 06d8 D3F89450 		ldr	r5, [r3, #148]
 1270 06dc 05FB0060 		mla	r0, r5, r0, r6
 1271 06e0 D3F8AC50 		ldr	r5, [r3, #172]
 1272 06e4 05FB0103 		mla	r3, r5, r1, r0
 1273              	.LBE94:
 1274              	.LBE100:
 125:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1275              		.loc 2 125 0
 1276 06e8 1748     		ldr	r0, .L50+12
 1277              	.LBB101:
 1278              	.LBB95:
 1279              		.loc 2 486 0
 1280 06ea 9913     		asrs	r1, r3, #14
 1281              	.LBB88:
 1282              	.LBB89:
1056:./state.h     ****   RATES_COPY(state.body_rates_i, *body_rate);
 1283              		.loc 1 1056 0
 1284 06ec C2F82C12 		str	r1, [r2, #556]
 1285 06f0 C2F83082 		str	r8, [r2, #560]
 1286              	.LBE89:
 1287              	.LBE88:
 1288              	.LBE95:
 1289              	.LBE101:
 125:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1290              		.loc 2 125 0
 1291 06f4 0168     		ldr	r1, [r0, #0]
 1292 06f6 8368     		ldr	r3, [r0, #8]
 1293              	.LBB102:
 1294              	.LBB96:
 1295              	.LBB91:
 1296              	.LBB90:
1056:./state.h     ****   RATES_COPY(state.body_rates_i, *body_rate);
 1297              		.loc 1 1056 0
 1298 06f8 C2F83492 		str	r9, [r2, #564]
1058:./state.h     ****   state.rate_status = (1 << RATE_I);
 1299              		.loc 1 1058 0
 1300 06fc 82F82872 		strb	r7, [r2, #552]
 1301              	.LBE90:
 1302              	.LBE91:
 1303              	.LBE96:
 1304              	.LBE102:
 125:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1305              		.loc 2 125 0
 1306 0700 4268     		ldr	r2, [r0, #4]
 126:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 1307              		.loc 2 126 0
 1308 0702 C817     		asrs	r0, r1, #31
 127:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1309              		.loc 2 127 0
 1310 0704 0007     		lsls	r0, r0, #28
 1311 0706 40EA1110 		orr	r0, r0, r1, lsr #4
 125:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1312              		.loc 2 125 0
 1313 070a 2160     		str	r1, [r4, #0]
 127:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1314              		.loc 2 127 0
 1315 070c 0907     		lsls	r1, r1, #28
 1316 070e A163     		str	r1, [r4, #56]
 126:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 1317              		.loc 2 126 0
 1318 0710 D117     		asrs	r1, r2, #31
 127:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1319              		.loc 2 127 0
 1320 0712 E063     		str	r0, [r4, #60]
 1321 0714 0807     		lsls	r0, r1, #28
 1322 0716 40EA1211 		orr	r1, r0, r2, lsr #4
 125:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1323              		.loc 2 125 0
 1324 071a 6260     		str	r2, [r4, #4]
 127:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1325              		.loc 2 127 0
 1326 071c 6164     		str	r1, [r4, #68]
 1327 071e 1207     		lsls	r2, r2, #28
 126:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 1328              		.loc 2 126 0
 1329 0720 D917     		asrs	r1, r3, #31
 127:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1330              		.loc 2 127 0
 1331 0722 2264     		str	r2, [r4, #64]
 1332 0724 0A07     		lsls	r2, r1, #28
 129:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_RUNNING;
 1333              		.loc 2 129 0
 1334 0726 0949     		ldr	r1, .L50+16
 127:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1335              		.loc 2 127 0
 1336 0728 42EA1310 		orr	r0, r2, r3, lsr #4
 125:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1337              		.loc 2 125 0
 1338 072c A360     		str	r3, [r4, #8]
 127:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1339              		.loc 2 127 0
 1340 072e 1B07     		lsls	r3, r3, #28
 1341 0730 E064     		str	r0, [r4, #76]
 1342 0732 A364     		str	r3, [r4, #72]
 129:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_RUNNING;
 1343              		.loc 2 129 0
 1344 0734 0F70     		strb	r7, [r1, #0]
 130:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 1345              		.loc 2 130 0
 1346 0736 09B0     		add	sp, sp, #36
 1347 0738 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1348              	.L51:
 1349              		.align	2
 1350              	.L50:
 1351 073c 00000000 		.word	.LANCHOR0
 1352 0740 00000000 		.word	imu
 1353 0744 00000000 		.word	state
 1354 0748 00000000 		.word	ahrs_aligner
 1355 074c 00000000 		.word	ahrs
 1356              		.cfi_endproc
 1357              	.LFE128:
 1359              		.section	.text.ahrs_propagate,"ax",%progbits
 1360              		.align	1
 1361              		.global	ahrs_propagate
 1362              		.thumb
 1363              		.thumb_func
 1365              	ahrs_propagate:
 1366              	.LFB129:
 139:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_propagate(void) {
 1367              		.loc 2 139 0
 1368              		.cfi_startproc
 1369              		@ args = 0, pretend = 0, frame = 8
 1370              		@ frame_needed = 0, uses_anonymous_args = 0
 1371 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1372              	.LCFI3:
 1373              		.cfi_def_cfa_offset 48
 1374              		.cfi_offset 0, -48
 1375              		.cfi_offset 1, -44
 1376              		.cfi_offset 2, -40
 1377              		.cfi_offset 4, -36
 1378              		.cfi_offset 5, -32
 1379              		.cfi_offset 6, -28
 1380              		.cfi_offset 7, -24
 1381              		.cfi_offset 8, -20
 1382              		.cfi_offset 9, -16
 1383              		.cfi_offset 10, -12
 1384              		.cfi_offset 11, -8
 1385              		.cfi_offset 14, -4
 143:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_DIFF(omega, imu.gyro_prev, ahrs_impl.gyro_bias);
 1386              		.loc 2 143 0
 1387 0004 874C     		ldr	r4, .L59
 1388 0006 8849     		ldr	r1, .L59+4
 1389 0008 2368     		ldr	r3, [r4, #0]
 1390 000a 4A6A     		ldr	r2, [r1, #36]
 1391 000c 886A     		ldr	r0, [r1, #40]
 1392 000e D51A     		subs	r5, r2, r3
 1393              	.LVL264:
 155:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1394              		.loc 2 155 0
 1395 0010 A369     		ldr	r3, [r4, #24]
 143:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_DIFF(omega, imu.gyro_prev, ahrs_impl.gyro_bias);
 1396              		.loc 2 143 0
 1397 0012 6668     		ldr	r6, [r4, #4]
 155:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1398              		.loc 2 155 0
 1399 0014 EB18     		adds	r3, r5, r3
 151:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs_impl.imu_rate, omega);
 1400              		.loc 2 151 0
 1401 0016 E560     		str	r5, [r4, #12]
 155:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1402              		.loc 2 155 0
 1403 0018 E569     		ldr	r5, [r4, #28]
 1404              	.LVL265:
 143:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_DIFF(omega, imu.gyro_prev, ahrs_impl.gyro_bias);
 1405              		.loc 2 143 0
 1406 001a 871B     		subs	r7, r0, r6
 1407              	.LVL266:
 1408 001c A268     		ldr	r2, [r4, #8]
 1409 001e C96A     		ldr	r1, [r1, #44]
 155:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1410              		.loc 2 155 0
 1411 0020 7819     		adds	r0, r7, r5
 151:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs_impl.imu_rate, omega);
 1412              		.loc 2 151 0
 1413 0022 2761     		str	r7, [r4, #16]
 155:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1414              		.loc 2 155 0
 1415 0024 276A     		ldr	r7, [r4, #32]
 1416              	.LVL267:
 143:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_DIFF(omega, imu.gyro_prev, ahrs_impl.gyro_bias);
 1417              		.loc 2 143 0
 1418 0026 8E1A     		subs	r6, r1, r2
 1419              	.LVL268:
 155:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1420              		.loc 2 155 0
 1421 0028 F219     		adds	r2, r6, r7
 1422              	.LVL269:
 151:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs_impl.imu_rate, omega);
 1423              		.loc 2 151 0
 1424 002a 6661     		str	r6, [r4, #20]
 1425              	.LBB115:
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs_impl.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE
 1426              		.loc 2 160 0
 1427 002c 5D42     		negs	r5, r3
 1428 002e 04F15406 		add	r6, r4, #84
 1429 0032 96E88041 		ldmia	r6, {r7, r8, lr}
 1430 0036 7D43     		muls	r5, r7, r5
 1431              	.LBE115:
 157:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
 1432              		.loc 2 157 0
 1433 0038 0021     		movs	r1, #0
 1434 003a A161     		str	r1, [r4, #24]
 1435 003c E161     		str	r1, [r4, #28]
 1436 003e 2162     		str	r1, [r4, #32]
 1437              	.LBB116:
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs_impl.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE
 1438              		.loc 2 160 0
 1439 0040 08FB1051 		mls	r1, r8, r0, r5
 1440 0044 0EFB1215 		mls	r5, lr, r2, r1
 1441 0048 666A     		ldr	r6, [r4, #36]
 1442 004a 08FB02FC 		mul	ip, r8, r2
 1443 004e A919     		adds	r1, r5, r6
 1444 0050 266D     		ldr	r6, [r4, #80]
 1445 0052 6162     		str	r1, [r4, #36]
 1446 0054 06FB03C5 		mla	r5, r6, r3, ip
 1447 0058 06FB00FB 		mul	fp, r6, r0
 1448 005c 0EFB1059 		mls	r9, lr, r0, r5
 1449 0060 7843     		muls	r0, r7, r0
 1450              	.LVL270:
 1451 0062 07FB12BC 		mls	ip, r7, r2, fp
 1452 0066 06FB0200 		mla	r0, r6, r2, r0
 1453 006a 0EFB03CE 		mla	lr, lr, r3, ip
 1454 006e 08FB1303 		mls	r3, r8, r3, r0
 1455              	.LVL271:
 1456 0072 A56A     		ldr	r5, [r4, #40]
 1457 0074 276B     		ldr	r7, [r4, #48]
 1458 0076 05EB090A 		add	sl, r5, r9
 1459 007a E56A     		ldr	r5, [r4, #44]
 1460 007c FA18     		adds	r2, r7, r3
 1461              	.LVL272:
 1462 007e 05EB0E09 		add	r9, r5, lr
 1463 0082 2263     		str	r2, [r4, #48]
 1464 0084 6846     		mov	r0, sp
 1465 0086 4FF48002 		mov	r2, #4194304
 1466 008a C4F828A0 		str	sl, [r4, #40]
 1467 008e C4F82C90 		str	r9, [r4, #44]
 1468 0092 FFF7FEFF 		bl	ldiv
 1469              	.LVL273:
 1470 0096 216D     		ldr	r1, [r4, #80]
 1471 0098 009E     		ldr	r6, [sp, #0]
 1472 009a 0198     		ldr	r0, [sp, #4]
 1473 009c 8D19     		adds	r5, r1, r6
 1474 009e 6062     		str	r0, [r4, #36]
 1475 00a0 A16A     		ldr	r1, [r4, #40]
 1476 00a2 6846     		mov	r0, sp
 1477              	.LVL274:
 1478 00a4 4FF48002 		mov	r2, #4194304
 1479 00a8 2565     		str	r5, [r4, #80]
 1480 00aa FFF7FEFF 		bl	ldiv
 1481              	.LVL275:
 1482 00ae 676D     		ldr	r7, [r4, #84]
 1483 00b0 009B     		ldr	r3, [sp, #0]
 1484 00b2 0199     		ldr	r1, [sp, #4]
 1485 00b4 FA18     		adds	r2, r7, r3
 1486 00b6 6265     		str	r2, [r4, #84]
 1487 00b8 A162     		str	r1, [r4, #40]
 1488 00ba 6846     		mov	r0, sp
 1489              	.LVL276:
 1490 00bc E16A     		ldr	r1, [r4, #44]
 1491 00be 4FF48002 		mov	r2, #4194304
 1492 00c2 FFF7FEFF 		bl	ldiv
 1493              	.LVL277:
 1494 00c6 A66D     		ldr	r6, [r4, #88]
 1495 00c8 009D     		ldr	r5, [sp, #0]
 1496 00ca 019F     		ldr	r7, [sp, #4]
 1497 00cc 7019     		adds	r0, r6, r5
 1498 00ce A065     		str	r0, [r4, #88]
 1499 00d0 216B     		ldr	r1, [r4, #48]
 1500 00d2 6846     		mov	r0, sp
 1501              	.LVL278:
 1502 00d4 4FF48002 		mov	r2, #4194304
 1503 00d8 E762     		str	r7, [r4, #44]
 1504 00da FFF7FEFF 		bl	ldiv
 1505              	.LVL279:
 1506              	.LBE116:
 1507              	.LBB117:
 1508              	.LBB118:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1509              		.loc 2 161 0
 1510 00de 656D     		ldr	r5, [r4, #84]
 1511              	.LBE118:
 1512              	.LBE117:
 1513              	.LBB125:
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs_impl.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE
 1514              		.loc 2 160 0
 1515 00e0 0199     		ldr	r1, [sp, #4]
 1516              	.LBE125:
 1517              	.LBB126:
 1518              	.LBB120:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1519              		.loc 2 161 0
 1520 00e2 05FB05F0 		mul	r0, r5, r5
 1521              	.LBE120:
 1522              	.LBE126:
 1523              	.LBB127:
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs_impl.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE
 1524              		.loc 2 160 0
 1525 00e6 2163     		str	r1, [r4, #48]
 1526              	.LBE127:
 1527              	.LBB128:
 1528              	.LBB121:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1529              		.loc 2 161 0
 1530 00e8 216D     		ldr	r1, [r4, #80]
 1531              	.LBE121:
 1532              	.LBE128:
 1533              	.LBB129:
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs_impl.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE
 1534              		.loc 2 160 0
 1535 00ea E26D     		ldr	r2, [r4, #92]
 1536              	.LBE129:
 1537              	.LBB130:
 1538              	.LBB122:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1539              		.loc 2 161 0
 1540 00ec 01FB0107 		mla	r7, r1, r1, r0
 1541              	.LBE122:
 1542              	.LBE130:
 1543              	.LBB131:
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs_impl.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE
 1544              		.loc 2 160 0
 1545 00f0 009B     		ldr	r3, [sp, #0]
 1546              	.LBE131:
 1547              	.LBB132:
 1548              	.LBB123:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1549              		.loc 2 161 0
 1550 00f2 A46D     		ldr	r4, [r4, #88]
 1551              	.LBE123:
 1552              	.LBE132:
 1553              	.LBB133:
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs_impl.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE
 1554              		.loc 2 160 0
 1555 00f4 D618     		adds	r6, r2, r3
 1556              	.LBE133:
 1557              	.LBB134:
 1558              	.LBB124:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1559              		.loc 2 161 0
 1560 00f6 04FB0472 		mla	r2, r4, r4, r7
 1561 00fa 06FB0623 		mla	r3, r6, r6, r2
 1562              	.LVL280:
 1563 00fe 73B1     		cbz	r3, .L57
 1564              	.LVL281:
 1565              	.LBB119:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1566              		.loc 2 161 0 is_stmt 0 discriminator 2
 1567 0100 1A46     		mov	r2, r3
 1568 0102 2827     		movs	r7, #40
 1569              	.LVL282:
 1570              	.L55:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1571              		.loc 2 161 0 discriminator 3
 1572 0104 B3FBF2F0 		udiv	r0, r3, r2
 1573              	.LVL283:
 1574 0108 8018     		adds	r0, r0, r2
 1575              	.LVL284:
 1576 010a 4008     		lsrs	r0, r0, #1
 1577              	.LVL285:
 1578 010c 121A     		subs	r2, r2, r0
 1579              	.LVL286:
 1580 010e 012A     		cmp	r2, #1
 1581 0110 06D9     		bls	.L53
 1582 0112 013F     		subs	r7, r7, #1
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1583              		.loc 2 161 0 discriminator 4
 1584 0114 17F0FF07 		ands	r7, r7, #255
 1585 0118 0246     		mov	r2, r0
 1586 011a F3D1     		bne	.L55
 1587 011c 00E0     		b	.L53
 1588              	.LVL287:
 1589              	.L57:
 1590              	.LBE119:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1591              		.loc 2 161 0
 1592 011e 1846     		mov	r0, r3
 1593              	.L53:
 1594              	.LVL288:
 1595              	.LBE124:
 1596              	.LBE134:
 1597              	.LBB135:
 1598              	.LBB136:
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1599              		.loc 2 468 0 is_stmt 1 discriminator 6
 1600 0120 414B     		ldr	r3, .L59+4
 1601              	.LVL289:
 1602              	.LBE136:
 1603              	.LBE135:
 1604              	.LBB169:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1605              		.loc 2 161 0 discriminator 6
 1606 0122 ED03     		lsls	r5, r5, #15
 1607              	.LVL290:
 1608 0124 95FBF0F5 		sdiv	r5, r5, r0
 1609 0128 4FEAC138 		lsl	r8, r1, #15
 1610              	.LBE169:
 1611              	.LBB170:
 1612              	.LBB162:
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1613              		.loc 2 468 0 discriminator 6
 1614 012c 03F18402 		add	r2, r3, #132
 1615              	.LBE162:
 1616              	.LBE170:
 1617              	.LBB171:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1618              		.loc 2 161 0 discriminator 6
 1619 0130 F603     		lsls	r6, r6, #15
 1620              	.LVL291:
 1621 0132 E403     		lsls	r4, r4, #15
 1622              	.LVL292:
 1623 0134 94FBF0F4 		sdiv	r4, r4, r0
 1624 0138 98FBF0FA 		sdiv	sl, r8, r0
 1625 013c 96FBF0F0 		sdiv	r0, r6, r0
 1626              	.LVL293:
 1627              	.LBE171:
 1628              	.LBB172:
 1629              	.LBB163:
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1630              		.loc 2 468 0 discriminator 6
 1631 0140 92E8C010 		ldmia	r2, {r6, r7, ip}
 1632 0144 07FB05FB 		mul	fp, r7, r5
 1633              	.LBE163:
 1634              	.LBE172:
 1635              	.LBB173:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1636              		.loc 2 161 0 discriminator 6
 1637 0148 3649     		ldr	r1, .L59
 1638              	.LVL294:
 1639              	.LBE173:
 1640              	.LBB174:
 1641              	.LBB164:
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1642              		.loc 2 468 0 discriminator 6
 1643 014a CAF10009 		rsb	r9, sl, #0
 1644              	.LVL295:
 1645              	.LBE164:
 1646              	.LBE174:
 1647              	.LBB175:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1648              		.loc 2 161 0 discriminator 6
 1649 014e C1F850A0 		str	sl, [r1, #80]
 1650              	.LBE175:
 1651              	.LBB176:
 1652              	.LBB165:
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1653              		.loc 2 468 0 discriminator 6
 1654 0152 06FB0ABA 		mla	sl, r6, sl, fp
 1655 0156 0CFB04AA 		mla	sl, ip, r4, sl
 1656 015a D3F89080 		ldr	r8, [r3, #144]
 1657              	.LBB137:
 1658              	.LBB138:
 1659              	.LBB139:
 138:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 1660              		.loc 5 138 0 discriminator 6
 1661 015e 334A     		ldr	r2, .L59+8
 1662              	.LBE139:
 1663              	.LBE138:
 1664              	.LBE137:
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1665              		.loc 2 468 0 discriminator 6
 1666 0160 08FB00AA 		mla	sl, r8, r0, sl
 1667 0164 4FEAEA3A 		asr	sl, sl, #15
 1668              	.LBB152:
 1669              	.LBB146:
 1670              	.LBB140:
 138:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 1671              		.loc 5 138 0 discriminator 6
 1672 0168 C2F8A8A1 		str	sl, [r2, #424]
 1673              	.LBE140:
 1674              	.LBE146:
 1675              	.LBE152:
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1676              		.loc 2 468 0 discriminator 6
 1677 016c 06FB05FA 		mul	sl, r6, r5
 1678 0170 07FB09AA 		mla	sl, r7, r9, sl
 1679 0174 08FB14AA 		mls	sl, r8, r4, sl
 1680 0178 0CFB00AA 		mla	sl, ip, r0, sl
 1681 017c 4FEAEA3A 		asr	sl, sl, #15
 1682              	.LBB153:
 1683              	.LBB147:
 1684              	.LBB141:
 138:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 1685              		.loc 5 138 0 discriminator 6
 1686 0180 C2F8ACA1 		str	sl, [r2, #428]
 1687              	.LBE141:
 1688              	.LBE147:
 1689              	.LBE153:
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1690              		.loc 2 468 0 discriminator 6
 1691 0184 08FB05FA 		mul	sl, r8, r5
 1692 0188 08FB09F8 		mul	r8, r8, r9
 1693 018c 0CFB09AA 		mla	sl, ip, r9, sl
 1694              	.LBE165:
 1695              	.LBE176:
 1696              	.LBB177:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1697              		.loc 2 161 0 discriminator 6
 1698 0190 4D65     		str	r5, [r1, #84]
 1699              	.LBE177:
 1700              	.LBB178:
 1701              	.LBB166:
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1702              		.loc 2 468 0 discriminator 6
 1703 0192 06FB04AA 		mla	sl, r6, r4, sl
 1704 0196 0CFB1585 		mls	r5, ip, r5, r8
 1705 019a 07FB10AA 		mls	sl, r7, r0, sl
 1706 019e 07FB0457 		mla	r7, r7, r4, r5
 1707              	.LBE166:
 1708              	.LBE178:
 1709              	.LBB179:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1710              		.loc 2 161 0 discriminator 6
 1711 01a2 8C65     		str	r4, [r1, #88]
 1712              	.LBE179:
 1713              	.LBB180:
 1714              	.LBB167:
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1715              		.loc 2 468 0 discriminator 6
 1716 01a4 06FB0074 		mla	r4, r6, r0, r7
 1717 01a8 E613     		asrs	r6, r4, #15
 1718              	.LBB154:
 1719              	.LBB148:
 1720              	.LBB142:
 138:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 1721              		.loc 5 138 0 discriminator 6
 1722 01aa C2F8B461 		str	r6, [r2, #436]
 1723              	.LBE142:
 1724              	.LBE148:
 1725              	.LBE154:
 1726              		.loc 2 486 0 discriminator 6
 1727 01ae 0C69     		ldr	r4, [r1, #16]
 1728 01b0 D3F8A460 		ldr	r6, [r3, #164]
 1729              	.LBE167:
 1730              	.LBE180:
 1731              	.LBB181:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs_impl.ltp_to_imu_quat);
 1732              		.loc 2 161 0 discriminator 6
 1733 01b4 C865     		str	r0, [r1, #92]
 1734              	.LBE181:
 1735              	.LBB182:
 1736              	.LBB168:
 1737              		.loc 2 486 0 discriminator 6
 1738 01b6 6643     		muls	r6, r4, r6
 1739 01b8 C868     		ldr	r0, [r1, #12]
 1740 01ba D3F89870 		ldr	r7, [r3, #152]
 1741 01be 4969     		ldr	r1, [r1, #20]
 1742 01c0 07FB0067 		mla	r7, r7, r0, r6
 1743 01c4 D3F8B060 		ldr	r6, [r3, #176]
 1744              	.LBB155:
 1745              	.LBB149:
 1746              	.LBB143:
 1747              		.loc 5 140 0 discriminator 6
 1748 01c8 0125     		movs	r5, #1
 1749              	.LBE143:
 1750              	.LBE149:
 1751              	.LBE155:
 1752              		.loc 2 486 0 discriminator 6
 1753 01ca 06FB0177 		mla	r7, r6, r1, r7
 1754 01ce D3F8A860 		ldr	r6, [r3, #168]
 1755 01d2 4FEAA738 		asr	r8, r7, #14
 1756 01d6 6643     		muls	r6, r4, r6
 1757 01d8 D3F89C70 		ldr	r7, [r3, #156]
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ltp_to_body_quat, ahrs_impl.ltp_to_imu_quat, imu.body_to_imu_quat);
 1758              		.loc 2 468 0 discriminator 6
 1759 01dc 4FEAEA3A 		asr	sl, sl, #15
 1760              		.loc 2 486 0 discriminator 6
 1761 01e0 07FB0067 		mla	r7, r7, r0, r6
 1762 01e4 D3F8B460 		ldr	r6, [r3, #180]
 1763              	.LBB156:
 1764              	.LBB150:
 1765              	.LBB144:
 138:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 1766              		.loc 5 138 0 discriminator 6
 1767 01e8 C2F8B0A1 		str	sl, [r2, #432]
 1768              	.LBE144:
 1769              	.LBE150:
 1770              	.LBE156:
 1771              		.loc 2 486 0 discriminator 6
 1772 01ec 06FB0177 		mla	r7, r6, r1, r7
 1773 01f0 D3F8A060 		ldr	r6, [r3, #160]
 1774 01f4 BF13     		asrs	r7, r7, #14
 1775              	.LVL296:
 1776 01f6 7443     		muls	r4, r6, r4
 1777 01f8 D3F89460 		ldr	r6, [r3, #148]
 1778              	.LBB157:
 1779              	.LBB151:
 1780              	.LBB145:
 1781              		.loc 5 140 0 discriminator 6
 1782 01fc 82F8A451 		strb	r5, [r2, #420]
 1783              	.LBE145:
 1784              	.LBE151:
 1785              	.LBE157:
 1786              		.loc 2 486 0 discriminator 6
 1787 0200 06FB0040 		mla	r0, r6, r0, r4
 1788 0204 D3F8AC60 		ldr	r6, [r3, #172]
 1789              	.LBB158:
 1790              	.LBB159:
1056:./state.h     ****   RATES_COPY(state.body_rates_i, *body_rate);
 1791              		.loc 1 1056 0 discriminator 6
 1792 0208 C2F83082 		str	r8, [r2, #560]
 1793              	.LBE159:
 1794              	.LBE158:
 1795              		.loc 2 486 0 discriminator 6
 1796 020c 06FB0103 		mla	r3, r6, r1, r0
 1797 0210 9913     		asrs	r1, r3, #14
 1798              	.LBB161:
 1799              	.LBB160:
1056:./state.h     ****   RATES_COPY(state.body_rates_i, *body_rate);
 1800              		.loc 1 1056 0 discriminator 6
 1801 0212 C2F82C12 		str	r1, [r2, #556]
 1802 0216 C2F83472 		str	r7, [r2, #564]
1058:./state.h     ****   state.rate_status = (1 << RATE_I);
 1803              		.loc 1 1058 0 discriminator 6
 1804 021a 82F82852 		strb	r5, [r2, #552]
 1805              	.LBE160:
 1806              	.LBE161:
 1807              	.LBE168:
 1808              	.LBE182:
 165:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 1809              		.loc 2 165 0 discriminator 6
 1810 021e BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1811              	.L60:
 1812 0222 00BF     		.align	2
 1813              	.L59:
 1814 0224 00000000 		.word	.LANCHOR0
 1815 0228 00000000 		.word	imu
 1816 022c 00000000 		.word	state
 1817              		.cfi_endproc
 1818              	.LFE129:
 1820              		.global	__aeabi_i2d
 1821              		.global	__aeabi_d2iz
 1822              		.section	.text.ahrs_update_accel,"ax",%progbits
 1823              		.align	1
 1824              		.global	ahrs_update_accel
 1825              		.thumb
 1826              		.thumb_func
 1828              	ahrs_update_accel:
 1829              	.LFB130:
 170:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_accel(void) {
 1830              		.loc 2 170 0
 1831              		.cfi_startproc
 1832              		@ args = 0, pretend = 0, frame = 0
 1833              		@ frame_needed = 0, uses_anonymous_args = 0
 1834 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1835              	.LCFI4:
 1836              		.cfi_def_cfa_offset 32
 1837              		.cfi_offset 3, -32
 1838              		.cfi_offset 4, -28
 1839              		.cfi_offset 5, -24
 1840              		.cfi_offset 6, -20
 1841              		.cfi_offset 7, -16
 1842              		.cfi_offset 8, -12
 1843              		.cfi_offset 9, -8
 1844              		.cfi_offset 14, -4
 1845              	.LBB183:
 174:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 1846              		.loc 2 174 0
 1847 0004 8C4B     		ldr	r3, .L86+8
 1848 0006 1A6D     		ldr	r2, [r3, #80]
 1849              	.LVL297:
 1850 0008 DC6D     		ldr	r4, [r3, #92]
 1851 000a 596D     		ldr	r1, [r3, #84]
 1852              	.LVL298:
 1853 000c 986D     		ldr	r0, [r3, #88]
 1854              	.LVL299:
 1855 000e 04FB01F8 		mul	r8, r4, r1
 1856 0012 00FB02F6 		mul	r6, r0, r2
 1857 0016 5143     		muls	r1, r2, r1
 1858              	.LVL300:
 1859 0018 6043     		muls	r0, r4, r0
 1860              	.LVL301:
 1861 001a 5243     		muls	r2, r2, r2
 1862              	.LVL302:
 1863 001c 6443     		muls	r4, r4, r4
 1864              	.LVL303:
 1865 001e CF13     		asrs	r7, r1, #15
 1866              	.LVL304:
 1867 0020 F513     		asrs	r5, r6, #15
 1868              	.LVL305:
 1869 0022 C5EBE836 		rsb	r6, r5, r8, asr #15
 1870              	.LVL306:
 1871 0026 D213     		asrs	r2, r2, #15
 1872 0028 07EBE038 		add	r8, r7, r0, asr #15
 1873              	.LVL307:
 1874              	.LBE183:
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 1875              		.loc 2 182 0
 1876 002c 93F87100 		ldrb	r0, [r3, #113]	@ zero_extendqisi2
 1877              	.LBB184:
 174:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 1878              		.loc 2 174 0
 1879 0030 A2F58041 		sub	r1, r2, #16384
 1880              	.LVL308:
 1881 0034 01EBE434 		add	r4, r1, r4, asr #15
 1882              	.LVL309:
 1883              	.LBE184:
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 1884              		.loc 2 182 0
 1885 0038 0028     		cmp	r0, #0
 1886 003a 3ED0     		beq	.L62
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 1887              		.loc 2 182 0 is_stmt 0 discriminator 1
 1888 003c 93F87050 		ldrb	r5, [r3, #112]	@ zero_extendqisi2
 1889              	.LVL310:
 1890 0040 002D     		cmp	r5, #0
 1891 0042 3AD0     		beq	.L62
 1892              	.LBB185:
 194:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const struct Int32Vect3 vel_tangential_body = {ahrs_impl.ltp_vel_norm >> COMPUTATION_FRAC, 0, 0
 1893              		.loc 2 194 0 is_stmt 1 discriminator 1
 1894 0044 B3F96E70 		ldrsh	r7, [r3, #110]
 1895              	.LVL311:
 196:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, (*stateGetBodyRates_i()), vel_tangential_body);
 1896              		.loc 2 196 0 discriminator 1
 1897 0048 FFF7FEFF 		bl	stateGetBodyRates_i
 1898              	.LVL312:
 1899 004c FFF7FEFF 		bl	stateGetBodyRates_i
 1900              	.LVL313:
 1901 0050 FFF7FEFF 		bl	stateGetBodyRates_i
 1902              	.LVL314:
 1903 0054 8568     		ldr	r5, [r0, #8]
 1904 0056 FFF7FEFF 		bl	stateGetBodyRates_i
 1905              	.LVL315:
 1906 005a FFF7FEFF 		bl	stateGetBodyRates_i
 1907              	.LVL316:
 1908 005e FFF7FEFF 		bl	stateGetBodyRates_i
 1909              	.LVL317:
 1910 0062 4368     		ldr	r3, [r0, #4]
 1911 0064 7D43     		muls	r5, r7, r5
 1912              	.LVL318:
 1913 0066 03FB07FC 		mul	ip, r3, r7
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(pseudo_gravity_measurement, imu.accel, acc_c_imu);
 1914              		.loc 2 204 0 discriminator 1
 1915 006a 744B     		ldr	r3, .L86+12
 1916              	.LVL319:
 196:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, (*stateGetBodyRates_i()), vel_tangential_body);
 1917              		.loc 2 196 0 discriminator 1
 1918 006c CCF10002 		rsb	r2, ip, #0
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 1919              		.loc 2 201 0 discriminator 1
 1920 0070 D3F89C10 		ldr	r1, [r3, #156]
 197:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_RSHIFT(acc_c_body, acc_c_body, INT32_SPEED_FRAC+INT32_RATE_FRAC-INT32_ACCEL_FRAC-CO
 1921              		.loc 2 197 0 discriminator 1
 1922 0074 4FEA621C 		asr	ip, r2, #5
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 1923              		.loc 2 201 0 discriminator 1
 1924 0078 01FB0CF7 		mul	r7, r1, ip
 1925              	.LVL320:
 1926 007c D3F89800 		ldr	r0, [r3, #152]
 197:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_RSHIFT(acc_c_body, acc_c_body, INT32_SPEED_FRAC+INT32_RATE_FRAC-INT32_ACCEL_FRAC-CO
 1927              		.loc 2 197 0 discriminator 1
 1928 0080 6D11     		asrs	r5, r5, #5
 1929              	.LVL321:
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 1930              		.loc 2 201 0 discriminator 1
 1931 0082 00FB0572 		mla	r2, r0, r5, r7
 1932 0086 D3F8A810 		ldr	r1, [r3, #168]
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(pseudo_gravity_measurement, imu.accel, acc_c_imu);
 1933              		.loc 2 204 0 discriminator 1
 1934 008a D868     		ldr	r0, [r3, #12]
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 1935              		.loc 2 201 0 discriminator 1
 1936 008c 01FB0CF7 		mul	r7, r1, ip
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(pseudo_gravity_measurement, imu.accel, acc_c_imu);
 1937              		.loc 2 204 0 discriminator 1
 1938 0090 A0EBA232 		sub	r2, r0, r2, asr #14
 1939              	.LVL322:
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 1940              		.loc 2 201 0 discriminator 1
 1941 0094 D3F8A400 		ldr	r0, [r3, #164]
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(pseudo_gravity_measurement, imu.accel, acc_c_imu);
 1942              		.loc 2 204 0 discriminator 1
 1943 0098 1969     		ldr	r1, [r3, #16]
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 1944              		.loc 2 201 0 discriminator 1
 1945 009a 00FB0577 		mla	r7, r0, r5, r7
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(pseudo_gravity_measurement, imu.accel, acc_c_imu);
 1946              		.loc 2 204 0 discriminator 1
 1947 009e A1EBA730 		sub	r0, r1, r7, asr #14
 1948              	.LVL323:
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 1949              		.loc 2 201 0 discriminator 1
 1950 00a2 D3F8B410 		ldr	r1, [r3, #180]
 1951 00a6 D3F8B070 		ldr	r7, [r3, #176]
 1952 00aa 01FB0CF1 		mul	r1, r1, ip
 1953 00ae 07FB0515 		mla	r5, r7, r5, r1
 1954              	.LVL324:
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(pseudo_gravity_measurement, imu.accel, acc_c_imu);
 1955              		.loc 2 204 0 discriminator 1
 1956 00b2 5B69     		ldr	r3, [r3, #20]
 1957 00b4 A3EBA531 		sub	r1, r3, r5, asr #14
 1958              	.LVL325:
 1959              	.LBE185:
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 1960              		.loc 2 182 0 discriminator 1
 1961 00b8 03E0     		b	.L63
 1962              	.LVL326:
 1963              	.L62:
 206:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_COPY(pseudo_gravity_measurement, imu.accel);
 1964              		.loc 2 206 0
 1965 00ba 604B     		ldr	r3, .L86+12
 1966 00bc DA68     		ldr	r2, [r3, #12]
 1967              	.LVL327:
 1968 00be 1869     		ldr	r0, [r3, #16]
 1969              	.LVL328:
 1970 00c0 5969     		ldr	r1, [r3, #20]
 1971              	.LVL329:
 1972              	.L63:
 210:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_VECT3_CROSS_PRODUCT(residual, pseudo_gravity_measurement, c2);
 1973              		.loc 2 210 0
 1974 00c2 04FB00F7 		mul	r7, r4, r0
 1975 00c6 08FB1175 		mls	r5, r8, r1, r7
 1976              	.LVL330:
 1977 00ca 08FB02F8 		mul	r8, r8, r2
 1978              	.LVL331:
 1979 00ce 06FB01F3 		mul	r3, r6, r1
 1980 00d2 06FB1088 		mls	r8, r6, r0, r8
 214:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.use_gravity_heuristic) {
 1981              		.loc 2 214 0
 1982 00d6 584E     		ldr	r6, .L86+8
 1983              	.LVL332:
 210:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_VECT3_CROSS_PRODUCT(residual, pseudo_gravity_measurement, c2);
 1984              		.loc 2 210 0
 1985 00d8 04FB1234 		mls	r4, r4, r2, r3
 1986              	.LVL333:
 214:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.use_gravity_heuristic) {
 1987              		.loc 2 214 0
 1988 00dc 96F87270 		ldrb	r7, [r6, #114]	@ zero_extendqisi2
 1989 00e0 0FB9     		cbnz	r7, .L64
 1990              	.LVL334:
 1991              	.L73:
 1992              	.LBB186:
 1993              	.LBB187:
 229:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = 1;
 1994              		.loc 2 229 0
 1995 00e2 0120     		movs	r0, #1
 1996 00e4 62E0     		b	.L65
 1997              	.LVL335:
 1998              	.L64:
 1999              	.LBE187:
 219:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_SMUL(filtered_gravity_measurement, filtered_gravity_measurement, 7);
 2000              		.loc 2 219 0
 2001 00e6 564B     		ldr	r3, .L86+16
 2002 00e8 0727     		movs	r7, #7
 2003 00ea 5E68     		ldr	r6, [r3, #4]
 220:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_ADD(filtered_gravity_measurement, pseudo_gravity_measurement);
 2004              		.loc 2 220 0
 2005 00ec 07FB0600 		mla	r0, r7, r6, r0
 2006              	.LVL336:
 2007 00f0 9E68     		ldr	r6, [r3, #8]
 2008 00f2 07FB0611 		mla	r1, r7, r6, r1
 2009              	.LVL337:
 2010 00f6 1E68     		ldr	r6, [r3, #0]
 2011 00f8 07FB0622 		mla	r2, r7, r6, r2
 2012              	.LVL338:
 221:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_SDIV(filtered_gravity_measurement, filtered_gravity_measurement, 8);
 2013              		.loc 2 221 0
 2014 00fc 0827     		movs	r7, #8
 2015 00fe 90FBF7F0 		sdiv	r0, r0, r7
 2016 0102 5860     		str	r0, [r3, #4]
 2017              	.LBB189:
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, filtered_gravity_measurement);
 2018              		.loc 2 224 0
 2019 0104 4043     		muls	r0, r0, r0
 2020              	.LBE189:
 221:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_SDIV(filtered_gravity_measurement, filtered_gravity_measurement, 8);
 2021              		.loc 2 221 0
 2022 0106 92FBF7F6 		sdiv	r6, r2, r7
 2023 010a 91FBF7F1 		sdiv	r1, r1, r7
 2024 010e 1E60     		str	r6, [r3, #0]
 2025 0110 9960     		str	r1, [r3, #8]
 2026              	.LBB190:
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, filtered_gravity_measurement);
 2027              		.loc 2 224 0
 2028 0112 06FB0603 		mla	r3, r6, r6, r0
 2029 0116 01FB0137 		mla	r7, r1, r1, r3
 2030              	.LVL339:
 2031 011a 77B1     		cbz	r7, .L74
 2032              	.LVL340:
 2033              	.LBB188:
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, filtered_gravity_measurement);
 2034              		.loc 2 224 0 is_stmt 0 discriminator 2
 2035 011c 3B46     		mov	r3, r7
 2036 011e 2822     		movs	r2, #40
 2037              	.LVL341:
 2038              	.L68:
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, filtered_gravity_measurement);
 2039              		.loc 2 224 0 discriminator 3
 2040 0120 B7FBF3F6 		udiv	r6, r7, r3
 2041              	.LVL342:
 2042 0124 F018     		adds	r0, r6, r3
 2043              	.LVL343:
 2044 0126 4008     		lsrs	r0, r0, #1
 2045              	.LVL344:
 2046 0128 191A     		subs	r1, r3, r0
 2047 012a 0129     		cmp	r1, #1
 2048 012c 06D9     		bls	.L66
 2049 012e 013A     		subs	r2, r2, #1
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, filtered_gravity_measurement);
 2050              		.loc 2 224 0 discriminator 4
 2051 0130 12F0FF02 		ands	r2, r2, #255
 2052 0134 0346     		mov	r3, r0
 2053              	.LVL345:
 2054 0136 F3D1     		bne	.L68
 2055 0138 00E0     		b	.L66
 2056              	.LVL346:
 2057              	.L74:
 2058              	.LBE188:
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, filtered_gravity_measurement);
 2059              		.loc 2 224 0
 2060 013a 3846     		mov	r0, r7
 2061              	.L66:
 2062              	.LVL347:
 2063              	.LBE190:
 225:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 2064              		.loc 2 225 0 is_stmt 1
 2065 013c FFF7FEFF 		bl	__aeabi_i2d
 2066              	.LVL348:
 2067 0140 0246     		mov	r2, r0
 2068 0142 0B46     		mov	r3, r1
 2069 0144 3AA1     		adr	r1, .L86
 2070 0146 D1E90001 		ldrd	r0, [r1]
 2071 014a FFF7FEFF 		bl	__aeabi_dsub
 2072              	.LVL349:
 2073 014e 0022     		movs	r2, #0
 2074 0150 0023     		movs	r3, #0
 2075 0152 0746     		mov	r7, r0
 2076              	.LVL350:
 2077 0154 0E46     		mov	r6, r1
 2078 0156 FFF7FEFF 		bl	__aeabi_dcmplt
 2079              	.LVL351:
 2080 015a 18B1     		cbz	r0, .L84
 225:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 2081              		.loc 2 225 0 is_stmt 0 discriminator 1
 2082 015c 3846     		mov	r0, r7
 2083 015e 06F10041 		add	r1, r6, #-2147483648
 2084 0162 01E0     		b	.L85
 2085              	.L84:
 225:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 2086              		.loc 2 225 0 discriminator 2
 2087 0164 3846     		mov	r0, r7
 2088 0166 3146     		mov	r1, r6
 2089              	.L85:
 2090 0168 FFF7FEFF 		bl	__aeabi_d2iz
 2091              	.LVL352:
 226:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(50*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 50);
 2092              		.loc 2 226 0 is_stmt 1 discriminator 2
 2093 016c 4FF03209 		mov	r9, #50
 2094 0170 09FB00F0 		mul	r0, r9, r0
 2095              	.LVL353:
 2096 0174 FFF7FEFF 		bl	__aeabi_i2d
 2097              	.LVL354:
 2098 0178 2DA3     		adr	r3, .L86
 2099 017a D3E90023 		ldrd	r2, [r3]
 2100 017e FFF7FEFF 		bl	__aeabi_ddiv
 2101              	.LVL355:
 2102 0182 0022     		movs	r2, #0
 2103 0184 2F4B     		ldr	r3, .L86+20
 2104 0186 0646     		mov	r6, r0
 2105 0188 0F46     		mov	r7, r1
 2106 018a FFF7FEFF 		bl	__aeabi_dcmplt
 2107              	.LVL356:
 2108 018e 0028     		cmp	r0, #0
 2109 0190 A7D1     		bne	.L73
 2110 0192 3046     		mov	r0, r6
 2111 0194 3946     		mov	r1, r7
 2112 0196 0022     		movs	r2, #0
 2113 0198 2B4B     		ldr	r3, .L86+24
 2114 019a FFF7FEFF 		bl	__aeabi_dcmpgt
 2115              	.LVL357:
 2116 019e 20B9     		cbnz	r0, .L75
 226:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(50*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 50);
 2117              		.loc 2 226 0 is_stmt 0 discriminator 4
 2118 01a0 3046     		mov	r0, r6
 2119 01a2 3946     		mov	r1, r7
 2120 01a4 FFF7FEFF 		bl	__aeabi_d2iz
 2121              	.LVL358:
 2122 01a8 00E0     		b	.L65
 2123              	.L75:
 226:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(50*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 50);
 2124              		.loc 2 226 0
 2125 01aa 4846     		mov	r0, r9
 2126              	.L65:
 2127              	.LVL359:
 2128              	.LBE186:
 235:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += -residual.x/82000/inv_weight;
 2129              		.loc 2 235 0 is_stmt 1
 2130 01ac 2249     		ldr	r1, .L86+8
 2131 01ae 274B     		ldr	r3, .L86+28
 2132 01b0 8E69     		ldr	r6, [r1, #24]
 2133 01b2 95FBF3F2 		sdiv	r2, r5, r3
 2134 01b6 92FBF0F7 		sdiv	r7, r2, r0
 2135 01ba F219     		adds	r2, r6, r7
 2136 01bc 8A61     		str	r2, [r1, #24]
 236:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += -residual.y/82000/inv_weight;
 2137              		.loc 2 236 0
 2138 01be 94FBF3F7 		sdiv	r7, r4, r3
 2139 01c2 CA69     		ldr	r2, [r1, #28]
 2140 01c4 97FBF0F6 		sdiv	r6, r7, r0
 2141 01c8 9719     		adds	r7, r2, r6
 237:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 2142              		.loc 2 237 0
 2143 01ca 98FBF3F3 		sdiv	r3, r8, r3
 2144 01ce 0A6A     		ldr	r2, [r1, #32]
 2145 01d0 93FBF0F6 		sdiv	r6, r3, r0
 247:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/(2*inv_weight);
 2146              		.loc 2 247 0
 2147 01d4 4000     		lsls	r0, r0, #1
 2148              	.LVL360:
 2149 01d6 95FBF0F5 		sdiv	r5, r5, r0
 2150              	.LVL361:
 236:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += -residual.y/82000/inv_weight;
 2151              		.loc 2 236 0
 2152 01da CF61     		str	r7, [r1, #28]
 237:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 2153              		.loc 2 237 0
 2154 01dc 9719     		adds	r7, r2, r6
 248:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/(2*inv_weight);
 2155              		.loc 2 248 0
 2156 01de 94FBF0F3 		sdiv	r3, r4, r0
 237:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 2157              		.loc 2 237 0
 2158 01e2 0F62     		str	r7, [r1, #32]
 247:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/(2*inv_weight);
 2159              		.loc 2 247 0
 2160 01e4 D1E90E67 		ldrd	r6, [r1, #56]
 2161 01e8 7619     		adds	r6, r6, r5
 2162 01ea 47EBE577 		adc	r7, r7, r5, asr #31
 249:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/(2*inv_weight);
 2163              		.loc 2 249 0
 2164 01ee 98FBF0F0 		sdiv	r0, r8, r0
 248:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/(2*inv_weight);
 2165              		.loc 2 248 0
 2166 01f2 D1E91045 		ldrd	r4, [r1, #64]
 2167              	.LVL362:
 2168 01f6 E418     		adds	r4, r4, r3
 2169 01f8 45EBE375 		adc	r5, r5, r3, asr #31
 249:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/(2*inv_weight);
 2170              		.loc 2 249 0
 2171 01fc D1E91223 		ldrd	r2, [r1, #72]
 2172 0200 1218     		adds	r2, r2, r0
 2173 0202 43EBE073 		adc	r3, r3, r0, asr #31
 253:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2174              		.loc 2 253 0
 2175 0206 300F     		lsrs	r0, r6, #28
 2176 0208 40EA0710 		orr	r0, r0, r7, lsl #4
 249:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/(2*inv_weight);
 2177              		.loc 2 249 0
 2178 020c C1E91223 		strd	r2, [r1, #72]
 253:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2179              		.loc 2 253 0
 2180 0210 0860     		str	r0, [r1, #0]
 2181 0212 120F     		lsrs	r2, r2, #28
 2182 0214 200F     		lsrs	r0, r4, #28
 2183 0216 40EA0510 		orr	r0, r0, r5, lsl #4
 2184 021a 42EA0313 		orr	r3, r2, r3, lsl #4
 247:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/(2*inv_weight);
 2185              		.loc 2 247 0
 2186 021e C1E90E67 		strd	r6, [r1, #56]
 248:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/(2*inv_weight);
 2187              		.loc 2 248 0
 2188 0222 C1E91045 		strd	r4, [r1, #64]
 253:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2189              		.loc 2 253 0
 2190 0226 4860     		str	r0, [r1, #4]
 2191 0228 8B60     		str	r3, [r1, #8]
 2192 022a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2193              	.L87:
 2194 022e 00BF     		.align	3
 2195              	.L86:
 2196 0230 1F85EB51 		.word	1374389535
 2197 0234 B89EC340 		.word	1086561976
 2198 0238 00000000 		.word	.LANCHOR0
 2199 023c 00000000 		.word	imu
 2200 0240 00000000 		.word	.LANCHOR1
 2201 0244 0000F03F 		.word	1072693248
 2202 0248 00004940 		.word	1078525952
 2203 024c B0BFFEFF 		.word	-82000
 2204              		.cfi_endproc
 2205              	.LFE130:
 2207              		.section	.text.ahrs_update_mag,"ax",%progbits
 2208              		.align	1
 2209              		.global	ahrs_update_mag
 2210              		.thumb
 2211              		.thumb_func
 2213              	ahrs_update_mag:
 2214              	.LFB131:
 257:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_mag(void) {
 2215              		.loc 2 257 0
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 8
 2218              		@ frame_needed = 0, uses_anonymous_args = 0
 2219              	.LBB194:
 2220              	.LBB195:
 2221              	.LBB196:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2222              		.loc 2 295 0
 2223 0000 4C4B     		ldr	r3, .L89
 2224              	.LBE196:
 2225              	.LBE195:
 2226              	.LBE194:
 257:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_mag(void) {
 2227              		.loc 2 257 0
 2228 0002 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2229              	.LCFI5:
 2230              		.cfi_def_cfa_offset 48
 2231              		.cfi_offset 0, -48
 2232              		.cfi_offset 1, -44
 2233              		.cfi_offset 2, -40
 2234              		.cfi_offset 4, -36
 2235              		.cfi_offset 5, -32
 2236              		.cfi_offset 6, -28
 2237              		.cfi_offset 7, -24
 2238              		.cfi_offset 8, -20
 2239              		.cfi_offset 9, -16
 2240              		.cfi_offset 10, -12
 2241              		.cfi_offset 11, -8
 2242              		.cfi_offset 14, -4
 2243              	.LBB210:
 2244              	.LBB209:
 2245              	.LBB197:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2246              		.loc 2 295 0
 2247 0006 1D6D     		ldr	r5, [r3, #80]
 2248 0008 5F6D     		ldr	r7, [r3, #84]
 2249 000a 05FB05F0 		mul	r0, r5, r5
 2250 000e 07FB05F4 		mul	r4, r7, r5
 2251 0012 C113     		asrs	r1, r0, #15
 2252 0014 A1F58040 		sub	r0, r1, #16384
 2253              	.LVL363:
 2254 0018 DA6D     		ldr	r2, [r3, #92]
 2255 001a 996D     		ldr	r1, [r3, #88]
 2256              	.LVL364:
 2257 001c E613     		asrs	r6, r4, #15
 2258 001e 0096     		str	r6, [sp, #0]
 2259              	.LVL365:
 2260 0020 02FB01F6 		mul	r6, r2, r1
 2261              	.LVL366:
 2262 0024 02FB05F9 		mul	r9, r2, r5
 2263 0028 01FB07FA 		mul	sl, r1, r7
 2264 002c 01FB05F4 		mul	r4, r1, r5
 2265 0030 F613     		asrs	r6, r6, #15
 2266 0032 02FB07F5 		mul	r5, r2, r7
 2267 0036 7F43     		muls	r7, r7, r7
 2268              	.LVL367:
 2269 0038 0196     		str	r6, [sp, #4]
 2270              	.LBE197:
 298:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ltp_to_imu_rmat, imu.mag);
 2271              		.loc 2 298 0
 2272 003a 3F4E     		ldr	r6, .L89+4
 2273              	.LBB198:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2274              		.loc 2 295 0
 2275 003c 4FEAE939 		asr	r9, r9, #15
 2276              	.LBE198:
 298:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ltp_to_imu_rmat, imu.mag);
 2277              		.loc 2 298 0
 2278 0040 D6F81C80 		ldr	r8, [r6, #28]
 2279              	.LBB199:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2280              		.loc 2 295 0
 2281 0044 4FEAEA3A 		asr	sl, sl, #15
 2282 0048 00EBE73B 		add	fp, r0, r7, asr #15
 2283 004c 4943     		muls	r1, r1, r1
 2284              	.LVL368:
 2285 004e C9EB0A07 		rsb	r7, r9, sl
 2286              	.LBE199:
 298:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ltp_to_imu_rmat, imu.mag);
 2287              		.loc 2 298 0
 2288 0052 08FB07F7 		mul	r7, r8, r7
 2289 0056 D6F818C0 		ldr	ip, [r6, #24]
 2290              	.LBB200:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2291              		.loc 2 295 0
 2292 005a 00EBE131 		add	r1, r0, r1, asr #15
 2293              	.LBE200:
 298:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ltp_to_imu_rmat, imu.mag);
 2294              		.loc 2 298 0
 2295 005e 0CFB0B7B 		mla	fp, ip, fp, r7
 2296 0062 08FB01F8 		mul	r8, r8, r1
 2297              	.LBB201:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2298              		.loc 2 295 0
 2299 0066 ED13     		asrs	r5, r5, #15
 2300 0068 E413     		asrs	r4, r4, #15
 2301              	.LVL369:
 2302              	.LBE201:
 298:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ltp_to_imu_rmat, imu.mag);
 2303              		.loc 2 298 0
 2304 006a 366A     		ldr	r6, [r6, #32]
 2305              	.LVL370:
 2306              	.LBB202:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2307              		.loc 2 295 0
 2308 006c 2F19     		adds	r7, r5, r4
 2309              	.LVL371:
 2310 006e D144     		add	r9, sl, r9
 2311              	.LVL372:
 2312              	.LBE202:
 298:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ltp_to_imu_rmat, imu.mag);
 2313              		.loc 2 298 0
 2314 0070 0CFB098C 		mla	ip, ip, r9, r8
 2315 0074 06FB07BB 		mla	fp, r6, r7, fp
 2316              	.LBB203:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2317              		.loc 2 295 0
 2318 0078 DDF80090 		ldr	r9, [sp, #0]
 2319              	.LVL373:
 2320 007c DDF80480 		ldr	r8, [sp, #4]
 2321              	.LBE203:
 303:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * ahrs_impl.mag_h.y - measured_ltp.y * ahrs_impl.mag_h.x)/(1<<5)};
 2322              		.loc 2 303 0
 2323 0080 5F6E     		ldr	r7, [r3, #100]
 2324              	.LVL374:
 2325              	.LBB204:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2326              		.loc 2 295 0
 2327 0082 C9EB0801 		rsb	r1, r9, r8
 2328              	.LVL375:
 2329              	.LBE204:
 298:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ltp_to_imu_rmat, imu.mag);
 2330              		.loc 2 298 0
 2331 0086 06FB01C6 		mla	r6, r6, r1, ip
 2332 008a 4FEAAB3B 		asr	fp, fp, #14
 303:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * ahrs_impl.mag_h.y - measured_ltp.y * ahrs_impl.mag_h.x)/(1<<5)};
 2333              		.loc 2 303 0
 2334 008e 07FB0BF7 		mul	r7, r7, fp
 2335 0092 196E     		ldr	r1, [r3, #96]
 2336              	.LVL376:
 298:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ltp_to_imu_rmat, imu.mag);
 2337              		.loc 2 298 0
 2338 0094 B613     		asrs	r6, r6, #14
 303:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * ahrs_impl.mag_h.y - measured_ltp.y * ahrs_impl.mag_h.x)/(1<<5)};
 2339              		.loc 2 303 0
 2340 0096 01FB1677 		mls	r7, r1, r6, r7
 2341 009a 4FF0200C 		mov	ip, #32
 2342              	.LBB205:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2343              		.loc 2 295 0
 2344 009e 5243     		muls	r2, r2, r2
 2345              	.LVL377:
 2346              	.LBE205:
 303:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * ahrs_impl.mag_h.y - measured_ltp.y * ahrs_impl.mag_h.x)/(1<<5)};
 2347              		.loc 2 303 0
 2348 00a0 97FBFCF6 		sdiv	r6, r7, ip
 2349              	.LVL378:
 2350              	.LBB206:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2351              		.loc 2 295 0
 2352 00a4 2C1B     		subs	r4, r5, r4
 2353              	.LVL379:
 2354 00a6 0199     		ldr	r1, [sp, #4]
 2355              	.LBE206:
 306:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2356              		.loc 2 306 0
 2357 00a8 7443     		muls	r4, r6, r4
 2358              	.LVL380:
 2359              	.LBB207:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2360              		.loc 2 295 0
 2361 00aa 01EB0907 		add	r7, r1, r9
 2362              	.LVL381:
 2363              	.LBE207:
 306:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2364              		.loc 2 306 0
 2365 00ae 06FB07F8 		mul	r8, r6, r7
 2366              	.LBB208:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2367              		.loc 2 295 0
 2368 00b2 00EBE230 		add	r0, r0, r2, asr #15
 2369              	.LVL382:
 2370              	.LBE208:
 306:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2371              		.loc 2 306 0
 2372 00b6 7043     		muls	r0, r6, r0
 316:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 2373              		.loc 2 316 0
 2374 00b8 9A69     		ldr	r2, [r3, #24]
 2375 00ba 1026     		movs	r6, #16
 2376              	.LVL383:
 306:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2377              		.loc 2 306 0
 2378 00bc A513     		asrs	r5, r4, #14
 2379              	.LVL384:
 316:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 2380              		.loc 2 316 0
 2381 00be 95FBF6F4 		sdiv	r4, r5, r6
 2382 00c2 1119     		adds	r1, r2, r4
 306:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2383              		.loc 2 306 0
 2384 00c4 4FEAA83C 		asr	ip, r8, #14
 2385              	.LVL385:
 317:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 2386              		.loc 2 317 0
 2387 00c8 DC69     		ldr	r4, [r3, #28]
 2388 00ca 9CFBF6F7 		sdiv	r7, ip, r6
 2389              	.LVL386:
 306:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2390              		.loc 2 306 0
 2391 00ce 8013     		asrs	r0, r0, #14
 2392              	.LVL387:
 329:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 2393              		.loc 2 329 0
 2394 00d0 AD02     		lsls	r5, r5, #10
 2395              	.LVL388:
 316:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 2396              		.loc 2 316 0
 2397 00d2 9961     		str	r1, [r3, #24]
 318:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 2398              		.loc 2 318 0
 2399 00d4 196A     		ldr	r1, [r3, #32]
 317:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 2400              		.loc 2 317 0
 2401 00d6 E219     		adds	r2, r4, r7
 318:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 2402              		.loc 2 318 0
 2403 00d8 90FBF6F6 		sdiv	r6, r0, r6
 329:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 2404              		.loc 2 329 0
 2405 00dc D3E90E89 		ldrd	r8, [r3, #56]
 2406 00e0 B8EB0508 		subs	r8, r8, r5
 2407 00e4 69EBE579 		sbc	r9, r9, r5, asr #31
 318:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 2408              		.loc 2 318 0
 2409 00e8 8F19     		adds	r7, r1, r6
 331:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 2410              		.loc 2 331 0
 2411 00ea 8002     		lsls	r0, r0, #10
 2412              	.LVL389:
 317:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 2413              		.loc 2 317 0
 2414 00ec DA61     		str	r2, [r3, #28]
 330:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 2415              		.loc 2 330 0
 2416 00ee 4FEA8C2C 		lsl	ip, ip, #10
 2417              	.LVL390:
 334:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2418              		.loc 2 334 0
 2419 00f2 4FEA1872 		lsr	r2, r8, #28
 2420 00f6 42EA0911 		orr	r1, r2, r9, lsl #4
 331:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 2421              		.loc 2 331 0
 2422 00fa D3E91245 		ldrd	r4, [r3, #72]
 318:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 2423              		.loc 2 318 0
 2424 00fe 1F62     		str	r7, [r3, #32]
 331:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 2425              		.loc 2 331 0
 2426 0100 241A     		subs	r4, r4, r0
 2427 0102 65EBE075 		sbc	r5, r5, r0, asr #31
 330:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 2428              		.loc 2 330 0
 2429 0106 D3E91067 		ldrd	r6, [r3, #64]
 2430 010a B6EB0C06 		subs	r6, r6, ip
 2431 010e 67EBEC77 		sbc	r7, r7, ip, asr #31
 334:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2432              		.loc 2 334 0
 2433 0112 300F     		lsrs	r0, r6, #28
 2434 0114 1960     		str	r1, [r3, #0]
 2435 0116 210F     		lsrs	r1, r4, #28
 2436 0118 40EA0712 		orr	r2, r0, r7, lsl #4
 2437 011c 41EA0510 		orr	r0, r1, r5, lsl #4
 329:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 2438              		.loc 2 329 0
 2439 0120 C3E90E89 		strd	r8, [r3, #56]
 330:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 2440              		.loc 2 330 0
 2441 0124 C3E91067 		strd	r6, [r3, #64]
 331:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 2442              		.loc 2 331 0
 2443 0128 C3E91245 		strd	r4, [r3, #72]
 334:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2444              		.loc 2 334 0
 2445 012c 5A60     		str	r2, [r3, #4]
 2446 012e 9860     		str	r0, [r3, #8]
 2447              	.LBE209:
 2448              	.LBE210:
 263:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 2449              		.loc 2 263 0
 2450 0130 BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2451              	.L90:
 2452              		.align	2
 2453              	.L89:
 2454 0134 00000000 		.word	.LANCHOR0
 2455 0138 00000000 		.word	imu
 2456              		.cfi_endproc
 2457              	.LFE131:
 2459              		.section	.text.ahrs_update_gps,"ax",%progbits
 2460              		.align	1
 2461              		.global	ahrs_update_gps
 2462              		.thumb
 2463              		.thumb_func
 2465              	ahrs_update_gps:
 2466              	.LFB134:
 338:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_gps(void) {
 2467              		.loc 2 338 0
 2468              		.cfi_startproc
 2469              		@ args = 0, pretend = 0, frame = 0
 2470              		@ frame_needed = 0, uses_anonymous_args = 0
 2471              		@ link register save eliminated.
 2472 0000 7047     		bx	lr
 2473              		.cfi_endproc
 2474              	.LFE134:
 2476              		.section	.text.ahrs_update_heading,"ax",%progbits
 2477              		.align	1
 2478              		.global	ahrs_update_heading
 2479              		.thumb
 2480              		.thumb_func
 2482              	ahrs_update_heading:
 2483              	.LFB135:
 371:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_heading(int32_t heading) {
 2484              		.loc 2 371 0
 2485              		.cfi_startproc
 2486              		@ args = 0, pretend = 0, frame = 0
 2487              		@ frame_needed = 0, uses_anonymous_args = 0
 2488              	.LVL391:
 371:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_heading(int32_t heading) {
 2489              		.loc 2 371 0
 2490 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2491              	.LCFI6:
 2492              		.cfi_def_cfa_offset 24
 2493              		.cfi_offset 3, -24
 2494              		.cfi_offset 4, -20
 2495              		.cfi_offset 5, -16
 2496              		.cfi_offset 6, -12
 2497              		.cfi_offset 7, -8
 2498              		.cfi_offset 14, -4
 2499 0002 0446     		mov	r4, r0
 2500              	.LVL392:
 2501              	.L93:
 373:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2502              		.loc 2 373 0 discriminator 1
 2503 0004 43F24323 		movw	r3, #12867
 2504 0008 9C42     		cmp	r4, r3
 2505 000a 03DD     		ble	.L112
 2506              	.L94:
 373:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2507              		.loc 2 373 0 is_stmt 0 discriminator 2
 2508 000c A4F5C941 		sub	r1, r4, #25728
 2509 0010 CC1F     		subs	r4, r1, #7
 2510              	.LVL393:
 2511 0012 F7E7     		b	.L93
 2512              	.LVL394:
 2513              	.L112:
 373:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2514              		.loc 2 373 0 discriminator 4
 2515 0014 5C48     		ldr	r0, .L115
 2516 0016 8442     		cmp	r4, r0
 2517 0018 03DA     		bge	.L113
 2518              	.L96:
 373:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2519              		.loc 2 373 0 discriminator 5
 2520 001a 04F5C940 		add	r0, r4, #25728
 2521 001e C41D     		adds	r4, r0, #7
 2522              	.LVL395:
 2523 0020 F8E7     		b	.L112
 2524              	.LVL396:
 2525              	.L113:
 2526              	.LBB219:
 2527              	.LBB220:
 2528              	.LBB221:
 141:./math/pprz_orientation_conversion.h **** }
 142:./math/pprz_orientation_conversion.h **** 
 143:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (int).
 144:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_i(struct OrientationReps* orientation, struct Int32RMat* rmat
 145:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_i, *rmat);
 146:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 147:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_I);
 148:./math/pprz_orientation_conversion.h **** }
 149:./math/pprz_orientation_conversion.h **** 
 150:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (int).
 151:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_i(struct OrientationReps* orientation, struct Int32Eulers* 
 152:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_i, *eulers);
 153:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 154:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_I);
 155:./math/pprz_orientation_conversion.h **** }
 156:./math/pprz_orientation_conversion.h **** 
 157:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (float).
 158:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_f(struct OrientationReps* orientation, struct FloatQuat* quat
 159:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_f, *quat);
 160:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 161:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_F);
 162:./math/pprz_orientation_conversion.h **** }
 163:./math/pprz_orientation_conversion.h **** 
 164:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (float).
 165:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_f(struct OrientationReps* orientation, struct FloatRMat* rmat
 166:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_f, *rmat);
 167:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 168:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_F);
 169:./math/pprz_orientation_conversion.h **** }
 170:./math/pprz_orientation_conversion.h **** 
 171:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (float).
 172:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_f(struct OrientationReps* orientation, struct FloatEulers* 
 173:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_f, *eulers);
 174:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 175:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_F);
 176:./math/pprz_orientation_conversion.h **** }
 177:./math/pprz_orientation_conversion.h **** 
 178:./math/pprz_orientation_conversion.h **** 
 179:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude quaternion (int).
 180:./math/pprz_orientation_conversion.h **** static inline struct Int32Quat* orientationGetQuat_i(struct OrientationReps* orientation) {
 181:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_I))
 182:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_i(orientation);
 183:./math/pprz_orientation_conversion.h ****   return &orientation->quat_i;
 184:./math/pprz_orientation_conversion.h **** }
 185:./math/pprz_orientation_conversion.h **** 
 186:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude rotation matrix (int).
 187:./math/pprz_orientation_conversion.h **** static inline struct Int32RMat* orientationGetRMat_i(struct OrientationReps* orientation) {
 188:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_RMAT_I))
 2529              		.loc 5 188 0 is_stmt 1
 2530 0022 5A4D     		ldr	r5, .L115+4
 2531 0024 95F8A411 		ldrb	r1, [r5, #420]	@ zero_extendqisi2
 2532 0028 4A07     		lsls	r2, r1, #29
 2533 002a 03D4     		bmi	.L97
 189:./math/pprz_orientation_conversion.h ****     orientationCalcRMat_i(orientation);
 2534              		.loc 5 189 0
 2535 002c 05F5D270 		add	r0, r5, #420
 2536 0030 FFF7FEFF 		bl	orientationCalcRMat_i
 2537              	.LVL397:
 2538              	.L97:
 2539              	.LBE221:
 2540              	.LBE220:
 2541              	.LBE219:
 379:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { RMAT_ELMT((*ltp_to_body_rmat), 0, 0),
 2542              		.loc 2 379 0
 2543 0034 D5F8C461 		ldr	r6, [r5, #452]
 2544              	.LVL398:
 2545              	.LBB222:
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2546              		.loc 2 383 0
 2547 0038 04F5C952 		add	r2, r4, #6432
 2548              	.LBE222:
 380:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       RMAT_ELMT((*ltp_to_body_rmat), 0, 1) };
 2549              		.loc 2 380 0
 2550 003c D5F8C851 		ldr	r5, [r5, #456]
 2551              	.LVL399:
 2552              	.LBB223:
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2553              		.loc 2 383 0
 2554 0040 531C     		adds	r3, r2, #1
 2555              	.LVL400:
 2556              	.L98:
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2557              		.loc 2 383 0 is_stmt 0 discriminator 1
 2558 0042 43F24327 		movw	r7, #12867
 2559 0046 BB42     		cmp	r3, r7
 2560 0048 03DD     		ble	.L114
 2561              	.L99:
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2562              		.loc 2 383 0 discriminator 2
 2563 004a A3F5C947 		sub	r7, r3, #25728
 2564 004e FB1F     		subs	r3, r7, #7
 2565              	.LVL401:
 2566 0050 F7E7     		b	.L98
 2567              	.L114:
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2568              		.loc 2 383 0 discriminator 4
 2569 0052 41F62110 		movw	r0, #6433
 2570 0056 8342     		cmp	r3, r0
 2571 0058 4D49     		ldr	r1, .L115+8
 2572 005a 03DD     		ble	.L100
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2573              		.loc 2 383 0 discriminator 7
 2574 005c C3F54957 		rsb	r7, r3, #12864
 2575 0060 FB1C     		adds	r3, r7, #3
 2576              	.LVL402:
 2577 0062 0CE0     		b	.L101
 2578              	.L100:
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2579              		.loc 2 383 0 discriminator 8
 2580 0064 6FF4C952 		mvn	r2, #6432
 2581 0068 9342     		cmp	r3, r2
 2582 006a 06DA     		bge	.L102
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2583              		.loc 2 383 0 discriminator 9
 2584 006c C3F17F43 		rsb	r3, r3, #-16777216
 2585              	.LVL403:
 2586 0070 03F57F07 		add	r7, r3, #16711680
 2587 0074 07F54D43 		add	r3, r7, #52480
 2588 0078 BD33     		adds	r3, r3, #189
 2589              	.LVL404:
 2590              	.L102:
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2591              		.loc 2 383 0 discriminator 10
 2592 007a 002B     		cmp	r3, #0
 2593 007c 02DB     		blt	.L103
 2594              	.L101:
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2595              		.loc 2 383 0 discriminator 11
 2596 007e 31F91320 		ldrsh	r2, [r1, r3, lsl #1]
 2597              	.LVL405:
 2598 0082 03E0     		b	.L104
 2599              	.LVL406:
 2600              	.L103:
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2601              		.loc 2 383 0 discriminator 12
 2602 0084 5842     		negs	r0, r3
 2603 0086 31F91010 		ldrsh	r1, [r1, r0, lsl #1]
 2604 008a 4A42     		negs	r2, r1
 2605              	.LVL407:
 2606              	.L104:
 2607              	.LBE223:
 2608              	.LBB224:
 384:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2609              		.loc 2 384 0 is_stmt 1
 2610 008c 41F62113 		movw	r3, #6433
 2611              	.LVL408:
 2612 0090 9C42     		cmp	r4, r3
 2613 0092 3F48     		ldr	r0, .L115+8
 2614 0094 03DD     		ble	.L105
 384:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2615              		.loc 2 384 0 is_stmt 0 discriminator 7
 2616 0096 C4F54951 		rsb	r1, r4, #12864
 2617 009a 0331     		adds	r1, r1, #3
 2618              	.LVL409:
 2619 009c 09E0     		b	.L106
 2620              	.LVL410:
 2621              	.L105:
 384:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2622              		.loc 2 384 0 discriminator 8
 2623 009e 6FF4C951 		mvn	r1, #6432
 2624 00a2 8C42     		cmp	r4, r1
 2625 00a4 B6BF     		itet	lt
 2626 00a6 3849     		ldrlt	r1, .L115
 2627 00a8 2146     		movge	r1, r4
 2628 00aa C4EB0101 		rsblt	r1, r4, r1
 2629              	.LVL411:
 2630 00ae 0029     		cmp	r1, #0
 2631 00b0 02DB     		blt	.L108
 2632              	.L106:
 384:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2633              		.loc 2 384 0 discriminator 11
 2634 00b2 30F91130 		ldrsh	r3, [r0, r1, lsl #1]
 2635              	.LVL412:
 2636 00b6 03E0     		b	.L109
 2637              	.LVL413:
 2638              	.L108:
 384:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2639              		.loc 2 384 0 discriminator 12
 2640 00b8 4C42     		negs	r4, r1
 2641              	.LVL414:
 2642 00ba 30F91470 		ldrsh	r7, [r0, r4, lsl #1]
 2643 00be 7B42     		negs	r3, r7
 2644              	.LVL415:
 2645              	.L109:
 2646              	.LBE224:
 390:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (expected_ltp.x * heading_y - expected_ltp.y * heading_x)/(1<<INT32_ANGLE_FRAC)};
 2647              		.loc 2 390 0 is_stmt 1
 2648 00c0 03FB06F6 		mul	r6, r3, r6
 2649              	.LVL416:
 2650 00c4 02FB1565 		mls	r5, r2, r5, r6
 2651              	.LVL417:
 2652              	.LBB225:
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2653              		.loc 2 394 0
 2654 00c8 324E     		ldr	r6, .L115+12
 2655              	.LBE225:
 390:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (expected_ltp.x * heading_y - expected_ltp.y * heading_x)/(1<<INT32_ANGLE_FRAC)};
 2656              		.loc 2 390 0
 2657 00ca 4FF48052 		mov	r2, #4096
 2658              	.LVL418:
 2659 00ce 95FBF2F3 		sdiv	r3, r5, r2
 2660              	.LVL419:
 2661              	.LBB226:
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2662              		.loc 2 394 0
 2663 00d2 B06D     		ldr	r0, [r6, #88]
 2664 00d4 326D     		ldr	r2, [r6, #80]
 2665              	.LVL420:
 2666 00d6 F16D     		ldr	r1, [r6, #92]
 2667              	.LVL421:
 2668 00d8 756D     		ldr	r5, [r6, #84]
 2669              	.LVL422:
 2670 00da 00FB02F4 		mul	r4, r0, r2
 2671 00de 01FB05F7 		mul	r7, r1, r5
 2672 00e2 E413     		asrs	r4, r4, #15
 2673              	.LVL423:
 2674 00e4 5543     		muls	r5, r2, r5
 2675              	.LVL424:
 2676 00e6 C4EBE737 		rsb	r7, r4, r7, asr #15
 2677              	.LVL425:
 2678 00ea 5243     		muls	r2, r2, r2
 2679              	.LVL426:
 2680              	.LBE226:
 395:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2681              		.loc 2 395 0
 2682 00ec 5F43     		muls	r7, r3, r7
 2683              	.LVL427:
 2684              	.LBB227:
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2685              		.loc 2 394 0
 2686 00ee 4843     		muls	r0, r1, r0
 2687              	.LVL428:
 2688 00f0 4943     		muls	r1, r1, r1
 2689              	.LVL429:
 2690 00f2 D213     		asrs	r2, r2, #15
 2691              	.LBE227:
 395:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2692              		.loc 2 395 0
 2693 00f4 BC13     		asrs	r4, r7, #14
 2694              	.LVL430:
 2695              	.LBB228:
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2696              		.loc 2 394 0
 2697 00f6 A2F58047 		sub	r7, r2, #16384
 2698              	.LVL431:
 2699 00fa 07EBE131 		add	r1, r7, r1, asr #15
 2700              	.LBE228:
 395:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2701              		.loc 2 395 0
 2702 00fe 5943     		muls	r1, r3, r1
 2703              	.LBB229:
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ltp_to_imu_rmat, ahrs_impl.ltp_to_imu_quat);
 2704              		.loc 2 394 0
 2705 0100 ED13     		asrs	r5, r5, #15
 2706              	.LVL432:
 2707 0102 05EBE030 		add	r0, r5, r0, asr #15
 2708              	.LVL433:
 2709              	.LBE229:
 395:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2710              		.loc 2 395 0
 2711 0106 5843     		muls	r0, r3, r0
 2712              	.LVL434:
 401:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 2713              		.loc 2 401 0
 2714 0108 0422     		movs	r2, #4
 395:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2715              		.loc 2 395 0
 2716 010a 8F13     		asrs	r7, r1, #14
 2717              	.LVL435:
 401:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 2718              		.loc 2 401 0
 2719 010c B169     		ldr	r1, [r6, #24]
 2720 010e 94FBF2F5 		sdiv	r5, r4, r2
 2721              	.LVL436:
 2722 0112 4D19     		adds	r5, r1, r5
 395:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ltp_to_imu_rmat, residual_ltp);
 2723              		.loc 2 395 0
 2724 0114 8013     		asrs	r0, r0, #14
 2725              	.LVL437:
 402:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/4;
 2726              		.loc 2 402 0
 2727 0116 F169     		ldr	r1, [r6, #28]
 401:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 2728              		.loc 2 401 0
 2729 0118 B561     		str	r5, [r6, #24]
 402:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/4;
 2730              		.loc 2 402 0
 2731 011a 90FBF2F5 		sdiv	r5, r0, r2
 2732 011e 4919     		adds	r1, r1, r5
 2733 0120 F161     		str	r1, [r6, #28]
 403:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/4;
 2734              		.loc 2 403 0
 2735 0122 316A     		ldr	r1, [r6, #32]
 2736 0124 97FBF2F2 		sdiv	r2, r7, r2
 2737 0128 8A18     		adds	r2, r1, r2
 2738              	.LBB230:
 413:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(sin_max_angle_deviation, TRIG_BFP_OF_REAL(RadOfDeg(5.)));
 2739              		.loc 2 413 0
 2740 012a 1949     		ldr	r1, .L115+8
 2741              	.LBE230:
 403:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/4;
 2742              		.loc 2 403 0
 2743 012c 3262     		str	r2, [r6, #32]
 2744              	.LVL438:
 2745              	.LBB231:
 413:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(sin_max_angle_deviation, TRIG_BFP_OF_REAL(RadOfDeg(5.)));
 2746              		.loc 2 413 0
 2747 012e B1F92A2B 		ldrsh	r2, [r1, #2858]
 2748              	.LBE231:
 414:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ABS(residual_ltp.z) < sin_max_angle_deviation)
 2749              		.loc 2 414 0
 2750 0132 002B     		cmp	r3, #0
 2751 0134 B8BF     		it	lt
 2752 0136 5B42     		rsblt	r3, r3, #0
 2753              	.LVL439:
 2754 0138 9342     		cmp	r3, r2
 2755 013a 23DA     		bge	.L92
 419:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 2756              		.loc 2 419 0
 2757 013c 2303     		lsls	r3, r4, #12
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<INT32_ANGLE_FRAC);
 2758              		.loc 2 420 0
 2759 013e 0203     		lsls	r2, r0, #12
 421:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 2760              		.loc 2 421 0
 2761 0140 3F03     		lsls	r7, r7, #12
 2762              	.LVL440:
 419:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 2763              		.loc 2 419 0
 2764 0142 D6E90E45 		ldrd	r4, [r6, #56]
 2765              	.LVL441:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<INT32_ANGLE_FRAC);
 2766              		.loc 2 420 0
 2767 0146 D6E91001 		ldrd	r0, [r6, #64]
 2768              	.LVL442:
 419:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 2769              		.loc 2 419 0
 2770 014a E41A     		subs	r4, r4, r3
 2771 014c 65EBE375 		sbc	r5, r5, r3, asr #31
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<INT32_ANGLE_FRAC);
 2772              		.loc 2 420 0
 2773 0150 801A     		subs	r0, r0, r2
 2774 0152 61EBE271 		sbc	r1, r1, r2, asr #31
 421:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 2775              		.loc 2 421 0
 2776 0156 D6E91223 		ldrd	r2, [r6, #72]
 2777 015a D21B     		subs	r2, r2, r7
 2778 015c 63EBE773 		sbc	r3, r3, r7, asr #31
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<INT32_ANGLE_FRAC);
 2779              		.loc 2 420 0
 2780 0160 C6E91001 		strd	r0, [r6, #64]
 421:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 2781              		.loc 2 421 0
 2782 0164 C6E91223 		strd	r2, [r6, #72]
 419:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 2783              		.loc 2 419 0
 2784 0168 C6E90E45 		strd	r4, [r6, #56]
 423:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2785              		.loc 2 423 0
 2786 016c 000F     		lsrs	r0, r0, #28
 2787 016e 240F     		lsrs	r4, r4, #28
 2788 0170 120F     		lsrs	r2, r2, #28
 2789 0172 44EA0514 		orr	r4, r4, r5, lsl #4
 2790 0176 40EA0111 		orr	r1, r0, r1, lsl #4
 2791 017a 42EA0313 		orr	r3, r2, r3, lsl #4
 2792 017e 3460     		str	r4, [r6, #0]
 2793 0180 7160     		str	r1, [r6, #4]
 2794 0182 B360     		str	r3, [r6, #8]
 2795              	.L92:
 2796 0184 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2797              	.L116:
 2798 0186 00BF     		.align	2
 2799              	.L115:
 2800 0188 BDCDFFFF 		.word	-12867
 2801 018c 00000000 		.word	state
 2802 0190 00000000 		.word	pprz_trig_int
 2803 0194 00000000 		.word	.LANCHOR0
 2804              		.cfi_endproc
 2805              	.LFE135:
 2807              		.section	.text.ahrs_realign_heading,"ax",%progbits
 2808              		.align	1
 2809              		.global	ahrs_realign_heading
 2810              		.thumb
 2811              		.thumb_func
 2813              	ahrs_realign_heading:
 2814              	.LFB136:
 427:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_realign_heading(int32_t heading) {
 2815              		.loc 2 427 0
 2816              		.cfi_startproc
 2817              		@ args = 0, pretend = 0, frame = 0
 2818              		@ frame_needed = 0, uses_anonymous_args = 0
 2819              	.LVL443:
 2820 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2821              	.LCFI7:
 2822              		.cfi_def_cfa_offset 24
 2823              		.cfi_offset 4, -24
 2824              		.cfi_offset 5, -20
 2825              		.cfi_offset 6, -16
 2826              		.cfi_offset 7, -12
 2827              		.cfi_offset 8, -8
 2828              		.cfi_offset 14, -4
 2829              	.LBB251:
 2830              	.LBB252:
 2831              	.LBB253:
 181:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_I))
 2832              		.loc 5 181 0
 2833 0004 9D4C     		ldr	r4, .L161
 2834              	.LBE253:
 2835              	.LBE252:
 2836              	.LBE251:
 427:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_realign_heading(int32_t heading) {
 2837              		.loc 2 427 0
 2838 0006 0546     		mov	r5, r0
 2839              	.LBB258:
 2840              	.LBB256:
 181:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_I))
 2841              		.loc 5 181 0
 2842 0008 94F8A431 		ldrb	r3, [r4, #420]	@ zero_extendqisi2
 2843              	.LBB254:
 2844 000c D907     		lsls	r1, r3, #31
 2845 000e 03D4     		bmi	.L118
 182:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_i(orientation);
 2846              		.loc 5 182 0
 2847 0010 04F5D270 		add	r0, r4, #420
 2848              	.LVL444:
 2849 0014 FFF7FEFF 		bl	orientationCalcQuat_i
 2850              	.LVL445:
 2851              	.L118:
 2852              	.LBE254:
 2853              	.LBE256:
 2854              	.LBE258:
 2855              	.LBB259:
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2856              		.loc 2 435 0
 2857 0018 0220     		movs	r0, #2
 2858 001a 95FBF0F0 		sdiv	r0, r5, r0
 2859              	.LBE259:
 2860              	.LBB260:
 2861              	.LBB257:
 2862              	.LBB255:
 429:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat ltp_to_body_quat = *stateGetNedToBodyQuat_i();
 2863              		.loc 2 429 0
 2864 001e D4F8A861 		ldr	r6, [r4, #424]
 2865              	.LVL446:
 2866 0022 D4F8ACC1 		ldr	ip, [r4, #428]
 2867              	.LVL447:
 2868 0026 D4F8B071 		ldr	r7, [r4, #432]
 2869              	.LVL448:
 2870 002a D4F8B421 		ldr	r2, [r4, #436]
 2871              	.LVL449:
 2872              	.LBE255:
 2873              	.LBE257:
 2874              	.LBE260:
 2875              	.LBB261:
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2876              		.loc 2 435 0
 2877 002e 0346     		mov	r3, r0
 2878              	.LVL450:
 2879              	.L119:
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2880              		.loc 2 435 0 is_stmt 0 discriminator 1
 2881 0030 43F24321 		movw	r1, #12867
 2882 0034 8B42     		cmp	r3, r1
 2883 0036 03DD     		ble	.L157
 2884              	.L120:
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2885              		.loc 2 435 0 discriminator 2
 2886 0038 A3F5C945 		sub	r5, r3, #25728
 2887 003c EB1F     		subs	r3, r5, #7
 2888              	.LVL451:
 2889 003e F7E7     		b	.L119
 2890              	.LVL452:
 2891              	.L157:
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2892              		.loc 2 435 0 discriminator 4
 2893 0040 8F4D     		ldr	r5, .L161+4
 2894 0042 AB42     		cmp	r3, r5
 2895 0044 03DA     		bge	.L159
 2896              	.L122:
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2897              		.loc 2 435 0 discriminator 5
 2898 0046 03F5C943 		add	r3, r3, #25728
 2899              	.LVL453:
 2900 004a 0733     		adds	r3, r3, #7
 2901              	.LVL454:
 2902 004c F8E7     		b	.L157
 2903              	.LVL455:
 2904              	.L159:
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2905              		.loc 2 435 0 discriminator 6
 2906 004e 41F62114 		movw	r4, #6433
 2907 0052 A342     		cmp	r3, r4
 2908 0054 8B49     		ldr	r1, .L161+8
 2909 0056 03DD     		ble	.L123
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2910              		.loc 2 435 0 discriminator 7
 2911 0058 C3F54954 		rsb	r4, r3, #12864
 2912 005c E31C     		adds	r3, r4, #3
 2913              	.LVL456:
 2914 005e 0CE0     		b	.L124
 2915              	.L123:
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2916              		.loc 2 435 0 discriminator 8
 2917 0060 6FF4C955 		mvn	r5, #6432
 2918 0064 AB42     		cmp	r3, r5
 2919 0066 06DA     		bge	.L125
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2920              		.loc 2 435 0 discriminator 9
 2921 0068 C3F17F43 		rsb	r3, r3, #-16777216
 2922              	.LVL457:
 2923 006c 03F57F04 		add	r4, r3, #16711680
 2924 0070 04F54D43 		add	r3, r4, #52480
 2925 0074 BD33     		adds	r3, r3, #189
 2926              	.LVL458:
 2927              	.L125:
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2928              		.loc 2 435 0 discriminator 10
 2929 0076 002B     		cmp	r3, #0
 2930 0078 02DB     		blt	.L126
 2931              	.L124:
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2932              		.loc 2 435 0 discriminator 11
 2933 007a 31F91350 		ldrsh	r5, [r1, r3, lsl #1]
 2934              	.LVL459:
 2935 007e 03E0     		b	.L127
 2936              	.LVL460:
 2937              	.L126:
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 2938              		.loc 2 435 0 discriminator 12
 2939 0080 5D42     		negs	r5, r3
 2940 0082 31F91510 		ldrsh	r1, [r1, r5, lsl #1]
 2941 0086 4D42     		negs	r5, r1
 2942              	.LVL461:
 2943              	.L127:
 2944              	.LBE261:
 2945              	.LBB262:
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 2946              		.loc 2 436 0 is_stmt 1
 2947 0088 00F5C950 		add	r0, r0, #6432
 2948 008c 0130     		adds	r0, r0, #1
 2949              	.LVL462:
 2950              	.L128:
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 2951              		.loc 2 436 0 is_stmt 0 discriminator 1
 2952 008e 43F24323 		movw	r3, #12867
 2953 0092 9842     		cmp	r0, r3
 2954 0094 03DD     		ble	.L158
 2955              	.L129:
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 2956              		.loc 2 436 0 discriminator 2
 2957 0096 A0F5C941 		sub	r1, r0, #25728
 2958 009a C81F     		subs	r0, r1, #7
 2959              	.LVL463:
 2960 009c F7E7     		b	.L128
 2961              	.LVL464:
 2962              	.L158:
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 2963              		.loc 2 436 0 discriminator 4
 2964 009e 7849     		ldr	r1, .L161+4
 2965 00a0 8842     		cmp	r0, r1
 2966 00a2 03DA     		bge	.L160
 2967              	.L131:
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 2968              		.loc 2 436 0 discriminator 5
 2969 00a4 00F5C944 		add	r4, r0, #25728
 2970 00a8 E01D     		adds	r0, r4, #7
 2971              	.LVL465:
 2972 00aa F8E7     		b	.L158
 2973              	.LVL466:
 2974              	.L160:
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 2975              		.loc 2 436 0 discriminator 6
 2976 00ac 41F62114 		movw	r4, #6433
 2977 00b0 A042     		cmp	r0, r4
 2978 00b2 744B     		ldr	r3, .L161+8
 2979 00b4 03DD     		ble	.L132
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 2980              		.loc 2 436 0 discriminator 7
 2981 00b6 C0F54954 		rsb	r4, r0, #12864
 2982 00ba E01C     		adds	r0, r4, #3
 2983              	.LVL467:
 2984 00bc 0CE0     		b	.L133
 2985              	.L132:
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 2986              		.loc 2 436 0 discriminator 8
 2987 00be 6FF4C951 		mvn	r1, #6432
 2988 00c2 8842     		cmp	r0, r1
 2989 00c4 06DA     		bge	.L134
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 2990              		.loc 2 436 0 discriminator 9
 2991 00c6 C0F17F40 		rsb	r0, r0, #-16777216
 2992              	.LVL468:
 2993 00ca 00F57F04 		add	r4, r0, #16711680
 2994 00ce 04F54D40 		add	r0, r4, #52480
 2995 00d2 BD30     		adds	r0, r0, #189
 2996              	.LVL469:
 2997              	.L134:
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 2998              		.loc 2 436 0 discriminator 10
 2999 00d4 0028     		cmp	r0, #0
 3000 00d6 02DB     		blt	.L135
 3001              	.L133:
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3002              		.loc 2 436 0 discriminator 11
 3003 00d8 33F91000 		ldrsh	r0, [r3, r0, lsl #1]
 3004              	.LVL470:
 3005 00dc 03E0     		b	.L136
 3006              	.LVL471:
 3007              	.L135:
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3008              		.loc 2 436 0 discriminator 12
 3009 00de 4142     		negs	r1, r0
 3010 00e0 33F91130 		ldrsh	r3, [r3, r1, lsl #1]
 3011 00e4 5842     		negs	r0, r3
 3012              	.LVL472:
 3013              	.L136:
 3014              	.LBE262:
 3015              	.LBB263:
 3016              	.LBB264:
 443:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3017              		.loc 2 443 0 is_stmt 1
 3018 00e6 02FB02F1 		mul	r1, r2, r2
 3019 00ea 06FB0613 		mla	r3, r6, r6, r1
 3020              	.LVL473:
 3021 00ee 93B1     		cbz	r3, .L137
 3022              	.LVL474:
 3023              	.LBB265:
 443:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3024              		.loc 2 443 0 is_stmt 0 discriminator 2
 3025 00f0 1946     		mov	r1, r3
 3026 00f2 4FF02808 		mov	r8, #40
 3027              	.LVL475:
 3028              	.L139:
 443:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3029              		.loc 2 443 0 discriminator 3
 3030 00f6 B3FBF1F4 		udiv	r4, r3, r1
 3031              	.LVL476:
 3032 00fa 6418     		adds	r4, r4, r1
 3033              	.LVL477:
 3034 00fc 6408     		lsrs	r4, r4, #1
 3035              	.LVL478:
 3036 00fe 091B     		subs	r1, r1, r4
 3037              	.LVL479:
 3038 0100 0129     		cmp	r1, #1
 3039 0102 01D8     		bhi	.L138
 3040              	.L140:
 443:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3041              		.loc 2 443 0
 3042 0104 2346     		mov	r3, r4
 3043              	.LVL480:
 3044 0106 06E0     		b	.L137
 3045              	.LVL481:
 3046              	.L138:
 3047 0108 08F1FF38 		add	r8, r8, #-1
 443:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3048              		.loc 2 443 0 discriminator 4
 3049 010c 18F0FF08 		ands	r8, r8, #255
 3050 0110 2146     		mov	r1, r4
 3051 0112 F0D1     		bne	.L139
 3052              	.LVL482:
 3053 0114 F6E7     		b	.L140
 3054              	.LVL483:
 3055              	.L137:
 3056              	.LBE265:
 3057              	.LBE264:
 443:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3058              		.loc 2 443 0 discriminator 6
 3059 0116 D103     		lsls	r1, r2, #15
 3060 0118 F403     		lsls	r4, r6, #15
 3061 011a 94FBF3F4 		sdiv	r4, r4, r3
 3062              	.LVL484:
 3063 011e 91FBF3F3 		sdiv	r3, r1, r3
 3064              	.LVL485:
 3065              	.LBE263:
 447:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3066              		.loc 2 447 0 is_stmt 1 discriminator 6
 3067 0122 05FB03F1 		mul	r1, r5, r3
 3068 0126 00FB0411 		mla	r1, r0, r4, r1
 3069              	.LVL486:
 3070 012a 6C43     		muls	r4, r5, r4
 3071              	.LVL487:
 3072 012c 00FB1345 		mls	r5, r0, r3, r4
 3073              	.LVL488:
 3074 0130 EC13     		asrs	r4, r5, #15
 3075              	.LVL489:
 3076 0132 C913     		asrs	r1, r1, #15
 3077              	.LVL490:
 3078 0134 01D5     		bpl	.L141
 447:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3079              		.loc 2 447 0 is_stmt 0 discriminator 1
 3080 0136 4942     		negs	r1, r1
 3081              	.LVL491:
 3082 0138 6442     		negs	r4, r4
 3083              	.LVL492:
 3084              	.L141:
 3085              	.LBB266:
 3086              	.LBB267:
 447:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3087              		.loc 2 447 0 discriminator 2
 3088 013a 04FB04F0 		mul	r0, r4, r4
 3089              	.LVL493:
 3090 013e 01FB0105 		mla	r5, r1, r1, r0
 3091              	.LVL494:
 3092 0142 95B1     		cbz	r5, .L142
 3093              	.LVL495:
 3094              	.LBB268:
 447:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3095              		.loc 2 447 0 discriminator 4
 3096 0144 2846     		mov	r0, r5
 3097 0146 4FF02808 		mov	r8, #40
 3098              	.LVL496:
 3099              	.L144:
 447:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3100              		.loc 2 447 0 discriminator 5
 3101 014a B5FBF0F3 		udiv	r3, r5, r0
 3102              	.LVL497:
 3103 014e 1B18     		adds	r3, r3, r0
 3104              	.LVL498:
 3105 0150 5B08     		lsrs	r3, r3, #1
 3106              	.LVL499:
 3107 0152 C01A     		subs	r0, r0, r3
 3108              	.LVL500:
 3109 0154 0128     		cmp	r0, #1
 3110 0156 01D8     		bhi	.L143
 3111              	.L145:
 447:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3112              		.loc 2 447 0
 3113 0158 1D46     		mov	r5, r3
 3114              	.LVL501:
 3115 015a 06E0     		b	.L142
 3116              	.LVL502:
 3117              	.L143:
 3118 015c 08F1FF38 		add	r8, r8, #-1
 447:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3119              		.loc 2 447 0 discriminator 6
 3120 0160 18F0FF08 		ands	r8, r8, #255
 3121 0164 1846     		mov	r0, r3
 3122 0166 F0D1     		bne	.L144
 3123              	.LVL503:
 3124 0168 F6E7     		b	.L145
 3125              	.LVL504:
 3126              	.L142:
 3127              	.LBE268:
 3128              	.LBE267:
 447:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3129              		.loc 2 447 0 discriminator 8
 3130 016a C903     		lsls	r1, r1, #15
 3131              	.LVL505:
 3132 016c 91FBF5F1 		sdiv	r1, r1, r5
 3133              	.LVL506:
 3134 0170 E403     		lsls	r4, r4, #15
 3135              	.LVL507:
 3136 0172 94FBF5F3 		sdiv	r3, r4, r5
 3137              	.LVL508:
 3138              	.LBE266:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 3139              		.loc 2 451 0 is_stmt 1 discriminator 8
 3140 0176 06FB01F0 		mul	r0, r6, r1
 3141 017a 0CFB01F4 		mul	r4, ip, r1
 3142 017e 02FB1305 		mls	r5, r2, r3, r0
 3143              	.LVL509:
 3144 0182 07FB1340 		mls	r0, r7, r3, r4
 3145 0186 C413     		asrs	r4, r0, #15
 3146              	.LVL510:
 3147 0188 0CFB03F0 		mul	r0, ip, r3
 3148 018c 7343     		muls	r3, r6, r3
 3149              	.LVL511:
 3150 018e 07FB0107 		mla	r7, r7, r1, r0
 3151              	.LVL512:
 3152 0192 02FB0132 		mla	r2, r2, r1, r3
 3153              	.LVL513:
 3154 0196 F813     		asrs	r0, r7, #15
 3155              	.LVL514:
 3156 0198 D313     		asrs	r3, r2, #15
 3157              	.LVL515:
 3158 019a ED13     		asrs	r5, r5, #15
 3159              	.LVL516:
 3160 019c 03D5     		bpl	.L146
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 3161              		.loc 2 451 0 is_stmt 0 discriminator 1
 3162 019e 6D42     		negs	r5, r5
 3163              	.LVL517:
 3164 01a0 6442     		negs	r4, r4
 3165              	.LVL518:
 3166 01a2 4042     		negs	r0, r0
 3167              	.LVL519:
 3168 01a4 5B42     		negs	r3, r3
 3169              	.LVL520:
 3170              	.L146:
 3171              	.LBB269:
 3172              	.LBB270:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 3173              		.loc 2 451 0 discriminator 2
 3174 01a6 04FB04F6 		mul	r6, r4, r4
 3175              	.LVL521:
 3176 01aa 05FB0561 		mla	r1, r5, r5, r6
 3177              	.LVL522:
 3178 01ae 00FB0017 		mla	r7, r0, r0, r1
 3179 01b2 03FB0372 		mla	r2, r3, r3, r7
 3180              	.LVL523:
 3181 01b6 72B1     		cbz	r2, .L153
 3182              	.LVL524:
 3183              	.LBB271:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 3184              		.loc 2 451 0 discriminator 4
 3185 01b8 1646     		mov	r6, r2
 3186 01ba 2827     		movs	r7, #40
 3187              	.LVL525:
 3188              	.L149:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 3189              		.loc 2 451 0 discriminator 5
 3190 01bc B2FBF6F1 		udiv	r1, r2, r6
 3191              	.LVL526:
 3192 01c0 8919     		adds	r1, r1, r6
 3193              	.LVL527:
 3194 01c2 4908     		lsrs	r1, r1, #1
 3195              	.LVL528:
 3196 01c4 761A     		subs	r6, r6, r1
 3197              	.LVL529:
 3198 01c6 012E     		cmp	r6, #1
 3199 01c8 06D9     		bls	.L147
 3200 01ca 013F     		subs	r7, r7, #1
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 3201              		.loc 2 451 0 discriminator 6
 3202 01cc 17F0FF07 		ands	r7, r7, #255
 3203 01d0 0E46     		mov	r6, r1
 3204 01d2 F3D1     		bne	.L149
 3205 01d4 00E0     		b	.L147
 3206              	.LVL530:
 3207              	.L153:
 3208              	.LBE271:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 3209              		.loc 2 451 0
 3210 01d6 1146     		mov	r1, r2
 3211              	.L147:
 3212              	.LVL531:
 3213              	.LBE270:
 3214              	.LBE269:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs_impl.ltp_to_imu_quat, ltp_to_body_quat, imu.body_to_imu_quat);
 3215              		.loc 2 455 0 is_stmt 1 discriminator 8
 3216 01d8 2B4F     		ldr	r7, .L161+12
 3217              	.LBB272:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 3218              		.loc 2 451 0 discriminator 8
 3219 01da ED03     		lsls	r5, r5, #15
 3220              	.LVL532:
 3221 01dc 95FBF1F5 		sdiv	r5, r5, r1
 3222              	.LVL533:
 3223              	.LBE272:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs_impl.ltp_to_imu_quat, ltp_to_body_quat, imu.body_to_imu_quat);
 3224              		.loc 2 455 0 discriminator 8
 3225 01e0 07F18402 		add	r2, r7, #132
 3226              	.LVL534:
 3227 01e4 92E84410 		ldmia	r2, {r2, r6, ip}
 3228              	.LVL535:
 3229 01e8 02FB05F8 		mul	r8, r2, r5
 3230              	.LBB273:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 3231              		.loc 2 451 0 discriminator 8
 3232 01ec E403     		lsls	r4, r4, #15
 3233              	.LVL536:
 3234 01ee 94FBF1F4 		sdiv	r4, r4, r1
 3235              	.LVL537:
 3236              	.LBE273:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs_impl.ltp_to_imu_quat, ltp_to_body_quat, imu.body_to_imu_quat);
 3237              		.loc 2 455 0 discriminator 8
 3238 01f2 06FB1488 		mls	r8, r6, r4, r8
 3239              	.LBB274:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 3240              		.loc 2 451 0 discriminator 8
 3241 01f6 C003     		lsls	r0, r0, #15
 3242              	.LVL538:
 3243 01f8 90FBF1F0 		sdiv	r0, r0, r1
 3244              	.LVL539:
 3245              	.LBE274:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs_impl.ltp_to_imu_quat, ltp_to_body_quat, imu.body_to_imu_quat);
 3246              		.loc 2 455 0 discriminator 8
 3247 01fc 0CFB1088 		mls	r8, ip, r0, r8
 3248 0200 D7F89070 		ldr	r7, [r7, #144]
 3249              	.LBB275:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ltp_to_body_quat);
 3250              		.loc 2 451 0 discriminator 8
 3251 0204 DB03     		lsls	r3, r3, #15
 3252              	.LVL540:
 3253 0206 93FBF1F1 		sdiv	r1, r3, r1
 3254              	.LVL541:
 3255              	.LBE275:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs_impl.ltp_to_imu_quat, ltp_to_body_quat, imu.body_to_imu_quat);
 3256              		.loc 2 455 0 discriminator 8
 3257 020a 07FB1188 		mls	r8, r7, r1, r8
 3258 020e 1F4B     		ldr	r3, .L161+16
 3259 0210 4FEAE838 		asr	r8, r8, #15
 3260 0214 C3F85080 		str	r8, [r3, #80]
 3261 0218 02FB04F8 		mul	r8, r2, r4
 3262 021c 06FB0588 		mla	r8, r6, r5, r8
 3263 0220 07FB0088 		mla	r8, r7, r0, r8
 3264 0224 0CFB1188 		mls	r8, ip, r1, r8
 3265 0228 4FEAE838 		asr	r8, r8, #15
 3266 022c C3F85480 		str	r8, [r3, #84]
 3267 0230 0CFB05F8 		mul	r8, ip, r5
 3268 0234 0CFB04FC 		mul	ip, ip, r4
 3269 0238 07FB1488 		mls	r8, r7, r4, r8
 3270 023c 07FB05C7 		mla	r7, r7, r5, ip
 3271 0240 02FB0088 		mla	r8, r2, r0, r8
 3272 0244 06FB0188 		mla	r8, r6, r1, r8
 3273 0248 06FB1076 		mls	r6, r6, r0, r7
 3274 024c 02FB0162 		mla	r2, r2, r1, r6
 3275 0250 D213     		asrs	r2, r2, #15
 3276 0252 DA65     		str	r2, [r3, #92]
 3277              	.LVL542:
 3278              	.LBB276:
 3279              	.LBB277:
 3280              	.LBB278:
 138:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 3281              		.loc 5 138 0 discriminator 8
 3282 0254 094A     		ldr	r2, .L161
 3283              	.LBE278:
 3284              	.LBE277:
 3285              	.LBE276:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs_impl.ltp_to_imu_quat, ltp_to_body_quat, imu.body_to_imu_quat);
 3286              		.loc 2 455 0 discriminator 8
 3287 0256 4FEAE838 		asr	r8, r8, #15
 3288              	.LBB283:
 3289              	.LBB281:
 3290              	.LBB279:
 138:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 3291              		.loc 5 138 0 discriminator 8
 3292 025a C2F8B001 		str	r0, [r2, #432]
 140:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_I);
 3293              		.loc 5 140 0 discriminator 8
 3294 025e 0120     		movs	r0, #1
 3295              	.LVL543:
 3296              	.LBE279:
 3297              	.LBE281:
 3298              	.LBE283:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs_impl.ltp_to_imu_quat, ltp_to_body_quat, imu.body_to_imu_quat);
 3299              		.loc 2 455 0 discriminator 8
 3300 0260 C3F85880 		str	r8, [r3, #88]
 3301              	.LBB284:
 3302              	.LBB282:
 3303              	.LBB280:
 138:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 3304              		.loc 5 138 0 discriminator 8
 3305 0264 C2F8A851 		str	r5, [r2, #424]
 3306 0268 C2F8AC41 		str	r4, [r2, #428]
 3307 026c C2F8B411 		str	r1, [r2, #436]
 140:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_I);
 3308              		.loc 5 140 0 discriminator 8
 3309 0270 82F8A401 		strb	r0, [r2, #420]
 3310              	.LBE280:
 3311              	.LBE282:
 3312              	.LBE284:
 460:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = TRUE;
 3313              		.loc 2 460 0 discriminator 8
 3314 0274 83F87300 		strb	r0, [r3, #115]
 3315 0278 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3316              	.L162:
 3317              		.align	2
 3318              	.L161:
 3319 027c 00000000 		.word	state
 3320 0280 BDCDFFFF 		.word	-12867
 3321 0284 00000000 		.word	pprz_trig_int
 3322 0288 00000000 		.word	imu
 3323 028c 00000000 		.word	.LANCHOR0
 3324              		.cfi_endproc
 3325              	.LFE136:
 3327              		.global	ahrs_impl
 3328              		.section	.bss.ahrs_impl,"aw",%nobits
 3329              		.align	3
 3330              		.set	.LANCHOR0,. + 0
 3333              	ahrs_impl:
 3334 0000 00000000 		.space	120
 3334      00000000 
 3334      00000000 
 3334      00000000 
 3334      00000000 
 3335              		.section	.bss.filtered_gravity_measurement.6888,"aw",%nobits
 3336              		.align	2
 3337              		.set	.LANCHOR1,. + 0
 3340              	filtered_gravity_measurement.6888:
 3341 0000 00000000 		.space	12
 3341      00000000 
 3341      00000000 
 3342              		.text
 3343              	.Letext0:
 3344              		.file 6 "/opt/local/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../arm-none-eabi/include/stdint.h"
 3345              		.file 7 "/Users/tony-yi/git/paparazzi_local/sw/include/std.h"
 3346              		.file 8 "/opt/local/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../arm-none-eabi/include/stdlib.h"
 3347              		.file 9 "./math/pprz_algebra_int.h"
 3348              		.file 10 "./math/pprz_algebra_float.h"
 3349              		.file 11 "./math/pprz_geodetic_int.h"
 3350              		.file 12 "./math/pprz_geodetic_float.h"
 3351              		.file 13 "./subsystems/ahrs.h"
 3352              		.file 14 "./subsystems/ahrs/ahrs_int_cmpl_quat.h"
 3353              		.file 15 "./subsystems/ahrs/ahrs_aligner.h"
 3354              		.file 16 "./subsystems/imu.h"
 3355              		.file 17 "./mcu_periph/spi.h"
 3356              		.file 18 "./peripherals/mpu60x0_regs.h"
 3357              		.file 19 "./peripherals/mpu60x0.h"
 3358              		.file 20 "./peripherals/mpu60x0_spi.h"
 3359              		.file 21 "./subsystems/imu/imu_aspirin_2_spi.h"
 3360              		.file 22 "./mcu_periph/sys_time.h"
 3361              		.file 23 "./subsystems/gps.h"
 3362              		.file 24 "./math/pprz_trig_int.h"
 3363              		.file 25 "/opt/local/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../arm-none-eabi/include/math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ahrs_int_cmpl_quat.c
/var/tmp//ccZra2qn.s:19     .text.stateGetBodyRates_i:0000000000000000 $t
/var/tmp//ccZra2qn.s:23     .text.stateGetBodyRates_i:0000000000000000 stateGetBodyRates_i
/var/tmp//ccZra2qn.s:50     .text.stateGetBodyRates_i:0000000000000014 $d
/var/tmp//ccZra2qn.s:56     .text.ahrs_init:0000000000000000 $t
/var/tmp//ccZra2qn.s:61     .text.ahrs_init:0000000000000000 ahrs_init
/var/tmp//ccZra2qn.s:125    .text.ahrs_init:0000000000000068 $d
/var/tmp//ccZra2qn.s:148    .text.ahrs_align:0000000000000000 $t
/var/tmp//ccZra2qn.s:153    .text.ahrs_align:0000000000000000 ahrs_align
/var/tmp//ccZra2qn.s:429    .text.ahrs_align:0000000000000184 $d
/var/tmp//ccZra2qn.s:437    .text.ahrs_align:0000000000000194 $t
/var/tmp//ccZra2qn.s:875    .text.ahrs_align:0000000000000448 $d
/var/tmp//ccZra2qn.s:888    .text.ahrs_align:000000000000046c $t
/var/tmp//ccZra2qn.s:1351   .text.ahrs_align:000000000000073c $d
/var/tmp//ccZra2qn.s:1360   .text.ahrs_propagate:0000000000000000 $t
/var/tmp//ccZra2qn.s:1365   .text.ahrs_propagate:0000000000000000 ahrs_propagate
/var/tmp//ccZra2qn.s:1814   .text.ahrs_propagate:0000000000000224 $d
/var/tmp//ccZra2qn.s:1823   .text.ahrs_update_accel:0000000000000000 $t
/var/tmp//ccZra2qn.s:1828   .text.ahrs_update_accel:0000000000000000 ahrs_update_accel
/var/tmp//ccZra2qn.s:2196   .text.ahrs_update_accel:0000000000000230 $d
/var/tmp//ccZra2qn.s:2208   .text.ahrs_update_mag:0000000000000000 $t
/var/tmp//ccZra2qn.s:2213   .text.ahrs_update_mag:0000000000000000 ahrs_update_mag
/var/tmp//ccZra2qn.s:2454   .text.ahrs_update_mag:0000000000000134 $d
/var/tmp//ccZra2qn.s:2460   .text.ahrs_update_gps:0000000000000000 $t
/var/tmp//ccZra2qn.s:2465   .text.ahrs_update_gps:0000000000000000 ahrs_update_gps
/var/tmp//ccZra2qn.s:2477   .text.ahrs_update_heading:0000000000000000 $t
/var/tmp//ccZra2qn.s:2482   .text.ahrs_update_heading:0000000000000000 ahrs_update_heading
/var/tmp//ccZra2qn.s:2800   .text.ahrs_update_heading:0000000000000188 $d
/var/tmp//ccZra2qn.s:2808   .text.ahrs_realign_heading:0000000000000000 $t
/var/tmp//ccZra2qn.s:2813   .text.ahrs_realign_heading:0000000000000000 ahrs_realign_heading
/var/tmp//ccZra2qn.s:3319   .text.ahrs_realign_heading:000000000000027c $d
/var/tmp//ccZra2qn.s:3333   .bss.ahrs_impl:0000000000000000 ahrs_impl
/var/tmp//ccZra2qn.s:3329   .bss.ahrs_impl:0000000000000000 $d
/var/tmp//ccZra2qn.s:3336   .bss.filtered_gravity_measurement.6888:0000000000000000 $d
/var/tmp//ccZra2qn.s:3340   .bss.filtered_gravity_measurement.6888:0000000000000000 filtered_gravity_measurement.6888
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
stateCalcBodyRates_i
state
ahrs
imu
__aeabi_i2f
__aeabi_fmul
__aeabi_fadd
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2f
__aeabi_dsub
__aeabi_dcmplt
__aeabi_dcmpgt
__aeabi_fsub
__aeabi_fcmpgt
__aeabi_fdiv
__aeabi_dadd
__aeabi_fcmplt
__aeabi_f2iz
sqrtf
ahrs_aligner
ldiv
__aeabi_i2d
__aeabi_d2iz
orientationCalcRMat_i
pprz_trig_int
orientationCalcQuat_i
