   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stabilization_attitude_rc_setpoint.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.stateGetNedToBodyEulers_f,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	stateGetNedToBodyEulers_f:
  24              	.LFB98:
  25              		.file 1 "./state.h"
   1:./state.h     **** /*
   2:./state.h     ****  * Copyright (C) 2011-2012 Felix Ruess <felix.ruess@gmail.com>
   3:./state.h     ****  *
   4:./state.h     ****  * This file is part of paparazzi.
   5:./state.h     ****  *
   6:./state.h     ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./state.h     ****  * it under the terms of the GNU General Public License as published by
   8:./state.h     ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./state.h     ****  * any later version.
  10:./state.h     ****  *
  11:./state.h     ****  * paparazzi is distributed in the hope that it will be useful,
  12:./state.h     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./state.h     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./state.h     ****  * GNU General Public License for more details.
  15:./state.h     ****  *
  16:./state.h     ****  * You should have received a copy of the GNU General Public License
  17:./state.h     ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./state.h     ****  * <http://www.gnu.org/licenses/>.
  19:./state.h     ****  */
  20:./state.h     **** 
  21:./state.h     **** /**
  22:./state.h     ****  * @file state.h
  23:./state.h     ****  *
  24:./state.h     ****  * API to get/set the generic vehicle states.
  25:./state.h     ****  *
  26:./state.h     ****  * Also see the @ref state_interface "State Interface" page.
  27:./state.h     ****  *
  28:./state.h     ****  * @author Felix Ruess <felix.ruess@gmail.com>
  29:./state.h     ****  */
  30:./state.h     **** 
  31:./state.h     **** #ifndef STATE_H
  32:./state.h     **** #define STATE_H
  33:./state.h     **** 
  34:./state.h     **** #include "math/pprz_algebra_int.h"
  35:./state.h     **** #include "math/pprz_algebra_float.h"
  36:./state.h     **** #include "math/pprz_geodetic_int.h"
  37:./state.h     **** #include "math/pprz_geodetic_float.h"
  38:./state.h     **** #include "math/pprz_orientation_conversion.h"
  39:./state.h     **** 
  40:./state.h     **** #include "std.h"
  41:./state.h     **** #include <string.h>
  42:./state.h     **** 
  43:./state.h     **** /**
  44:./state.h     ****  * This general state interface holds all the most important vehicle states like
  45:./state.h     ****  * position, velocity, attitude, etc. It handles coordinate system and
  46:./state.h     ****  * fixed-/floating-point conversion on the fly when needed.
  47:./state.h     ****  *
  48:./state.h     ****  * You can set e.g. the position in any coordinate system you wish:
  49:./state.h     ****  * stateSetPositionNed_i() to set the position in fixed-point NED coordinates.
  50:./state.h     ****  * If you need to read the position somewhere else in a different representation,
  51:./state.h     ****  * call: stateGetPositionLla_f() and only then the LLA float position representation
  52:./state.h     ****  * is calculated on the fly and returned. It's also only calculated once,
  53:./state.h     ****  * until a new position is set which invalidates all the other representations again.
  54:./state.h     ****  */
  55:./state.h     **** 
  56:./state.h     **** /**
  57:./state.h     ****  * @defgroup state_interface State interface
  58:./state.h     ****  * @{
  59:./state.h     ****  */
  60:./state.h     **** 
  61:./state.h     **** /**
  62:./state.h     ****  * @defgroup state_position Position representations
  63:./state.h     ****  * @{
  64:./state.h     ****  */
  65:./state.h     **** #define POS_ECEF_I 0
  66:./state.h     **** #define POS_NED_I  1
  67:./state.h     **** #define POS_ENU_I  2
  68:./state.h     **** #define POS_LLA_I  3
  69:./state.h     **** #define POS_UTM_I  4
  70:./state.h     **** #define POS_ECEF_F 5
  71:./state.h     **** #define POS_NED_F  6
  72:./state.h     **** #define POS_ENU_F  7
  73:./state.h     **** #define POS_LLA_F  8
  74:./state.h     **** #define POS_UTM_F  9
  75:./state.h     **** #define POS_LOCAL_COORD ((1<<POS_NED_I)|(1<<POS_NED_F)|(1<<POS_ENU_I)|(1<<POS_ENU_F))
  76:./state.h     **** #define POS_GLOBAL_COORD ((1<<POS_ECEF_I)|(1<<POS_ECEF_F)|(1<<POS_LLA_I)|(1<<POS_LLA_F)|(1<<POS_UTM
  77:./state.h     **** /**@}*/
  78:./state.h     **** 
  79:./state.h     **** /**
  80:./state.h     ****  * @defgroup state_velocity Speed representations
  81:./state.h     ****  * @{
  82:./state.h     ****  */
  83:./state.h     **** #define SPEED_ECEF_I  0
  84:./state.h     **** #define SPEED_NED_I   1
  85:./state.h     **** #define SPEED_ENU_I   2
  86:./state.h     **** #define SPEED_HNORM_I 3
  87:./state.h     **** #define SPEED_HDIR_I  4
  88:./state.h     **** #define SPEED_ECEF_F  5
  89:./state.h     **** #define SPEED_NED_F   6
  90:./state.h     **** #define SPEED_ENU_F   7
  91:./state.h     **** #define SPEED_HNORM_F 8
  92:./state.h     **** #define SPEED_HDIR_F  9
  93:./state.h     **** #define SPEED_LOCAL_COORD ((1<<SPEED_NED_I)|(1<<SPEED_ENU_I)|(1<<SPEED_NED_F)|(1<<SPEED_ENU_F))
  94:./state.h     **** /**@}*/
  95:./state.h     **** 
  96:./state.h     **** /**
  97:./state.h     ****  * @defgroup state_acceleration Acceleration representations
  98:./state.h     ****  * @{
  99:./state.h     ****  */
 100:./state.h     **** #define ACCEL_ECEF_I 0
 101:./state.h     **** #define ACCEL_NED_I  1
 102:./state.h     **** #define ACCEL_ECEF_F 2
 103:./state.h     **** #define ACCEL_NED_F  3
 104:./state.h     **** /**@}*/
 105:./state.h     **** 
 106:./state.h     **** /**
 107:./state.h     ****  * @defgroup state_rate Angular rate representations
 108:./state.h     ****  * @{
 109:./state.h     ****  */
 110:./state.h     **** #define RATE_I 0
 111:./state.h     **** #define RATE_F 1
 112:./state.h     **** /**@}*/
 113:./state.h     **** 
 114:./state.h     **** /**
 115:./state.h     ****  * @defgroup state_wind_airspeed Wind- and airspeed representations
 116:./state.h     ****  * @{
 117:./state.h     ****  */
 118:./state.h     **** #define WINDSPEED_I 0
 119:./state.h     **** #define AIRSPEED_I  1
 120:./state.h     **** #define WINDSPEED_F 2
 121:./state.h     **** #define AIRSPEED_F  3
 122:./state.h     **** #define AOA_F       4
 123:./state.h     **** #define SIDESLIP_F  5
 124:./state.h     **** /**@}*/
 125:./state.h     **** 
 126:./state.h     **** 
 127:./state.h     **** /**
 128:./state.h     ****  * Structure holding vehicle state data.
 129:./state.h     ****  */
 130:./state.h     **** struct State {
 131:./state.h     **** 
 132:./state.h     ****   /** @addtogroup state_position
 133:./state.h     ****    *  @{ */
 134:./state.h     **** 
 135:./state.h     ****   /**
 136:./state.h     ****    * Holds the status bits for all position representations.
 137:./state.h     ****    * When the corresponding bit is set the representation
 138:./state.h     ****    * is already computed.
 139:./state.h     ****    */
 140:./state.h     ****   uint16_t pos_status;
 141:./state.h     **** 
 142:./state.h     ****   /**
 143:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 144:./state.h     ****    * Units: centimeters
 145:./state.h     ****    */
 146:./state.h     ****   struct EcefCoor_i ecef_pos_i;
 147:./state.h     **** 
 148:./state.h     ****   /**
 149:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 150:./state.h     ****    * Units lat,lon: radians*1e7
 151:./state.h     ****    * Units alt: milimeters above reference ellipsoid
 152:./state.h     ****    */
 153:./state.h     ****   struct LlaCoor_i lla_pos_i;
 154:./state.h     **** 
 155:./state.h     ****   /**
 156:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 157:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 158:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 159:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 160:./state.h     ****    * (int version)
 161:./state.h     ****    */
 162:./state.h     ****   struct LtpDef_i ned_origin_i;
 163:./state.h     **** 
 164:./state.h     ****   /**
 165:./state.h     ****    * true if local int coordinate frame is initialsed
 166:./state.h     ****    */
 167:./state.h     ****   bool_t ned_initialized_i;
 168:./state.h     **** 
 169:./state.h     ****   /**
 170:./state.h     ****    * Position in North East Down coordinates.
 171:./state.h     ****    * with respect to ned_origin_i (flat earth)
 172:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 173:./state.h     ****    */
 174:./state.h     ****   struct NedCoor_i ned_pos_i;
 175:./state.h     **** 
 176:./state.h     ****   /**
 177:./state.h     ****    * Position in East North Up coordinates.
 178:./state.h     ****    * with respect to ned_origin_i (flat earth)
 179:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 180:./state.h     ****    */
 181:./state.h     ****   struct EnuCoor_i enu_pos_i;
 182:./state.h     **** 
 183:./state.h     ****   /**
 184:./state.h     ****    * Position in UTM coordinates.
 185:./state.h     ****    * Units x,y: meters.
 186:./state.h     ****    * Units z: meters above MSL
 187:./state.h     ****    */
 188:./state.h     ****   struct UtmCoor_f utm_pos_f;
 189:./state.h     **** 
 190:./state.h     ****   /**
 191:./state.h     ****    * Altitude above ground level.
 192:./state.h     ****    * Unit: meters
 193:./state.h     ****    */
 194:./state.h     ****   float alt_agl_f;
 195:./state.h     **** 
 196:./state.h     ****   /**
 197:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 198:./state.h     ****    * Units lat,lon: radians
 199:./state.h     ****    * Units alt: meters above reference ellipsoid
 200:./state.h     ****    */
 201:./state.h     ****   struct LlaCoor_f lla_pos_f;
 202:./state.h     **** 
 203:./state.h     ****   /**
 204:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 205:./state.h     ****    * Units: meters
 206:./state.h     ****    */
 207:./state.h     ****   struct EcefCoor_f ecef_pos_f;
 208:./state.h     **** 
 209:./state.h     ****   /**
 210:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 211:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 212:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 213:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 214:./state.h     ****    * (float version)
 215:./state.h     ****    */
 216:./state.h     ****   struct LtpDef_f ned_origin_f;
 217:./state.h     **** 
 218:./state.h     ****   /// True if local float coordinate frame is initialsed
 219:./state.h     ****   bool_t ned_initialized_f;
 220:./state.h     **** 
 221:./state.h     ****   /**
 222:./state.h     ****    * Definition of the origin of Utm coordinate system.
 223:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 224:./state.h     ****    * in UTM coordinates, used as a reference when ned_origin is not
 225:./state.h     ****    * initialized.
 226:./state.h     ****    * (float version)
 227:./state.h     ****    */
 228:./state.h     ****   struct UtmCoor_f utm_origin_f;
 229:./state.h     **** 
 230:./state.h     ****   /// True if utm origin (float) coordinate frame is initialsed
 231:./state.h     ****   bool_t utm_initialized_f;
 232:./state.h     **** 
 233:./state.h     ****   /**
 234:./state.h     ****    * Position in North East Down coordinates.
 235:./state.h     ****    * with respect to ned_origin_i (flat earth)
 236:./state.h     ****    * Units: meters
 237:./state.h     ****    */
 238:./state.h     ****   struct NedCoor_f ned_pos_f;
 239:./state.h     **** 
 240:./state.h     ****   /**
 241:./state.h     ****    * Position in East North Up coordinates.
 242:./state.h     ****    * with respect to ned_origin_i (flat earth)
 243:./state.h     ****    * Units: meters
 244:./state.h     ****    */
 245:./state.h     ****   struct EnuCoor_f enu_pos_f;
 246:./state.h     ****   /** @}*/
 247:./state.h     **** 
 248:./state.h     **** 
 249:./state.h     ****   /** @addtogroup state_velocity
 250:./state.h     ****    *  @{ */
 251:./state.h     ****   /**
 252:./state.h     ****    * Holds the status bits for all ground speed representations.
 253:./state.h     ****    * When the corresponding bit is one the representation
 254:./state.h     ****    * is already computed.
 255:./state.h     ****    */
 256:./state.h     ****   uint16_t speed_status;
 257:./state.h     **** 
 258:./state.h     ****   /**
 259:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 260:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 261:./state.h     ****    */
 262:./state.h     ****   struct EcefCoor_i ecef_speed_i;
 263:./state.h     **** 
 264:./state.h     ****   /**
 265:./state.h     ****    * Velocity in North East Down coordinates.
 266:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 267:./state.h     ****    */
 268:./state.h     ****   struct NedCoor_i ned_speed_i;
 269:./state.h     **** 
 270:./state.h     ****   /**
 271:./state.h     ****    * Velocity in East North Up coordinates.
 272:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 273:./state.h     ****    */
 274:./state.h     ****   struct EnuCoor_i enu_speed_i;
 275:./state.h     **** 
 276:./state.h     ****   /**
 277:./state.h     ****    * Norm of horizontal ground speed.
 278:./state.h     ****    * Unit: m/s in BFP with #INT32_SPEED_FRAC
 279:./state.h     ****    */
 280:./state.h     ****   int32_t h_speed_norm_i;
 281:./state.h     **** 
 282:./state.h     ****   /**
 283:./state.h     ****    * Direction of horizontal ground speed.
 284:./state.h     ****    * Unit: rad in BFP with #INT32_ANGLE_FRAC
 285:./state.h     ****    * (clockwise, zero=north)
 286:./state.h     ****    */
 287:./state.h     ****   int32_t h_speed_dir_i;
 288:./state.h     **** 
 289:./state.h     ****   /**
 290:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 291:./state.h     ****    * Units: m/s
 292:./state.h     ****    */
 293:./state.h     ****   struct EcefCoor_f ecef_speed_f;
 294:./state.h     **** 
 295:./state.h     ****   /**
 296:./state.h     ****    * @brief speed in North East Down coordinates
 297:./state.h     ****    * @details Units: m/s */
 298:./state.h     ****   struct NedCoor_f ned_speed_f;
 299:./state.h     **** 
 300:./state.h     ****   /**
 301:./state.h     ****    * Velocity in East North Up coordinates.
 302:./state.h     ****    * Units: m/s
 303:./state.h     ****    */
 304:./state.h     ****   struct EnuCoor_f enu_speed_f;
 305:./state.h     **** 
 306:./state.h     ****   /**
 307:./state.h     ****    * Norm of horizontal ground speed.
 308:./state.h     ****    * Unit: m/s
 309:./state.h     ****    */
 310:./state.h     ****   float h_speed_norm_f;
 311:./state.h     **** 
 312:./state.h     ****   /**
 313:./state.h     ****    * Direction of horizontal ground speed.
 314:./state.h     ****    * Unit: rad (clockwise, zero=north)
 315:./state.h     ****    */
 316:./state.h     ****   float h_speed_dir_f;
 317:./state.h     ****   /** @}*/
 318:./state.h     **** 
 319:./state.h     **** 
 320:./state.h     ****   /** @addtogroup state_acceleration
 321:./state.h     ****    *  @{ */
 322:./state.h     ****   /**
 323:./state.h     ****    * Holds the status bits for all acceleration representations.
 324:./state.h     ****    * When the corresponding bit is one the representation
 325:./state.h     ****    * is already computed.
 326:./state.h     ****    */
 327:./state.h     ****   uint8_t accel_status;
 328:./state.h     **** 
 329:./state.h     ****   /**
 330:./state.h     ****    * Acceleration in North East Down coordinates.
 331:./state.h     ****    * Units: m/s^2 in BFP with #INT32_ACCEL_FRAC
 332:./state.h     ****    */
 333:./state.h     ****   struct NedCoor_i ned_accel_i;
 334:./state.h     **** 
 335:./state.h     ****   /**
 336:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 337:./state.h     ****    * Units: m/s^2 in BFP with INT32_ACCEL_FRAC
 338:./state.h     ****    */
 339:./state.h     ****   struct EcefCoor_i ecef_accel_i;
 340:./state.h     **** 
 341:./state.h     ****   /**
 342:./state.h     ****    * Acceleration in North East Down coordinates.
 343:./state.h     ****    * Units: m/s^2
 344:./state.h     ****    */
 345:./state.h     ****   struct NedCoor_f ned_accel_f;
 346:./state.h     **** 
 347:./state.h     ****   /**
 348:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 349:./state.h     ****    * Units: m/s^2
 350:./state.h     ****    */
 351:./state.h     ****   struct EcefCoor_f ecef_accel_f;
 352:./state.h     ****   /** @}*/
 353:./state.h     **** 
 354:./state.h     **** 
 355:./state.h     ****   /** @defgroup state_attitude Attitude representations
 356:./state.h     ****    */
 357:./state.h     ****   struct OrientationReps ned_to_body_orientation;
 358:./state.h     **** 
 359:./state.h     **** 
 360:./state.h     ****   /** @addtogroup state_rate
 361:./state.h     ****    *  @{ */
 362:./state.h     ****   /**
 363:./state.h     ****    * Holds the status bits for all angular rate representations.
 364:./state.h     ****    * When the corresponding bit is one the representation
 365:./state.h     ****    * is already computed.
 366:./state.h     ****    */
 367:./state.h     ****   uint8_t rate_status;
 368:./state.h     **** 
 369:./state.h     ****   /**
 370:./state.h     ****    * Angular rates in body frame.
 371:./state.h     ****    * Units: rad/s in BFP with #INT32_RATE_FRAC
 372:./state.h     ****    */
 373:./state.h     ****   struct Int32Rates  body_rates_i;
 374:./state.h     **** 
 375:./state.h     ****   /**
 376:./state.h     ****    * Angular rates in body frame.
 377:./state.h     ****    * Units: rad/s
 378:./state.h     ****    */
 379:./state.h     ****   struct FloatRates  body_rates_f;
 380:./state.h     ****   /** @}*/
 381:./state.h     **** 
 382:./state.h     **** 
 383:./state.h     ****   /** @addtogroup state_wind_airspeed
 384:./state.h     ****    *  @{ */
 385:./state.h     ****   /**
 386:./state.h     ****    * Holds the status bits for all wind- and airspeed representations.
 387:./state.h     ****    * When the corresponding bit is one the representation
 388:./state.h     ****    * is already computed.
 389:./state.h     ****    */
 390:./state.h     ****   uint8_t wind_air_status;
 391:./state.h     **** 
 392:./state.h     ****   /**
 393:./state.h     ****    * Horizontal windspeed in north/east.
 394:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 395:./state.h     ****    */
 396:./state.h     ****   struct Int32Vect2 h_windspeed_i;
 397:./state.h     **** 
 398:./state.h     ****   /**
 399:./state.h     ****    * Norm of horizontal ground speed.
 400:./state.h     ****    * @details Unit: m/s in BFP with #INT32_SPEED_FRAC
 401:./state.h     ****    */
 402:./state.h     ****   int32_t airspeed_i;
 403:./state.h     **** 
 404:./state.h     ****   /**
 405:./state.h     ****    * Horizontal windspeed.
 406:./state.h     ****    * Units: m/s with x=north, y=east
 407:./state.h     ****    */
 408:./state.h     ****   struct FloatVect2 h_windspeed_f;
 409:./state.h     **** 
 410:./state.h     ****   /**
 411:./state.h     ****    * Norm of relative air speed.
 412:./state.h     ****    * Unit: m/s
 413:./state.h     ****    */
 414:./state.h     ****   float airspeed_f;
 415:./state.h     **** 
 416:./state.h     ****   /**
 417:./state.h     ****    * Angle of attack
 418:./state.h     ****    * Unit: rad
 419:./state.h     ****    */
 420:./state.h     ****   float angle_of_attack_f;
 421:./state.h     **** 
 422:./state.h     ****   /**
 423:./state.h     ****    * Sideslip angle
 424:./state.h     ****    * Unit: rad
 425:./state.h     ****    */
 426:./state.h     ****   float sideslip_f;
 427:./state.h     **** 
 428:./state.h     ****   /** @}*/
 429:./state.h     **** 
 430:./state.h     **** };
 431:./state.h     **** 
 432:./state.h     **** extern struct State state;
 433:./state.h     **** 
 434:./state.h     **** extern void stateInit(void);
 435:./state.h     **** 
 436:./state.h     **** /** @addtogroup state_position
 437:./state.h     ****  *  @{ */
 438:./state.h     **** 
 439:./state.h     **** /// Set the local (flat earth) coordinate frame origin (int).
 440:./state.h     **** static inline void stateSetLocalOrigin_i(struct LtpDef_i* ltp_def) {
 441:./state.h     ****   memcpy(&state.ned_origin_i, ltp_def, sizeof(struct LtpDef_i));
 442:./state.h     ****   /* convert to float */
 443:./state.h     ****   ECEF_FLOAT_OF_BFP(state.ned_origin_f.ecef, state.ned_origin_i.ecef);
 444:./state.h     ****   LLA_FLOAT_OF_BFP(state.ned_origin_f.lla, state.ned_origin_i.lla);
 445:./state.h     ****   RMAT_FLOAT_OF_BFP(state.ned_origin_f.ltp_of_ecef, state.ned_origin_i.ltp_of_ecef);
 446:./state.h     ****   state.ned_origin_f.hmsl = M_OF_MM(state.ned_origin_i.hmsl);
 447:./state.h     **** 
 448:./state.h     ****   /* clear bits for all local frame representations */
 449:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 450:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 451:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 452:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 453:./state.h     **** 
 454:./state.h     ****   state.ned_initialized_i = TRUE;
 455:./state.h     ****   state.ned_initialized_f = TRUE;
 456:./state.h     **** }
 457:./state.h     **** 
 458:./state.h     **** /// Set the local (flat earth) coordinate frame origin from UTM (float).
 459:./state.h     **** static inline void stateSetLocalUtmOrigin_f(struct UtmCoor_f* utm_def) {
 460:./state.h     ****   memcpy(&state.utm_origin_f, utm_def, sizeof(struct UtmCoor_f));
 461:./state.h     ****   state.utm_initialized_f = TRUE;
 462:./state.h     **** 
 463:./state.h     ****   /* clear bits for all local frame representations */
 464:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 465:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 466:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 467:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 468:./state.h     **** }
 469:./state.h     **** /*******************************************************************************
 470:./state.h     ****  *                                                                             *
 471:./state.h     ****  * Set and Get functions for the POSITION representations                      *
 472:./state.h     ****  *                                                                             *
 473:./state.h     ****  ******************************************************************************/
 474:./state.h     **** 
 475:./state.h     **** /************* declaration of transformation functions ************/
 476:./state.h     **** extern void stateCalcPositionEcef_i(void);
 477:./state.h     **** extern void stateCalcPositionNed_i(void);
 478:./state.h     **** extern void stateCalcPositionEnu_i(void);
 479:./state.h     **** extern void stateCalcPositionLla_i(void);
 480:./state.h     **** extern void stateCalcPositionUtm_f(void);
 481:./state.h     **** extern void stateCalcPositionEcef_f(void);
 482:./state.h     **** extern void stateCalcPositionNed_f(void);
 483:./state.h     **** extern void stateCalcPositionEnu_f(void);
 484:./state.h     **** extern void stateCalcPositionLla_f(void);
 485:./state.h     **** 
 486:./state.h     **** /*********************** validity test functions ******************/
 487:./state.h     **** 
 488:./state.h     **** /// Test if local coordinates are valid.
 489:./state.h     **** static inline bool_t stateIsLocalCoordinateValid(void) {
 490:./state.h     ****   return ((state.ned_initialized_i || state.utm_initialized_f) && (state.pos_status & (POS_LOCAL_CO
 491:./state.h     **** }
 492:./state.h     **** 
 493:./state.h     **** /// Test if global coordinates are valid.
 494:./state.h     **** static inline bool_t stateIsGlobalCoordinateValid(void) {
 495:./state.h     ****   return ((state.pos_status & (POS_GLOBAL_COORD)) || stateIsLocalCoordinateValid());
 496:./state.h     **** }
 497:./state.h     **** 
 498:./state.h     **** /************************ Set functions ****************************/
 499:./state.h     **** 
 500:./state.h     **** /// Set position from ECEF coordinates (int).
 501:./state.h     **** static inline void stateSetPositionEcef_i(struct EcefCoor_i* ecef_pos) {
 502:./state.h     ****   INT32_VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 503:./state.h     ****   /* clear bits for all position representations and only set the new one */
 504:./state.h     ****   state.pos_status = (1 << POS_ECEF_I);
 505:./state.h     **** }
 506:./state.h     **** 
 507:./state.h     **** /// Set position from local NED coordinates (int).
 508:./state.h     **** static inline void stateSetPositionNed_i(struct NedCoor_i* ned_pos) {
 509:./state.h     ****   INT32_VECT3_COPY(state.ned_pos_i, *ned_pos);
 510:./state.h     ****   /* clear bits for all position representations and only set the new one */
 511:./state.h     ****   state.pos_status = (1 << POS_NED_I);
 512:./state.h     **** }
 513:./state.h     **** 
 514:./state.h     **** /// Set position from local ENU coordinates (int).
 515:./state.h     **** static inline void stateSetPositionEnu_i(struct EnuCoor_i* enu_pos) {
 516:./state.h     ****   INT32_VECT3_COPY(state.enu_pos_i, *enu_pos);
 517:./state.h     ****   /* clear bits for all position representations and only set the new one */
 518:./state.h     ****   state.pos_status = (1 << POS_ENU_I);
 519:./state.h     **** }
 520:./state.h     **** 
 521:./state.h     **** /// Set position from LLA coordinates (int).
 522:./state.h     **** static inline void stateSetPositionLla_i(struct LlaCoor_i* lla_pos) {
 523:./state.h     ****   LLA_COPY(state.lla_pos_i, *lla_pos);
 524:./state.h     ****   /* clear bits for all position representations and only set the new one */
 525:./state.h     ****   state.pos_status = (1 << POS_LLA_I);
 526:./state.h     **** }
 527:./state.h     **** 
 528:./state.h     **** /// Set multiple position coordinates (int).
 529:./state.h     **** static inline void stateSetPosition_i(
 530:./state.h     ****     struct EcefCoor_i* ecef_pos,
 531:./state.h     ****     struct NedCoor_i* ned_pos,
 532:./state.h     ****     struct EnuCoor_i* enu_pos,
 533:./state.h     ****     struct LlaCoor_i* lla_pos) {
 534:./state.h     ****   /* clear all status bit */
 535:./state.h     ****   state.pos_status = 0;
 536:./state.h     ****   if (ecef_pos != NULL) {
 537:./state.h     ****     INT32_VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 538:./state.h     ****     state.pos_status |= (1 << POS_ECEF_I);
 539:./state.h     ****   }
 540:./state.h     ****   if (ned_pos != NULL) {
 541:./state.h     ****     INT32_VECT3_COPY(state.ned_pos_i, *ned_pos);
 542:./state.h     ****     state.pos_status |= (1 << POS_NED_I);
 543:./state.h     ****   }
 544:./state.h     ****   if (enu_pos != NULL) {
 545:./state.h     ****     INT32_VECT3_COPY(state.enu_pos_i, *enu_pos);
 546:./state.h     ****     state.pos_status |= (1 << POS_ENU_I);
 547:./state.h     ****   }
 548:./state.h     ****   if (lla_pos != NULL) {
 549:./state.h     ****     LLA_COPY(state.lla_pos_i, *lla_pos);
 550:./state.h     ****     state.pos_status |= (1 << POS_LLA_I);
 551:./state.h     ****   }
 552:./state.h     **** }
 553:./state.h     **** 
 554:./state.h     **** /// Set position from UTM coordinates (float).
 555:./state.h     **** static inline void stateSetPositionUtm_f(struct UtmCoor_f* utm_pos) {
 556:./state.h     ****   memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 557:./state.h     ****   /* clear bits for all position representations and only set the new one */
 558:./state.h     ****   state.pos_status = (1 << POS_UTM_F);
 559:./state.h     **** }
 560:./state.h     **** 
 561:./state.h     **** /// Set position from ECEF coordinates (float).
 562:./state.h     **** static inline void stateSetPositionEcef_f(struct EcefCoor_f* ecef_pos) {
 563:./state.h     ****   VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 564:./state.h     ****   /* clear bits for all position representations and only set the new one */
 565:./state.h     ****   state.pos_status = (1 << POS_ECEF_F);
 566:./state.h     **** }
 567:./state.h     **** 
 568:./state.h     **** /// Set position from local NED coordinates (float).
 569:./state.h     **** static inline void stateSetPositionNed_f(struct NedCoor_f* ned_pos) {
 570:./state.h     ****   VECT3_COPY(state.ned_pos_f, *ned_pos);
 571:./state.h     ****   /* clear bits for all position representations and only set the new one */
 572:./state.h     ****   state.pos_status = (1 << POS_NED_F);
 573:./state.h     **** }
 574:./state.h     **** 
 575:./state.h     **** /// Set position from local ENU coordinates (float).
 576:./state.h     **** static inline void stateSetPositionEnu_f(struct EnuCoor_f* enu_pos) {
 577:./state.h     ****   VECT3_COPY(state.enu_pos_f, *enu_pos);
 578:./state.h     ****   /* clear bits for all position representations and only set the new one */
 579:./state.h     ****   state.pos_status = (1 << POS_ENU_F);
 580:./state.h     **** }
 581:./state.h     **** 
 582:./state.h     **** /// Set position from LLA coordinates (float).
 583:./state.h     **** static inline void stateSetPositionLla_f(struct LlaCoor_f* lla_pos) {
 584:./state.h     ****   LLA_COPY(state.lla_pos_f, *lla_pos);
 585:./state.h     ****   /* clear bits for all position representations and only set the new one */
 586:./state.h     ****   state.pos_status = (1 << POS_LLA_F);
 587:./state.h     **** }
 588:./state.h     **** 
 589:./state.h     **** /// Set multiple position coordinates (float).
 590:./state.h     **** static inline void stateSetPosition_f(
 591:./state.h     ****     struct EcefCoor_f* ecef_pos,
 592:./state.h     ****     struct NedCoor_f* ned_pos,
 593:./state.h     ****     struct EnuCoor_f* enu_pos,
 594:./state.h     ****     struct LlaCoor_f* lla_pos,
 595:./state.h     ****     struct UtmCoor_f* utm_pos) {
 596:./state.h     ****   /* clear all status bit */
 597:./state.h     ****   state.pos_status = 0;
 598:./state.h     ****   if (ecef_pos != NULL) {
 599:./state.h     ****     VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 600:./state.h     ****     state.pos_status |= (1 << POS_ECEF_F);
 601:./state.h     ****   }
 602:./state.h     ****   if (ned_pos != NULL) {
 603:./state.h     ****     VECT3_COPY(state.ned_pos_f, *ned_pos);
 604:./state.h     ****     state.pos_status |= (1 << POS_NED_F);
 605:./state.h     ****   }
 606:./state.h     ****   if (enu_pos != NULL) {
 607:./state.h     ****     VECT3_COPY(state.enu_pos_f, *enu_pos);
 608:./state.h     ****     state.pos_status |= (1 << POS_ENU_F);
 609:./state.h     ****   }
 610:./state.h     ****   if (lla_pos != NULL) {
 611:./state.h     ****     LLA_COPY(state.lla_pos_f, *lla_pos);
 612:./state.h     ****     state.pos_status |= (1 << POS_LLA_F);
 613:./state.h     ****   }
 614:./state.h     ****   if (utm_pos != NULL) {
 615:./state.h     ****     memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 616:./state.h     ****     state.pos_status |= (1 << POS_UTM_F);
 617:./state.h     ****   }
 618:./state.h     **** }
 619:./state.h     **** 
 620:./state.h     **** /************************ Get functions ****************************/
 621:./state.h     **** 
 622:./state.h     **** /// Get position in ECEF coordinates (int).
 623:./state.h     **** static inline struct EcefCoor_i* stateGetPositionEcef_i(void) {
 624:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_I))
 625:./state.h     ****     stateCalcPositionEcef_i();
 626:./state.h     ****   return &state.ecef_pos_i;
 627:./state.h     **** }
 628:./state.h     **** 
 629:./state.h     **** /// Get position in local NED coordinates (int).
 630:./state.h     **** static inline struct NedCoor_i* stateGetPositionNed_i(void) {
 631:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_I))
 632:./state.h     ****     stateCalcPositionNed_i();
 633:./state.h     ****   return &state.ned_pos_i;
 634:./state.h     **** }
 635:./state.h     **** 
 636:./state.h     **** /// Get position in local ENU coordinates (int).
 637:./state.h     **** static inline struct EnuCoor_i* stateGetPositionEnu_i(void) {
 638:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_I))
 639:./state.h     ****     stateCalcPositionEnu_i();
 640:./state.h     ****   return &state.enu_pos_i;
 641:./state.h     **** }
 642:./state.h     **** 
 643:./state.h     **** /// Get position in LLA coordinates (int).
 644:./state.h     **** static inline struct LlaCoor_i* stateGetPositionLla_i(void) {
 645:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_I))
 646:./state.h     ****     stateCalcPositionLla_i();
 647:./state.h     ****   return &state.lla_pos_i;
 648:./state.h     **** }
 649:./state.h     **** 
 650:./state.h     **** /// Get position in UTM coordinates (float).
 651:./state.h     **** static inline struct UtmCoor_f* stateGetPositionUtm_f(void) {
 652:./state.h     ****   if (!bit_is_set(state.pos_status, POS_UTM_F))
 653:./state.h     ****     stateCalcPositionUtm_f();
 654:./state.h     ****   return &state.utm_pos_f;
 655:./state.h     **** }
 656:./state.h     **** 
 657:./state.h     **** /// Get position in ECEF coordinates (float).
 658:./state.h     **** static inline struct EcefCoor_f* stateGetPositionEcef_f(void) {
 659:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_F))
 660:./state.h     ****     stateCalcPositionEcef_f();
 661:./state.h     ****   return &state.ecef_pos_f;
 662:./state.h     **** }
 663:./state.h     **** 
 664:./state.h     **** /// Get position in local NED coordinates (float).
 665:./state.h     **** static inline struct NedCoor_f* stateGetPositionNed_f(void) {
 666:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_F))
 667:./state.h     ****     stateCalcPositionNed_f();
 668:./state.h     ****   return &state.ned_pos_f;
 669:./state.h     **** }
 670:./state.h     **** 
 671:./state.h     **** /// Get position in local ENU coordinates (float).
 672:./state.h     **** static inline struct EnuCoor_f* stateGetPositionEnu_f(void) {
 673:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_F))
 674:./state.h     ****     stateCalcPositionEnu_f();
 675:./state.h     ****   return &state.enu_pos_f;
 676:./state.h     **** }
 677:./state.h     **** 
 678:./state.h     **** /// Get position in LLA coordinates (float).
 679:./state.h     **** static inline struct LlaCoor_f* stateGetPositionLla_f(void) {
 680:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_F))
 681:./state.h     ****     stateCalcPositionLla_f();
 682:./state.h     ****   return &state.lla_pos_f;
 683:./state.h     **** }
 684:./state.h     **** 
 685:./state.h     **** /** @}*/
 686:./state.h     **** 
 687:./state.h     **** 
 688:./state.h     **** 
 689:./state.h     **** /******************************************************************************
 690:./state.h     ****  *                                                                            *
 691:./state.h     ****  * Set and Get functions for the SPEED representations                        *
 692:./state.h     ****  *                                                                            *
 693:./state.h     ****  *****************************************************************************/
 694:./state.h     **** /** @addtogroup state_velocity
 695:./state.h     ****  *  @{ */
 696:./state.h     **** 
 697:./state.h     **** /************* declaration of transformation functions ************/
 698:./state.h     **** extern void stateCalcSpeedNed_i(void);
 699:./state.h     **** extern void stateCalcSpeedEnu_i(void);
 700:./state.h     **** extern void stateCalcSpeedEcef_i(void);
 701:./state.h     **** extern void stateCalcHorizontalSpeedNorm_i(void);
 702:./state.h     **** extern void stateCalcHorizontalSpeedDir_i(void);
 703:./state.h     **** extern void stateCalcSpeedNed_f(void);
 704:./state.h     **** extern void stateCalcSpeedEnu_f(void);
 705:./state.h     **** extern void stateCalcSpeedEcef_f(void);
 706:./state.h     **** extern void stateCalcHorizontalSpeedNorm_f(void);
 707:./state.h     **** extern void stateCalcHorizontalSpeedDir_f(void);
 708:./state.h     **** 
 709:./state.h     **** /************************ Set functions ****************************/
 710:./state.h     **** 
 711:./state.h     **** /// Set ground speed in local NED coordinates (int).
 712:./state.h     **** static inline void stateSetSpeedNed_i(struct NedCoor_i* ned_speed) {
 713:./state.h     ****   INT32_VECT3_COPY(state.ned_speed_i, *ned_speed);
 714:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 715:./state.h     ****   state.speed_status = (1 << SPEED_NED_I);
 716:./state.h     **** }
 717:./state.h     **** 
 718:./state.h     **** /// Set ground speed in local ENU coordinates (int).
 719:./state.h     **** static inline void stateSetSpeedEnu_i(struct EnuCoor_i* enu_speed) {
 720:./state.h     ****   INT32_VECT3_COPY(state.enu_speed_i, *enu_speed);
 721:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 722:./state.h     ****   state.speed_status = (1 << SPEED_ENU_I);
 723:./state.h     **** }
 724:./state.h     **** 
 725:./state.h     **** /// Set ground speed in ECEF coordinates (int).
 726:./state.h     **** static inline void stateSetSpeedEcef_i(struct EcefCoor_i* ecef_speed) {
 727:./state.h     ****   INT32_VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 728:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 729:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_I);
 730:./state.h     **** }
 731:./state.h     **** 
 732:./state.h     **** /// Set multiple speed coordinates (int).
 733:./state.h     **** static inline void stateSetSpeed_i(
 734:./state.h     ****     struct EcefCoor_i* ecef_speed,
 735:./state.h     ****     struct NedCoor_i* ned_speed,
 736:./state.h     ****     struct EnuCoor_i* enu_speed) {
 737:./state.h     ****   /* clear all status bit */
 738:./state.h     ****   state.speed_status = 0;
 739:./state.h     ****   if (ecef_speed != NULL) {
 740:./state.h     ****     INT32_VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 741:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_I);
 742:./state.h     ****   }
 743:./state.h     ****   if (ned_speed != NULL) {
 744:./state.h     ****     INT32_VECT3_COPY(state.ned_speed_i, *ned_speed);
 745:./state.h     ****     state.speed_status |= (1 << SPEED_NED_I);
 746:./state.h     ****   }
 747:./state.h     ****   if (enu_speed != NULL) {
 748:./state.h     ****     INT32_VECT3_COPY(state.enu_speed_i, *enu_speed);
 749:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_I);
 750:./state.h     ****   }
 751:./state.h     **** }
 752:./state.h     **** 
 753:./state.h     **** /// Set ground speed in local NED coordinates (float).
 754:./state.h     **** static inline void stateSetSpeedNed_f(struct NedCoor_f* ned_speed) {
 755:./state.h     ****   VECT3_COPY(state.ned_speed_f, *ned_speed);
 756:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 757:./state.h     ****   state.speed_status = (1 << SPEED_NED_F);
 758:./state.h     **** }
 759:./state.h     **** 
 760:./state.h     **** /// Set ground speed in local ENU coordinates (float).
 761:./state.h     **** static inline void stateSetSpeedEnu_f(struct EnuCoor_f* enu_speed) {
 762:./state.h     ****   VECT3_COPY(state.enu_speed_f, *enu_speed);
 763:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 764:./state.h     ****   state.speed_status = (1 << SPEED_ENU_F);
 765:./state.h     **** }
 766:./state.h     **** 
 767:./state.h     **** /// Set ground speed in ECEF coordinates (float).
 768:./state.h     **** static inline void stateSetSpeedEcef_f(struct EcefCoor_f* ecef_speed) {
 769:./state.h     ****   VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 770:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 771:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_F);
 772:./state.h     **** }
 773:./state.h     **** 
 774:./state.h     **** /// Set multiple speed coordinates (float).
 775:./state.h     **** static inline void stateSetSpeed_f(
 776:./state.h     ****     struct EcefCoor_f* ecef_speed,
 777:./state.h     ****     struct NedCoor_f* ned_speed,
 778:./state.h     ****     struct EnuCoor_f* enu_speed) {
 779:./state.h     ****   /* clear all status bit */
 780:./state.h     ****   state.speed_status = 0;
 781:./state.h     ****   if (ecef_speed != NULL) {
 782:./state.h     ****     VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 783:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_F);
 784:./state.h     ****   }
 785:./state.h     ****   if (ned_speed != NULL) {
 786:./state.h     ****     VECT3_COPY(state.ned_speed_f, *ned_speed);
 787:./state.h     ****     state.speed_status |= (1 << SPEED_NED_F);
 788:./state.h     ****   }
 789:./state.h     ****   if (enu_speed != NULL) {
 790:./state.h     ****     VECT3_COPY(state.enu_speed_f, *enu_speed);
 791:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_F);
 792:./state.h     ****   }
 793:./state.h     **** }
 794:./state.h     **** 
 795:./state.h     **** /************************ Get functions ****************************/
 796:./state.h     **** 
 797:./state.h     **** /// Get ground speed in local NED coordinates (int).
 798:./state.h     **** static inline struct NedCoor_i* stateGetSpeedNed_i(void) {
 799:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_I))
 800:./state.h     ****     stateCalcSpeedNed_i();
 801:./state.h     ****   return &state.ned_speed_i;
 802:./state.h     **** }
 803:./state.h     **** 
 804:./state.h     **** /// Get ground speed in local ENU coordinates (int).
 805:./state.h     **** static inline struct EnuCoor_i* stateGetSpeedEnu_i(void) {
 806:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_I))
 807:./state.h     ****     stateCalcSpeedEnu_i();
 808:./state.h     ****   return &state.enu_speed_i;
 809:./state.h     **** }
 810:./state.h     **** 
 811:./state.h     **** /// Get ground speed in ECEF coordinates (int).
 812:./state.h     **** static inline struct EcefCoor_i* stateGetSpeedEcef_i(void) {
 813:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_I))
 814:./state.h     ****     stateCalcSpeedEcef_i();
 815:./state.h     ****   return &state.ecef_speed_i;
 816:./state.h     **** }
 817:./state.h     **** 
 818:./state.h     **** /// Get norm of horizontal ground speed (int).
 819:./state.h     **** static inline int32_t* stateGetHorizontalSpeedNorm_i(void) {
 820:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_I))
 821:./state.h     ****     stateCalcHorizontalSpeedNorm_i();
 822:./state.h     ****   return &state.h_speed_norm_i;
 823:./state.h     **** }
 824:./state.h     **** 
 825:./state.h     **** /// Get dir of horizontal ground speed (int).
 826:./state.h     **** static inline int32_t* stateGetHorizontalSpeedDir_i(void) {
 827:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_I))
 828:./state.h     ****     stateCalcHorizontalSpeedDir_i();
 829:./state.h     ****   return &state.h_speed_dir_i;
 830:./state.h     **** }
 831:./state.h     **** 
 832:./state.h     **** /// Get ground speed in local NED coordinates (float).
 833:./state.h     **** static inline struct NedCoor_f* stateGetSpeedNed_f(void) {
 834:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_F))
 835:./state.h     ****     stateCalcSpeedNed_f();
 836:./state.h     ****   return &state.ned_speed_f;
 837:./state.h     **** }
 838:./state.h     **** 
 839:./state.h     **** /// Get ground speed in local ENU coordinates (float).
 840:./state.h     **** static inline struct EnuCoor_f* stateGetSpeedEnu_f(void) {
 841:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_F))
 842:./state.h     ****     stateCalcSpeedEnu_f();
 843:./state.h     ****   return &state.enu_speed_f;
 844:./state.h     **** }
 845:./state.h     **** 
 846:./state.h     **** /// Get ground speed in ECEF coordinates (float).
 847:./state.h     **** static inline struct EcefCoor_f* stateGetSpeedEcef_f(void) {
 848:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_F))
 849:./state.h     ****     stateCalcSpeedEcef_f();
 850:./state.h     ****   return &state.ecef_speed_f;
 851:./state.h     **** }
 852:./state.h     **** 
 853:./state.h     **** /// Get norm of horizontal ground speed (float).
 854:./state.h     **** static inline float* stateGetHorizontalSpeedNorm_f(void) {
 855:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_F))
 856:./state.h     ****     stateCalcHorizontalSpeedNorm_f();
 857:./state.h     ****   return &state.h_speed_norm_f;
 858:./state.h     **** }
 859:./state.h     **** 
 860:./state.h     **** /// Get dir of horizontal ground speed (float).
 861:./state.h     **** static inline float* stateGetHorizontalSpeedDir_f(void) {
 862:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_F))
 863:./state.h     ****     stateCalcHorizontalSpeedDir_f();
 864:./state.h     ****   return &state.h_speed_dir_f;
 865:./state.h     **** }
 866:./state.h     **** /** @}*/
 867:./state.h     **** 
 868:./state.h     **** 
 869:./state.h     **** 
 870:./state.h     **** /******************************************************************************
 871:./state.h     ****  *                                                                            *
 872:./state.h     ****  * Set and Get functions for the ACCELERATION representations                 *
 873:./state.h     ****  *                                                                            *
 874:./state.h     ****  *****************************************************************************/
 875:./state.h     **** /** @addtogroup state_acceleration
 876:./state.h     ****  *  @{ */
 877:./state.h     **** 
 878:./state.h     **** /************* declaration of transformation functions ************/
 879:./state.h     **** extern void stateCalcAccelNed_i(void);
 880:./state.h     **** extern void stateCalcAccelEcef_i(void);
 881:./state.h     **** extern void stateCalcAccelNed_f(void);
 882:./state.h     **** extern void stateCalcAccelEcef_f(void);
 883:./state.h     **** 
 884:./state.h     **** /*********************** validity test functions ******************/
 885:./state.h     **** 
 886:./state.h     **** /// Test if accelerations are valid.
 887:./state.h     **** static inline bool_t stateIsAccelValid(void) {
 888:./state.h     ****   return (state.accel_status);
 889:./state.h     **** }
 890:./state.h     **** 
 891:./state.h     **** /************************ Set functions ****************************/
 892:./state.h     **** 
 893:./state.h     **** /// Set acceleration in NED coordinates (int).
 894:./state.h     **** static inline void stateSetAccelNed_i(struct NedCoor_i* ned_accel) {
 895:./state.h     ****   INT32_VECT3_COPY(state.ned_accel_i, *ned_accel);
 896:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 897:./state.h     ****   state.accel_status = (1 << ACCEL_NED_I);
 898:./state.h     **** }
 899:./state.h     **** 
 900:./state.h     **** /// Set acceleration in ECEF coordinates (int).
 901:./state.h     **** static inline void stateSetAccelEcef_i(struct EcefCoor_i* ecef_accel) {
 902:./state.h     ****   INT32_VECT3_COPY(state.ecef_accel_i, *ecef_accel);
 903:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 904:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_I);
 905:./state.h     **** }
 906:./state.h     **** 
 907:./state.h     **** /// Set acceleration in NED coordinates (float).
 908:./state.h     **** static inline void stateSetAccelNed_f(struct NedCoor_f* ned_accel) {
 909:./state.h     ****   VECT3_COPY(state.ned_accel_f, *ned_accel);
 910:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 911:./state.h     ****   state.accel_status = (1 << ACCEL_NED_F);
 912:./state.h     **** }
 913:./state.h     **** 
 914:./state.h     **** /// Set acceleration in ECEF coordinates (float).
 915:./state.h     **** static inline void stateSetAccelEcef_f(struct EcefCoor_f* ecef_accel) {
 916:./state.h     ****   VECT3_COPY(state.ecef_accel_f, *ecef_accel);
 917:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 918:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_F);
 919:./state.h     **** }
 920:./state.h     **** 
 921:./state.h     **** /************************ Get functions ****************************/
 922:./state.h     **** 
 923:./state.h     **** /// Get acceleration in NED coordinates (int).
 924:./state.h     **** static inline struct NedCoor_i* stateGetAccelNed_i(void) {
 925:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_I))
 926:./state.h     ****     stateCalcAccelNed_i();
 927:./state.h     ****   return &state.ned_accel_i;
 928:./state.h     **** }
 929:./state.h     **** 
 930:./state.h     **** /// Get acceleration in ECEF coordinates (int).
 931:./state.h     **** static inline struct EcefCoor_i* stateGetAccelEcef_i(void) {
 932:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_I))
 933:./state.h     ****     stateCalcAccelEcef_i();
 934:./state.h     ****   return &state.ecef_accel_i;
 935:./state.h     **** }
 936:./state.h     **** 
 937:./state.h     **** /// Get acceleration in NED coordinates (float).
 938:./state.h     **** static inline struct NedCoor_f* stateGetAccelNed_f(void) {
 939:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_F))
 940:./state.h     ****     stateCalcAccelNed_f();
 941:./state.h     ****   return &state.ned_accel_f;
 942:./state.h     **** }
 943:./state.h     **** 
 944:./state.h     **** /// Get acceleration in ECEF coordinates (float).
 945:./state.h     **** static inline struct EcefCoor_f* stateGetAccelEcef_f(void) {
 946:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_F))
 947:./state.h     ****     stateCalcAccelEcef_f();
 948:./state.h     ****   return &state.ecef_accel_f;
 949:./state.h     **** }
 950:./state.h     **** /** @}*/
 951:./state.h     **** 
 952:./state.h     **** /******************************************************************************
 953:./state.h     **** *                                                                             *
 954:./state.h     **** * Set and Get functions for the ATTITUDE representations                      *
 955:./state.h     **** * (Calls the functions in math/pprz_orientation_conversion)                   *
 956:./state.h     **** *                                                                             *
 957:./state.h     **** *****************************************************************************/
 958:./state.h     **** /** @addtogroup state_attitude
 959:./state.h     **** * @{ */
 960:./state.h     **** /*********************** validity test functions ******************/
 961:./state.h     **** 
 962:./state.h     **** /// Test if attitudes are valid.
 963:./state.h     **** static inline bool_t stateIsAttitudeValid(void) {
 964:./state.h     ****   return (orienationCheckValid(&state.ned_to_body_orientation));
 965:./state.h     **** }
 966:./state.h     **** 
 967:./state.h     **** /************************ Set functions ****************************/
 968:./state.h     **** 
 969:./state.h     **** /// Set vehicle body attitude from quaternion (int).
 970:./state.h     **** static inline void stateSetNedToBodyQuat_i(struct Int32Quat* ned_to_body_quat) {
 971:./state.h     ****   orientationSetQuat_i(&state.ned_to_body_orientation,ned_to_body_quat);
 972:./state.h     **** }
 973:./state.h     **** 
 974:./state.h     **** /// Set vehicle body attitude from rotation matrix (int).
 975:./state.h     **** static inline void stateSetNedToBodyRMat_i(struct Int32RMat* ned_to_body_rmat) {
 976:./state.h     ****   orientationSetRMat_i(&state.ned_to_body_orientation,ned_to_body_rmat);
 977:./state.h     **** }
 978:./state.h     **** 
 979:./state.h     **** /// Set vehicle body attitude from euler angles (int).
 980:./state.h     **** static inline void stateSetNedToBodyEulers_i(struct Int32Eulers* ned_to_body_eulers) {
 981:./state.h     ****   orientationSetEulers_i(&state.ned_to_body_orientation,ned_to_body_eulers);
 982:./state.h     **** }
 983:./state.h     **** 
 984:./state.h     **** /// Set vehicle body attitude from quaternion (float).
 985:./state.h     **** static inline void stateSetNedToBodyQuat_f(struct FloatQuat* ned_to_body_quat) {
 986:./state.h     ****   orientationSetQuat_f(&state.ned_to_body_orientation,ned_to_body_quat);
 987:./state.h     **** }
 988:./state.h     **** 
 989:./state.h     **** /// Set vehicle body attitude from rotation matrix (float).
 990:./state.h     **** static inline void stateSetNedToBodyRMat_f(struct FloatRMat* ned_to_body_rmat) {
 991:./state.h     ****   orientationSetRMat_f(&state.ned_to_body_orientation,ned_to_body_rmat);
 992:./state.h     **** }
 993:./state.h     **** 
 994:./state.h     **** /// Set vehicle body attitude from euler angles (float).
 995:./state.h     **** static inline void stateSetNedToBodyEulers_f(struct FloatEulers* ned_to_body_eulers) {
 996:./state.h     ****   orientationSetEulers_f(&state.ned_to_body_orientation,ned_to_body_eulers);
 997:./state.h     **** }
 998:./state.h     **** 
 999:./state.h     **** /************************ Get functions ****************************/
1000:./state.h     **** 
1001:./state.h     **** /// Get vehicle body attitude quaternion (int).
1002:./state.h     **** static inline struct Int32Quat* stateGetNedToBodyQuat_i(void) {
1003:./state.h     ****   return orientationGetQuat_i(&state.ned_to_body_orientation);
1004:./state.h     **** }
1005:./state.h     **** 
1006:./state.h     **** /// Get vehicle body attitude rotation matrix (int).
1007:./state.h     **** static inline struct Int32RMat* stateGetNedToBodyRMat_i(void) {
1008:./state.h     ****   return orientationGetRMat_i(&state.ned_to_body_orientation);
1009:./state.h     **** }
1010:./state.h     **** 
1011:./state.h     **** /// Get vehicle body attitude euler angles (int).
1012:./state.h     **** static inline struct Int32Eulers* stateGetNedToBodyEulers_i(void) {
1013:./state.h     ****   return orientationGetEulers_i(&state.ned_to_body_orientation);
1014:./state.h     **** }
1015:./state.h     **** 
1016:./state.h     **** /// Get vehicle body attitude quaternion (float).
1017:./state.h     **** static inline struct FloatQuat* stateGetNedToBodyQuat_f(void) {
1018:./state.h     ****   return orientationGetQuat_f(&state.ned_to_body_orientation);
1019:./state.h     **** }
1020:./state.h     **** 
1021:./state.h     **** /// Get vehicle body attitude rotation matrix (float).
1022:./state.h     **** static inline struct FloatRMat* stateGetNedToBodyRMat_f(void) {
1023:./state.h     ****   return orientationGetRMat_f(&state.ned_to_body_orientation);
1024:./state.h     **** }
1025:./state.h     **** 
1026:./state.h     **** /// Get vehicle body attitude euler angles (float).
1027:./state.h     **** static inline struct FloatEulers* stateGetNedToBodyEulers_f(void) {
  26              		.loc 1 1027 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  36              	.LBB4:
  37              	.LBB5:
  38              		.file 2 "./math/pprz_orientation_conversion.h"
   1:./math/pprz_orientation_conversion.h **** /*
   2:./math/pprz_orientation_conversion.h ****  * Copyright (C) 2011-2012 The Paparazzi Team
   3:./math/pprz_orientation_conversion.h ****  *
   4:./math/pprz_orientation_conversion.h ****  * This file is part of paparazzi.
   5:./math/pprz_orientation_conversion.h ****  *
   6:./math/pprz_orientation_conversion.h ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./math/pprz_orientation_conversion.h ****  * it under the terms of the GNU General Public License as published by
   8:./math/pprz_orientation_conversion.h ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./math/pprz_orientation_conversion.h ****  * any later version.
  10:./math/pprz_orientation_conversion.h ****  *
  11:./math/pprz_orientation_conversion.h ****  * paparazzi is distributed in the hope that it will be useful,
  12:./math/pprz_orientation_conversion.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./math/pprz_orientation_conversion.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./math/pprz_orientation_conversion.h ****  * GNU General Public License for more details.
  15:./math/pprz_orientation_conversion.h ****  *
  16:./math/pprz_orientation_conversion.h ****  * You should have received a copy of the GNU General Public License
  17:./math/pprz_orientation_conversion.h ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./math/pprz_orientation_conversion.h ****  * <http://www.gnu.org/licenses/>.
  19:./math/pprz_orientation_conversion.h ****  *
  20:./math/pprz_orientation_conversion.h ****  */
  21:./math/pprz_orientation_conversion.h **** 
  22:./math/pprz_orientation_conversion.h **** /**
  23:./math/pprz_orientation_conversion.h ****  * @file math/pprz_orientation_conversion.h
  24:./math/pprz_orientation_conversion.h ****  * Generic orientation representation and conversions.
  25:./math/pprz_orientation_conversion.h ****  *
  26:./math/pprz_orientation_conversion.h ****  * This file contains the functions to automatically convert between
  27:./math/pprz_orientation_conversion.h ****  * the different representations. They should normally not be used
  28:./math/pprz_orientation_conversion.h ****  * directly and instead the stateGet/Set interfaces used.
  29:./math/pprz_orientation_conversion.h ****  * Also see the @ref math_orientation_representation "Generic Orientation Representation" page.
  30:./math/pprz_orientation_conversion.h ****  *
  31:./math/pprz_orientation_conversion.h ****  * @author Felix Ruess <felix.ruess@gmail.com>
  32:./math/pprz_orientation_conversion.h ****  */
  33:./math/pprz_orientation_conversion.h **** 
  34:./math/pprz_orientation_conversion.h **** /**
  35:./math/pprz_orientation_conversion.h ****  * @addtogroup math
  36:./math/pprz_orientation_conversion.h ****  * @{
  37:./math/pprz_orientation_conversion.h ****  */
  38:./math/pprz_orientation_conversion.h **** 
  39:./math/pprz_orientation_conversion.h **** /**
  40:./math/pprz_orientation_conversion.h ****  * This generic orientation representation consists of a struct, containing the 6 orientation
  41:./math/pprz_orientation_conversion.h ****  * representations, and a status variable. The bits in the status variable indicate  which
  42:./math/pprz_orientation_conversion.h ****  * representations of the orientation are up-to-date.
  43:./math/pprz_orientation_conversion.h ****  *
  44:./math/pprz_orientation_conversion.h ****  * When a getter is used to get a certain representation, the status bit is checked to see if
  45:./math/pprz_orientation_conversion.h ****  * the current value is already available in the desired orientation representation.
  46:./math/pprz_orientation_conversion.h ****  * If the desired representation is not available, it will be calculated.
  47:./math/pprz_orientation_conversion.h ****  *
  48:./math/pprz_orientation_conversion.h ****  * When a setter is used to set a representation, all status bits are cleared, and only the
  49:./math/pprz_orientation_conversion.h ****  * status bit for the set representation is set to one.
  50:./math/pprz_orientation_conversion.h ****  */
  51:./math/pprz_orientation_conversion.h **** 
  52:./math/pprz_orientation_conversion.h **** /**
  53:./math/pprz_orientation_conversion.h ****  * @defgroup math_orientation_representation Generic Orientation Representations
  54:./math/pprz_orientation_conversion.h ****  * @{
  55:./math/pprz_orientation_conversion.h ****  */
  56:./math/pprz_orientation_conversion.h **** 
  57:./math/pprz_orientation_conversion.h **** #ifndef PPRZ_ORIENTATION_CONVERSION_H
  58:./math/pprz_orientation_conversion.h **** #define PPRZ_ORIENTATION_CONVERSION_H
  59:./math/pprz_orientation_conversion.h **** 
  60:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_int.h"
  61:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_float.h"
  62:./math/pprz_orientation_conversion.h **** 
  63:./math/pprz_orientation_conversion.h **** #include "std.h"
  64:./math/pprz_orientation_conversion.h **** 
  65:./math/pprz_orientation_conversion.h **** 
  66:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_I  0  ///< Quaternion (BFP int)
  67:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_I 1  ///< zyx Euler (BFP int)
  68:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_I  2  ///< Rotation Matrix (BFP int)
  69:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_F  3  ///< Quaternion (float)
  70:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_F 4  ///< zyx Euler (float)
  71:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_F  5  ///< Rotation Matrix (float)
  72:./math/pprz_orientation_conversion.h **** 
  73:./math/pprz_orientation_conversion.h **** /*
  74:./math/pprz_orientation_conversion.h ****  * @brief Struct with euler/rmat/quaternion orientation representations in BFP int and float
  75:./math/pprz_orientation_conversion.h ****  */
  76:./math/pprz_orientation_conversion.h **** struct OrientationReps {
  77:./math/pprz_orientation_conversion.h ****   /**
  78:./math/pprz_orientation_conversion.h ****    * Holds the status bits for all orientation representations.
  79:./math/pprz_orientation_conversion.h ****    * When the corresponding bit is set, the representation
  80:./math/pprz_orientation_conversion.h ****    * is already computed.
  81:./math/pprz_orientation_conversion.h ****    */
  82:./math/pprz_orientation_conversion.h ****   uint8_t status;
  83:./math/pprz_orientation_conversion.h **** 
  84:./math/pprz_orientation_conversion.h ****   /**
  85:./math/pprz_orientation_conversion.h ****    * Orientation quaternion.
  86:./math/pprz_orientation_conversion.h ****    * Units: #INT32_QUAT_FRAC
  87:./math/pprz_orientation_conversion.h ****    */
  88:./math/pprz_orientation_conversion.h ****   struct Int32Quat quat_i;
  89:./math/pprz_orientation_conversion.h **** 
  90:./math/pprz_orientation_conversion.h ****   /**
  91:./math/pprz_orientation_conversion.h ****    * Orientation in zyx euler angles.
  92:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_ANGLE_FRAC
  93:./math/pprz_orientation_conversion.h ****    */
  94:./math/pprz_orientation_conversion.h ****   struct Int32Eulers eulers_i;
  95:./math/pprz_orientation_conversion.h **** 
  96:./math/pprz_orientation_conversion.h ****   /**
  97:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
  98:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_TRIG_FRAC
  99:./math/pprz_orientation_conversion.h ****    */
 100:./math/pprz_orientation_conversion.h ****   struct Int32RMat rmat_i;
 101:./math/pprz_orientation_conversion.h **** 
 102:./math/pprz_orientation_conversion.h ****   /**
 103:./math/pprz_orientation_conversion.h ****    * Orientation as quaternion.
 104:./math/pprz_orientation_conversion.h ****    * Units: unit length quaternion
 105:./math/pprz_orientation_conversion.h ****    */
 106:./math/pprz_orientation_conversion.h ****   struct FloatQuat quat_f;
 107:./math/pprz_orientation_conversion.h **** 
 108:./math/pprz_orientation_conversion.h ****   /**
 109:./math/pprz_orientation_conversion.h ****    * Orienation in zyx euler angles.
 110:./math/pprz_orientation_conversion.h ****    * Units: rad
 111:./math/pprz_orientation_conversion.h ****    */
 112:./math/pprz_orientation_conversion.h ****   struct FloatEulers eulers_f;
 113:./math/pprz_orientation_conversion.h **** 
 114:./math/pprz_orientation_conversion.h ****   /**
 115:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
 116:./math/pprz_orientation_conversion.h ****    * Units: rad
 117:./math/pprz_orientation_conversion.h ****    */
 118:./math/pprz_orientation_conversion.h ****   struct FloatRMat   rmat_f;
 119:./math/pprz_orientation_conversion.h **** };
 120:./math/pprz_orientation_conversion.h **** 
 121:./math/pprz_orientation_conversion.h **** /************* declaration of transformation functions ************/
 122:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_i(struct OrientationReps* orientation);
 123:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_i(struct OrientationReps* orientation);
 124:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_i(struct OrientationReps* orientation);
 125:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_f(struct OrientationReps* orientation);
 126:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_f(struct OrientationReps* orientation);
 127:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_f(struct OrientationReps* orientation);
 128:./math/pprz_orientation_conversion.h **** 
 129:./math/pprz_orientation_conversion.h **** 
 130:./math/pprz_orientation_conversion.h **** /*********************** validity test functions ******************/
 131:./math/pprz_orientation_conversion.h **** /// Test if orientations are valid.
 132:./math/pprz_orientation_conversion.h **** static inline bool_t orienationCheckValid(struct OrientationReps* orientation) {
 133:./math/pprz_orientation_conversion.h ****   return (orientation->status);
 134:./math/pprz_orientation_conversion.h **** }
 135:./math/pprz_orientation_conversion.h **** 
 136:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (int).
 137:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_i(struct OrientationReps* orientation, struct Int32Quat* quat
 138:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 139:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 140:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_I);
 141:./math/pprz_orientation_conversion.h **** }
 142:./math/pprz_orientation_conversion.h **** 
 143:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (int).
 144:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_i(struct OrientationReps* orientation, struct Int32RMat* rmat
 145:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_i, *rmat);
 146:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 147:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_I);
 148:./math/pprz_orientation_conversion.h **** }
 149:./math/pprz_orientation_conversion.h **** 
 150:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (int).
 151:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_i(struct OrientationReps* orientation, struct Int32Eulers* 
 152:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_i, *eulers);
 153:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 154:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_I);
 155:./math/pprz_orientation_conversion.h **** }
 156:./math/pprz_orientation_conversion.h **** 
 157:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (float).
 158:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_f(struct OrientationReps* orientation, struct FloatQuat* quat
 159:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_f, *quat);
 160:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 161:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_F);
 162:./math/pprz_orientation_conversion.h **** }
 163:./math/pprz_orientation_conversion.h **** 
 164:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (float).
 165:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_f(struct OrientationReps* orientation, struct FloatRMat* rmat
 166:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_f, *rmat);
 167:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 168:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_F);
 169:./math/pprz_orientation_conversion.h **** }
 170:./math/pprz_orientation_conversion.h **** 
 171:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (float).
 172:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_f(struct OrientationReps* orientation, struct FloatEulers* 
 173:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_f, *eulers);
 174:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 175:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_F);
 176:./math/pprz_orientation_conversion.h **** }
 177:./math/pprz_orientation_conversion.h **** 
 178:./math/pprz_orientation_conversion.h **** 
 179:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude quaternion (int).
 180:./math/pprz_orientation_conversion.h **** static inline struct Int32Quat* orientationGetQuat_i(struct OrientationReps* orientation) {
 181:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_I))
 182:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_i(orientation);
 183:./math/pprz_orientation_conversion.h ****   return &orientation->quat_i;
 184:./math/pprz_orientation_conversion.h **** }
 185:./math/pprz_orientation_conversion.h **** 
 186:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude rotation matrix (int).
 187:./math/pprz_orientation_conversion.h **** static inline struct Int32RMat* orientationGetRMat_i(struct OrientationReps* orientation) {
 188:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_RMAT_I))
 189:./math/pprz_orientation_conversion.h ****     orientationCalcRMat_i(orientation);
 190:./math/pprz_orientation_conversion.h ****   return &orientation->rmat_i;
 191:./math/pprz_orientation_conversion.h **** }
 192:./math/pprz_orientation_conversion.h **** 
 193:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude euler angles (int).
 194:./math/pprz_orientation_conversion.h **** static inline struct Int32Eulers* orientationGetEulers_i(struct OrientationReps* orientation) {
 195:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_I))
 196:./math/pprz_orientation_conversion.h ****     orientationCalcEulers_i(orientation);
 197:./math/pprz_orientation_conversion.h ****   return &orientation->eulers_i;
 198:./math/pprz_orientation_conversion.h **** }
 199:./math/pprz_orientation_conversion.h **** 
 200:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude quaternion (float).
 201:./math/pprz_orientation_conversion.h **** static inline struct FloatQuat* orientationGetQuat_f(struct OrientationReps* orientation) {
 202:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_F))
 203:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_f(orientation);
 204:./math/pprz_orientation_conversion.h ****   return &orientation->quat_f;
 205:./math/pprz_orientation_conversion.h **** }
 206:./math/pprz_orientation_conversion.h **** 
 207:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude rotation matrix (float).
 208:./math/pprz_orientation_conversion.h **** static inline struct FloatRMat* orientationGetRMat_f(struct OrientationReps* orientation) {
 209:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_RMAT_F))
 210:./math/pprz_orientation_conversion.h ****     orientationCalcRMat_f(orientation);
 211:./math/pprz_orientation_conversion.h ****   return &orientation->rmat_f;
 212:./math/pprz_orientation_conversion.h **** }
 213:./math/pprz_orientation_conversion.h **** 
 214:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude euler angles (float).
 215:./math/pprz_orientation_conversion.h **** static inline struct FloatEulers* orientationGetEulers_f(struct OrientationReps* orientation) {
 216:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_F))
  39              		.loc 2 216 0
  40 0002 0548     		ldr	r0, .L4
  41 0004 90F8A431 		ldrb	r3, [r0, #420]	@ zero_extendqisi2
  42 0008 DB06     		lsls	r3, r3, #27
  43 000a 03D4     		bmi	.L2
 217:./math/pprz_orientation_conversion.h ****     orientationCalcEulers_f(orientation);
  44              		.loc 2 217 0
  45 000c 00F5D270 		add	r0, r0, #420
  46 0010 FFF7FEFF 		bl	orientationCalcEulers_f
  47              	.LVL1:
  48              	.L2:
  49              	.LBE5:
  50              	.LBE4:
1028:./state.h     ****   return orientationGetEulers_f(&state.ned_to_body_orientation);
1029:./state.h     **** }
  51              		.loc 1 1029 0
  52 0014 0148     		ldr	r0, .L4+4
  53 0016 08BD     		pop	{r3, pc}
  54              	.L5:
  55              		.align	2
  56              	.L4:
  57 0018 00000000 		.word	state
  58 001c F8010000 		.word	state+504
  59              		.cfi_endproc
  60              	.LFE98:
  62              		.section	.text.stabilization_attitude_reset_care_free_heading,"ax",%progbits
  63              		.align	1
  64              		.global	stabilization_attitude_reset_care_free_heading
  65              		.thumb
  66              		.thumb_func
  68              	stabilization_attitude_reset_care_free_heading:
  69              	.LFB121:
  70              		.file 3 "firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c"
   1:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** /*
   2:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * Copyright (C) 2012-2013 Felix Ruess <felix.ruess@gmail.com>
   3:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  *
   4:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * This file is part of paparazzi.
   5:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  *
   6:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * it under the terms of the GNU General Public License as published by
   8:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * any later version.
  10:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  *
  11:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * GNU General Public License for more details.
  15:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  *
  16:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * You should have received a copy of the GNU General Public License
  17:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * Boston, MA 02111-1307, USA.
  20:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  */
  21:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  22:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** /** @file stabilization_attitude_rc_setpoint.c
  23:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  *  Read an attitude setpoint from the RC.
  24:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  */
  25:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  26:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #include "firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.h"
  27:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  28:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #include "subsystems/radio_control.h"
  29:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #include "state.h"
  30:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #include "firmwares/rotorcraft/guidance/guidance_h.h"
  31:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #include "firmwares/rotorcraft/stabilization/stabilization_attitude.h"
  32:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #include "firmwares/rotorcraft/autopilot.h"
  33:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  34:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #ifndef RC_UPDATE_FREQ
  35:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #define RC_UPDATE_FREQ 40
  36:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #endif
  37:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  38:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** float care_free_heading = 0;
  39:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  40:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** /// reset the heading for care-free mode to current heading
  41:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_reset_care_free_heading(void) {
  71              		.loc 3 41 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75 0000 08B5     		push	{r3, lr}
  76              	.LCFI1:
  77              		.cfi_def_cfa_offset 8
  78              		.cfi_offset 3, -8
  79              		.cfi_offset 14, -4
  42:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   care_free_heading = stateGetNedToBodyEulers_f()->psi;
  80              		.loc 3 42 0
  81 0002 FFF7FEFF 		bl	stateGetNedToBodyEulers_f
  82              	.LVL2:
  83 0006 024B     		ldr	r3, .L7
  84 0008 8268     		ldr	r2, [r0, #8]	@ float
  85 000a 1A60     		str	r2, [r3, #0]	@ float
  86 000c 08BD     		pop	{r3, pc}
  87              	.L8:
  88 000e 00BF     		.align	2
  89              	.L7:
  90 0010 00000000 		.word	.LANCHOR0
  91              		.cfi_endproc
  92              	.LFE121:
  94              		.global	__aeabi_i2f
  95              		.global	__aeabi_fmul
  96              		.global	__aeabi_fcmpgt
  97              		.section	.text.stabilization_attitude_get_heading_i,"ax",%progbits
  98              		.align	1
  99              		.global	stabilization_attitude_get_heading_i
 100              		.thumb
 101              		.thumb_func
 103              	stabilization_attitude_get_heading_i:
 104              	.LFB122:
  43:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** }
  44:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  45:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** /*   This is a different way to obtain yaw. It will not switch when going beyond 90 degrees pitch.
  46:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****      However, when rolling more then 90 degrees in combination with pitch it switches. For a
  47:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****      transition vehicle this is better as 90 degrees pitch will occur, but more than 90 degrees rol
  48:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** int32_t stabilization_attitude_get_heading_i(void) {
 105              		.loc 3 48 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              	.LVL3:
 110 0000 38B5     		push	{r3, r4, r5, lr}
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 16
 113              		.cfi_offset 3, -16
 114              		.cfi_offset 4, -12
 115              		.cfi_offset 5, -8
 116              		.cfi_offset 14, -4
 117              	.LBB12:
 118              	.LBB13:
 119              	.LBB14:
 195:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_I))
 120              		.loc 2 195 0
 121 0002 2D4C     		ldr	r4, .L28
 122 0004 94F8A431 		ldrb	r3, [r4, #420]	@ zero_extendqisi2
 123 0008 9A07     		lsls	r2, r3, #30
 124 000a 03D4     		bmi	.L10
 196:./math/pprz_orientation_conversion.h ****     orientationCalcEulers_i(orientation);
 125              		.loc 2 196 0
 126 000c 04F5D270 		add	r0, r4, #420
 127 0010 FFF7FEFF 		bl	orientationCalcEulers_i
 128              	.LVL4:
 129              	.L10:
 130              	.LBE14:
 131              	.LBE13:
 132              	.LBE12:
  49:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   struct Int32Eulers* att = stateGetNedToBodyEulers_i();
  50:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  51:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   int32_t heading;
  52:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  53:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   if(abs(att->phi) < INT32_ANGLE_PI_2) {
 133              		.loc 3 53 0
 134 0014 D4F8B841 		ldr	r4, [r4, #440]
 135 0018 274D     		ldr	r5, .L28
 136 001a 04F5C950 		add	r0, r4, #6432
 137 001e B0F5495F 		cmp	r0, #12864
 138 0022 34D8     		bhi	.L11
 139              	.LBB15:
 140              	.LBB16:
  54:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     int32_t sin_theta;
  55:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     PPRZ_ITRIG_SIN(sin_theta, att->theta);
 141              		.loc 3 55 0
 142 0024 D5F8BC31 		ldr	r3, [r5, #444]
 143              	.LVL5:
 144              	.L12:
 145              		.loc 3 55 0 is_stmt 0 discriminator 1
 146 0028 43F24320 		movw	r0, #12867
 147 002c 8342     		cmp	r3, r0
 148 002e 03DD     		ble	.L25
 149              	.L13:
 150              		.loc 3 55 0 discriminator 2
 151 0030 A3F5C940 		sub	r0, r3, #25728
 152 0034 C31F     		subs	r3, r0, #7
 153              	.LVL6:
 154 0036 F7E7     		b	.L12
 155              	.LVL7:
 156              	.L25:
 157              		.loc 3 55 0 discriminator 4
 158 0038 2049     		ldr	r1, .L28+4
 159 003a 8B42     		cmp	r3, r1
 160 003c 03DA     		bge	.L27
 161              	.L15:
 162              		.loc 3 55 0 discriminator 5
 163 003e 03F5C941 		add	r1, r3, #25728
 164 0042 CB1D     		adds	r3, r1, #7
 165              	.LVL8:
 166 0044 F8E7     		b	.L25
 167              	.LVL9:
 168              	.L27:
 169              		.loc 3 55 0 discriminator 6
 170 0046 41F62112 		movw	r2, #6433
 171 004a 9342     		cmp	r3, r2
 172 004c 1C48     		ldr	r0, .L28+8
 173 004e 03DD     		ble	.L16
 174              		.loc 3 55 0 discriminator 7
 175 0050 C3F54953 		rsb	r3, r3, #12864
 176              	.LVL10:
 177 0054 0333     		adds	r3, r3, #3
 178              	.LVL11:
 179 0056 0CE0     		b	.L17
 180              	.L16:
 181              		.loc 3 55 0 discriminator 8
 182 0058 6FF4C951 		mvn	r1, #6432
 183 005c 8B42     		cmp	r3, r1
 184 005e 06DA     		bge	.L18
 185              		.loc 3 55 0 discriminator 9
 186 0060 C3F17F43 		rsb	r3, r3, #-16777216
 187              	.LVL12:
 188 0064 03F57F02 		add	r2, r3, #16711680
 189 0068 02F54D43 		add	r3, r2, #52480
 190 006c BD33     		adds	r3, r3, #189
 191              	.LVL13:
 192              	.L18:
 193              		.loc 3 55 0 discriminator 10
 194 006e 002B     		cmp	r3, #0
 195 0070 02DB     		blt	.L19
 196              	.L17:
 197              		.loc 3 55 0 discriminator 11
 198 0072 30F91320 		ldrsh	r2, [r0, r3, lsl #1]
 199              	.LVL14:
 200 0076 03E0     		b	.L20
 201              	.LVL15:
 202              	.L19:
 203              		.loc 3 55 0 discriminator 12
 204 0078 5942     		negs	r1, r3
 205 007a 30F91100 		ldrsh	r0, [r0, r1, lsl #1]
 206 007e 4242     		negs	r2, r0
 207              	.LVL16:
 208              	.L20:
 209              	.LBE16:
  56:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     heading = att->psi - INT_MULT_RSHIFT(sin_theta, att->phi, INT32_TRIG_FRAC);
 210              		.loc 3 56 0 is_stmt 1
 211 0080 6243     		muls	r2, r4, r2
 212              	.LVL17:
 213 0082 0D4C     		ldr	r4, .L28
 214 0084 D4F8C041 		ldr	r4, [r4, #448]
 215 0088 A4EBA230 		sub	r0, r4, r2, asr #14
 216              	.LVL18:
 217 008c 38BD     		pop	{r3, r4, r5, pc}
 218              	.LVL19:
 219              	.L11:
 220              	.LBE15:
  57:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   }
  58:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   else if(ANGLE_FLOAT_OF_BFP(att->theta) > 0)
 221              		.loc 3 58 0
 222 008e D5F8BC01 		ldr	r0, [r5, #444]
 223 0092 FFF7FEFF 		bl	__aeabi_i2f
 224              	.LVL20:
 225 0096 4FF06651 		mov	r1, #964689920
 226 009a FFF7FEFF 		bl	__aeabi_fmul
 227              	.LVL21:
 228 009e 0021     		movs	r1, #0
 229 00a0 FFF7FEFF 		bl	__aeabi_fcmpgt
 230              	.LVL22:
 231 00a4 18B1     		cbz	r0, .L26
  59:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     heading = att->psi - att->phi;
 232              		.loc 3 59 0
 233 00a6 D5F8C021 		ldr	r2, [r5, #448]
 234 00aa 101B     		subs	r0, r2, r4
 235              	.LVL23:
 236 00ac 38BD     		pop	{r3, r4, r5, pc}
 237              	.LVL24:
 238              	.L26:
  60:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   else
  61:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     heading = att->psi + att->phi;
 239              		.loc 3 61 0
 240 00ae D5F8C011 		ldr	r1, [r5, #448]
 241 00b2 6018     		adds	r0, r4, r1
 242              	.LVL25:
  62:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  63:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   return heading;
  64:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** }
 243              		.loc 3 64 0
 244 00b4 38BD     		pop	{r3, r4, r5, pc}
 245              	.L29:
 246 00b6 00BF     		.align	2
 247              	.L28:
 248 00b8 00000000 		.word	state
 249 00bc BDCDFFFF 		.word	-12867
 250 00c0 00000000 		.word	pprz_trig_int
 251              		.cfi_endproc
 252              	.LFE122:
 254              		.global	__aeabi_f2iz
 255              		.global	__aeabi_i2d
 256              		.global	__aeabi_dcmplt
 257              		.global	__aeabi_fsub
 258              		.global	__aeabi_fadd
 259              		.section	.text.stabilization_attitude_get_heading_f,"ax",%progbits
 260              		.align	1
 261              		.global	stabilization_attitude_get_heading_f
 262              		.thumb
 263              		.thumb_func
 265              	stabilization_attitude_get_heading_f:
 266              	.LFB123:
  65:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  66:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** float stabilization_attitude_get_heading_f(void) {
 267              		.loc 3 66 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271 0000 38B5     		push	{r3, r4, r5, lr}
 272              	.LCFI3:
 273              		.cfi_def_cfa_offset 16
 274              		.cfi_offset 3, -16
 275              		.cfi_offset 4, -12
 276              		.cfi_offset 5, -8
 277              		.cfi_offset 14, -4
  67:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   struct FloatEulers* att = stateGetNedToBodyEulers_f();
 278              		.loc 3 67 0
 279 0002 FFF7FEFF 		bl	stateGetNedToBodyEulers_f
 280              	.LVL26:
  68:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  69:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   float heading;
  70:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  71:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   if(abs(att->phi) < M_PI/2) {
 281              		.loc 3 71 0
 282 0006 0568     		ldr	r5, [r0, #0]	@ float
  67:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   struct FloatEulers* att = stateGetNedToBodyEulers_f();
 283              		.loc 3 67 0
 284 0008 0446     		mov	r4, r0
 285              	.LVL27:
 286              		.loc 3 71 0
 287 000a 2846     		mov	r0, r5
 288              	.LVL28:
 289 000c FFF7FEFF 		bl	__aeabi_f2iz
 290              	.LVL29:
 291 0010 0028     		cmp	r0, #0
 292 0012 B8BF     		it	lt
 293 0014 4042     		rsblt	r0, r0, #0
 294 0016 FFF7FEFF 		bl	__aeabi_i2d
 295              	.LVL30:
 296 001a 0FA3     		adr	r3, .L41
 297 001c D3E90023 		ldrd	r2, [r3]
 298 0020 FFF7FEFF 		bl	__aeabi_dcmplt
 299              	.LVL31:
 300 0024 40B1     		cbz	r0, .L38
  72:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     heading = att->psi - sinf(att->theta)*att->phi;
 301              		.loc 3 72 0
 302 0026 6068     		ldr	r0, [r4, #4]	@ float
 303 0028 FFF7FEFF 		bl	sinf
 304              	.LVL32:
 305 002c 2946     		mov	r1, r5
 306 002e FFF7FEFF 		bl	__aeabi_fmul
 307              	.LVL33:
 308 0032 0146     		mov	r1, r0
 309 0034 A068     		ldr	r0, [r4, #8]	@ float
 310 0036 06E0     		b	.L40
 311              	.L38:
  73:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   }
  74:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   else if(att->theta > 0)
 312              		.loc 3 74 0
 313 0038 6068     		ldr	r0, [r4, #4]	@ float
 314 003a 0021     		movs	r1, #0
 315 003c FFF7FEFF 		bl	__aeabi_fcmpgt
 316              	.LVL34:
 317 0040 20B1     		cbz	r0, .L39
  75:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     heading = att->psi - att->phi;
 318              		.loc 3 75 0
 319 0042 A068     		ldr	r0, [r4, #8]	@ float
 320 0044 2946     		mov	r1, r5
 321              	.L40:
 322 0046 FFF7FEFF 		bl	__aeabi_fsub
 323              	.LVL35:
 324 004a 38BD     		pop	{r3, r4, r5, pc}
 325              	.LVL36:
 326              	.L39:
  76:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   else
  77:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     heading = att->psi + att->phi;
 327              		.loc 3 77 0
 328 004c 2846     		mov	r0, r5
 329 004e A168     		ldr	r1, [r4, #8]	@ float
 330 0050 FFF7FEFF 		bl	__aeabi_fadd
 331              	.LVL37:
  78:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  79:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   return heading;
  80:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** }
 332              		.loc 3 80 0
 333 0054 38BD     		pop	{r3, r4, r5, pc}
 334              	.L42:
 335 0056 00BF     		.align	3
 336              	.L41:
 337 0058 182D4454 		.word	1413754136
 338 005c FB21F93F 		.word	1073291771
 339              		.cfi_endproc
 340              	.LFE123:
 342              		.global	__aeabi_f2d
 343              		.global	__aeabi_dmul
 344              		.global	__aeabi_d2iz
 345              		.section	.text.stabilization_attitude_read_rc_setpoint_eulers,"ax",%progbits
 346              		.align	1
 347              		.global	stabilization_attitude_read_rc_setpoint_eulers
 348              		.thumb
 349              		.thumb_func
 351              	stabilization_attitude_read_rc_setpoint_eulers:
 352              	.LFB124:
  81:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  82:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** /** Read attitude setpoint from RC as euler angles.
  83:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * @param[in]  in_flight  true if in flight
  84:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * @param[out] sp         attitude setpoint as euler angles
  85:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  */
  86:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_setpoint_eulers(struct Int32Eulers *sp, bool_t in_flight) {
 353              		.loc 3 86 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357              	.LVL38:
 358 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 359              	.LCFI4:
 360              		.cfi_def_cfa_offset 24
 361              		.cfi_offset 3, -24
 362              		.cfi_offset 4, -20
 363              		.cfi_offset 5, -16
 364              		.cfi_offset 6, -12
 365              		.cfi_offset 7, -8
 366              		.cfi_offset 14, -4
  87:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   const int32_t max_rc_phi = (int32_t) ANGLE_BFP_OF_REAL(STABILIZATION_ATTITUDE_SP_MAX_PHI);
  88:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   const int32_t max_rc_theta = (int32_t) ANGLE_BFP_OF_REAL(STABILIZATION_ATTITUDE_SP_MAX_THETA);
  89:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   const int32_t max_rc_r = (int32_t) ANGLE_BFP_OF_REAL(STABILIZATION_ATTITUDE_SP_MAX_R);
  90:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  91:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   sp->phi = (int32_t) ((radio_control.values[RADIO_ROLL] * max_rc_phi) /  MAX_PPRZ);
 367              		.loc 3 91 0
 368 0002 7B4B     		ldr	r3, .L80+16
  86:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_setpoint_eulers(struct Int32Eulers *sp, bool_t in_flight) {
 369              		.loc 3 86 0
 370 0004 0446     		mov	r4, r0
 371              		.loc 3 91 0
 372 0006 B3F90A50 		ldrsh	r5, [r3, #10]
  92:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   sp->theta = (int32_t) ((radio_control.values[RADIO_PITCH] * max_rc_theta) /  MAX_PPRZ);
 373              		.loc 3 92 0
 374 000a B3F90860 		ldrsh	r6, [r3, #8]
  91:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   sp->phi = (int32_t) ((radio_control.values[RADIO_ROLL] * max_rc_phi) /  MAX_PPRZ);
 375              		.loc 3 91 0
 376 000e 4FF40660 		mov	r0, #2144
 377              	.LVL39:
 378 0012 4543     		muls	r5, r0, r5
 379              		.loc 3 92 0
 380 0014 4643     		muls	r6, r0, r6
  91:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   sp->phi = (int32_t) ((radio_control.values[RADIO_ROLL] * max_rc_phi) /  MAX_PPRZ);
 381              		.loc 3 91 0
 382 0016 4FF41652 		mov	r2, #9600
 383 001a 95FBF2F5 		sdiv	r5, r5, r2
 384              		.loc 3 92 0
 385 001e 96FBF2F6 		sdiv	r6, r6, r2
  91:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   sp->phi = (int32_t) ((radio_control.values[RADIO_ROLL] * max_rc_phi) /  MAX_PPRZ);
 386              		.loc 3 91 0
 387 0022 2560     		str	r5, [r4, #0]
 388              		.loc 3 92 0
 389 0024 6660     		str	r6, [r4, #4]
  93:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
  94:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   if (in_flight) {
 390              		.loc 3 94 0
 391 0026 0029     		cmp	r1, #0
 392 0028 00F0CC80 		beq	.L44
  95:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     if (YAW_DEADBAND_EXCEEDED()) {
 393              		.loc 3 95 0
 394 002c 9889     		ldrh	r0, [r3, #12]
 395 002e 00F5FA72 		add	r2, r0, #500
 396 0032 91B2     		uxth	r1, r2
 397              	.LVL40:
 398 0034 B1F57A7F 		cmp	r1, #1000
 399 0038 04D8     		bhi	.L45
 400              	.L52:
  96:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->psi += (int32_t) ((radio_control.values[RADIO_YAW] * max_rc_r) /  MAX_PPRZ / RC_UPDATE_FR
  97:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       INT32_ANGLE_NORMALIZE(sp->psi);
  98:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     }
  99:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     if (autopilot_mode == AP_MODE_FORWARD) {
 401              		.loc 3 99 0
 402 003a 6E49     		ldr	r1, .L80+20
 403 003c 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 404 003e 0F2A     		cmp	r2, #15
 405 0040 4CD1     		bne	.L47
 406 0042 1CE0     		b	.L77
 407              	.L45:
  96:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->psi += (int32_t) ((radio_control.values[RADIO_YAW] * max_rc_r) /  MAX_PPRZ / RC_UPDATE_FR
 408              		.loc 3 96 0
 409 0044 03B2     		sxth	r3, r0
 410 0046 4FF44960 		mov	r0, #3216
 411 004a 4343     		muls	r3, r0, r3
 412 004c 6A4A     		ldr	r2, .L80+24
 413 004e 93FBF2F1 		sdiv	r1, r3, r2
 414 0052 A368     		ldr	r3, [r4, #8]
 415 0054 5818     		adds	r0, r3, r1
 416 0056 A060     		str	r0, [r4, #8]
 417              	.L48:
  97:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       INT32_ANGLE_NORMALIZE(sp->psi);
 418              		.loc 3 97 0 discriminator 1
 419 0058 A168     		ldr	r1, [r4, #8]
 420 005a 43F24322 		movw	r2, #12867
 421 005e 9142     		cmp	r1, r2
 422 0060 04DD     		ble	.L74
 423              	.L49:
  97:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       INT32_ANGLE_NORMALIZE(sp->psi);
 424              		.loc 3 97 0 is_stmt 0 discriminator 2
 425 0062 A1F5C940 		sub	r0, r1, #25728
 426 0066 C31F     		subs	r3, r0, #7
 427 0068 A360     		str	r3, [r4, #8]
 428 006a F5E7     		b	.L48
 429              	.L74:
  97:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       INT32_ANGLE_NORMALIZE(sp->psi);
 430              		.loc 3 97 0 discriminator 4
 431 006c A368     		ldr	r3, [r4, #8]
 432 006e 6348     		ldr	r0, .L80+28
 433 0070 8342     		cmp	r3, r0
 434 0072 E2DA     		bge	.L52
 435              	.L51:
  97:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       INT32_ANGLE_NORMALIZE(sp->psi);
 436              		.loc 3 97 0 discriminator 5
 437 0074 03F5C942 		add	r2, r3, #25728
 438 0078 D11D     		adds	r1, r2, #7
 439 007a A160     		str	r1, [r4, #8]
 440 007c F6E7     		b	.L74
 441              	.L77:
 442              	.LVL41:
 443              	.LBB25:
 100:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       //Coordinated turn
 101:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       //feedforward estimate angular rotation omega = g*tan(phi)/v
 102:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       //Take v = 9.81/1.3 m/s
 103:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       int32_t omega;
 104:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       const int32_t max_phi = ANGLE_BFP_OF_REAL(RadOfDeg(85.0));
 105:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       if(abs(sp->phi) < max_phi)
 444              		.loc 3 105 0 is_stmt 1
 445 007e 05F5BD50 		add	r0, r5, #6048
 446 0082 1B30     		adds	r0, r0, #27
 447 0084 42F67673 		movw	r3, #12150
 448 0088 9842     		cmp	r0, r3
 449 008a 0ED8     		bhi	.L53
 106:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****         omega = ANGLE_BFP_OF_REAL(1.3*tanf(ANGLE_FLOAT_OF_BFP(sp->phi)));
 450              		.loc 3 106 0
 451 008c 2846     		mov	r0, r5
 452 008e FFF7FEFF 		bl	__aeabi_i2f
 453              	.LVL42:
 454 0092 4FF06651 		mov	r1, #964689920
 455 0096 FFF7FEFF 		bl	__aeabi_fmul
 456              	.LVL43:
 457 009a FFF7FEFF 		bl	tanf
 458              	.LVL44:
 459 009e FFF7FEFF 		bl	__aeabi_f2d
 460              	.LVL45:
 461 00a2 4FA3     		adr	r3, .L80
 462 00a4 D3E90023 		ldrd	r2, [r3]
 463 00a8 0AE0     		b	.L76
 464              	.L53:
 107:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       else //max 60 degrees roll, then take constant omega
 108:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****         omega = ANGLE_BFP_OF_REAL(1.3*1.72305* ((sp->phi > 0) - (sp->phi < 0)));
 465              		.loc 3 108 0
 466 00aa E80F     		lsrs	r0, r5, #31
 467 00ac 002D     		cmp	r5, #0
 468 00ae D4BF     		ite	le
 469 00b0 4042     		rsble	r0, r0, #0
 470 00b2 C0F10100 		rsbgt	r0, r0, #1
 471 00b6 FFF7FEFF 		bl	__aeabi_i2d
 472              	.LVL46:
 473 00ba 4BA3     		adr	r3, .L80+8
 474 00bc D3E90023 		ldrd	r2, [r3]
 475              	.L76:
 476 00c0 FFF7FEFF 		bl	__aeabi_dmul
 477              	.LVL47:
 478 00c4 0022     		movs	r2, #0
 479 00c6 4E4B     		ldr	r3, .L80+32
 480 00c8 FFF7FEFF 		bl	__aeabi_dmul
 481              	.LVL48:
 482 00cc FFF7FEFF 		bl	__aeabi_d2iz
 483              	.LVL49:
 109:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 110:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->psi += omega/RC_UPDATE_FREQ;
 484              		.loc 3 110 0
 485 00d0 2821     		movs	r1, #40
 486 00d2 90FBF1F2 		sdiv	r2, r0, r1
 487 00d6 A068     		ldr	r0, [r4, #8]
 488              	.LVL50:
 489 00d8 8318     		adds	r3, r0, r2
 490 00da A360     		str	r3, [r4, #8]
 491              	.LVL51:
 492              	.L47:
 493              	.LBE25:
 111:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     }
 112:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #ifdef STABILIZATION_ATTITUDE_SP_PSI_DELTA_LIMIT
 113:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     // Make sure the yaw setpoint does not differ too much from the real yaw
 114:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     // to prevent a sudden switch at 180 deg
 115:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     const int32_t delta_limit = ANGLE_BFP_OF_REAL(STABILIZATION_ATTITUDE_SP_PSI_DELTA_LIMIT);
 116:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 117:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     int32_t heading = stabilization_attitude_get_heading_i();
 118:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 119:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     int32_t delta_psi = sp->psi - heading;
 120:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     INT32_ANGLE_NORMALIZE(delta_psi);
 121:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     if (delta_psi > delta_limit){
 122:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->psi = heading + delta_limit;
 123:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     }
 124:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     else if (delta_psi < -delta_limit){
 125:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->psi = heading - delta_limit;
 126:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     }
 127:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     INT32_ANGLE_NORMALIZE(sp->psi);
 128:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #endif
 129:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     //Care Free mode
 130:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     if (guidance_h_mode == GUIDANCE_H_MODE_CARE_FREE) {
 494              		.loc 3 130 0
 495 00dc 4949     		ldr	r1, .L80+36
 496 00de 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 497 00e0 062A     		cmp	r2, #6
 498 00e2 7BD1     		bne	.L43
 499              	.LBB26:
 131:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       //care_free_heading has been set to current psi when entering care free mode.
 132:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       int32_t cos_psi;
 133:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       int32_t sin_psi;
 134:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       int32_t temp_theta;
 135:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       int32_t care_free_delta_psi_i;
 136:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 137:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       care_free_delta_psi_i = sp->psi - ANGLE_BFP_OF_REAL(care_free_heading);
 500              		.loc 3 137 0
 501 00e4 A068     		ldr	r0, [r4, #8]
 502 00e6 FFF7FEFF 		bl	__aeabi_i2f
 503              	.LVL52:
 504 00ea 0746     		mov	r7, r0
 505 00ec 4648     		ldr	r0, .L80+40
 506 00ee 4FF08B41 		mov	r1, #1166016512
 507 00f2 0068     		ldr	r0, [r0, #0]	@ float
 508 00f4 FFF7FEFF 		bl	__aeabi_fmul
 509              	.LVL53:
 510 00f8 0146     		mov	r1, r0
 511 00fa 3846     		mov	r0, r7
 512 00fc FFF7FEFF 		bl	__aeabi_fsub
 513              	.LVL54:
 514 0100 FFF7FEFF 		bl	__aeabi_f2iz
 515              	.LVL55:
 516              	.L56:
 138:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 139:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       INT32_ANGLE_NORMALIZE(care_free_delta_psi_i);
 517              		.loc 3 139 0 discriminator 1
 518 0104 43F24323 		movw	r3, #12867
 519 0108 9842     		cmp	r0, r3
 520 010a 03DD     		ble	.L75
 521              	.L57:
 522              		.loc 3 139 0 is_stmt 0 discriminator 2
 523 010c A0F5C943 		sub	r3, r0, #25728
 524 0110 D81F     		subs	r0, r3, #7
 525              	.LVL56:
 526 0112 F7E7     		b	.L56
 527              	.LVL57:
 528              	.L75:
 529              		.loc 3 139 0 discriminator 4
 530 0114 3949     		ldr	r1, .L80+28
 531 0116 8842     		cmp	r0, r1
 532 0118 03DA     		bge	.L78
 533              	.L59:
 534              		.loc 3 139 0 discriminator 5
 535 011a 00F5C940 		add	r0, r0, #25728
 536              	.LVL58:
 537 011e 0730     		adds	r0, r0, #7
 538              	.LVL59:
 539 0120 F8E7     		b	.L75
 540              	.LVL60:
 541              	.L78:
 542              	.LBB27:
 140:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 141:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       PPRZ_ITRIG_SIN(sin_psi, care_free_delta_psi_i);
 543              		.loc 3 141 0 is_stmt 1 discriminator 1
 544 0122 41F62112 		movw	r2, #6433
 545 0126 9042     		cmp	r0, r2
 546 0128 3849     		ldr	r1, .L80+44
 547 012a 03DD     		ble	.L60
 548              		.loc 3 141 0 is_stmt 0 discriminator 7
 549 012c C0F54953 		rsb	r3, r0, #12864
 550 0130 0333     		adds	r3, r3, #3
 551              	.LVL61:
 552 0132 09E0     		b	.L61
 553              	.LVL62:
 554              	.L60:
 555              		.loc 3 141 0 discriminator 8
 556 0134 6FF4C953 		mvn	r3, #6432
 557 0138 9842     		cmp	r0, r3
 558 013a B6BF     		itet	lt
 559 013c 2F4B     		ldrlt	r3, .L80+28
 560 013e 0346     		movge	r3, r0
 561 0140 C0EB0303 		rsblt	r3, r0, r3
 562              	.LVL63:
 563 0144 002B     		cmp	r3, #0
 564 0146 02DB     		blt	.L63
 565              	.L61:
 566              		.loc 3 141 0 discriminator 11
 567 0148 31F91320 		ldrsh	r2, [r1, r3, lsl #1]
 568              	.LVL64:
 569 014c 03E0     		b	.L64
 570              	.LVL65:
 571              	.L63:
 572              		.loc 3 141 0 discriminator 12
 573 014e 5A42     		negs	r2, r3
 574 0150 31F91210 		ldrsh	r1, [r1, r2, lsl #1]
 575 0154 4A42     		negs	r2, r1
 576              	.LVL66:
 577              	.L64:
 578              	.LBE27:
 579              	.LBB28:
 142:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       PPRZ_ITRIG_COS(cos_psi, care_free_delta_psi_i);
 580              		.loc 3 142 0 is_stmt 1
 581 0156 00F5C950 		add	r0, r0, #6432
 582              	.LVL67:
 583 015a 431C     		adds	r3, r0, #1
 584              	.LVL68:
 585              	.L65:
 586              		.loc 3 142 0 is_stmt 0 discriminator 1
 587 015c 43F24321 		movw	r1, #12867
 588 0160 8B42     		cmp	r3, r1
 589 0162 03DD     		ble	.L79
 590              	.L66:
 591              		.loc 3 142 0 discriminator 2
 592 0164 A3F5C941 		sub	r1, r3, #25728
 593 0168 CB1F     		subs	r3, r1, #7
 594              	.LVL69:
 595 016a F7E7     		b	.L65
 596              	.L79:
 597              		.loc 3 142 0 discriminator 4
 598 016c 41F62110 		movw	r0, #6433
 599              	.LVL70:
 600 0170 8342     		cmp	r3, r0
 601 0172 2649     		ldr	r1, .L80+44
 602 0174 03DD     		ble	.L67
 603              		.loc 3 142 0 discriminator 7
 604 0176 C3F54950 		rsb	r0, r3, #12864
 605 017a C31C     		adds	r3, r0, #3
 606              	.LVL71:
 607 017c 0CE0     		b	.L68
 608              	.L67:
 609              		.loc 3 142 0 discriminator 8
 610 017e 6FF4C950 		mvn	r0, #6432
 611 0182 8342     		cmp	r3, r0
 612 0184 06DA     		bge	.L69
 613              		.loc 3 142 0 discriminator 9
 614 0186 C3F17F43 		rsb	r3, r3, #-16777216
 615              	.LVL72:
 616 018a 03F57F00 		add	r0, r3, #16711680
 617 018e 00F54D43 		add	r3, r0, #52480
 618 0192 BD33     		adds	r3, r3, #189
 619              	.LVL73:
 620              	.L69:
 621              		.loc 3 142 0 discriminator 10
 622 0194 002B     		cmp	r3, #0
 623 0196 02DB     		blt	.L70
 624              	.L68:
 625              		.loc 3 142 0 discriminator 11
 626 0198 31F91330 		ldrsh	r3, [r1, r3, lsl #1]
 627              	.LVL74:
 628 019c 03E0     		b	.L71
 629              	.LVL75:
 630              	.L70:
 631              		.loc 3 142 0 discriminator 12
 632 019e 5842     		negs	r0, r3
 633 01a0 31F91010 		ldrsh	r1, [r1, r0, lsl #1]
 634 01a4 4B42     		negs	r3, r1
 635              	.LVL76:
 636              	.L71:
 637              	.LBE28:
 143:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 144:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       temp_theta = INT_MULT_RSHIFT(cos_psi, sp->theta, INT32_ANGLE_FRAC) - INT_MULT_RSHIFT(sin_psi,
 145:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->phi = INT_MULT_RSHIFT(cos_psi, sp->phi, INT32_ANGLE_FRAC) - INT_MULT_RSHIFT(sin_psi, sp->
 638              		.loc 3 145 0 is_stmt 1
 639 01a6 06FB02F1 		mul	r1, r6, r2
 144:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       temp_theta = INT_MULT_RSHIFT(cos_psi, sp->theta, INT32_ANGLE_FRAC) - INT_MULT_RSHIFT(sin_psi,
 640              		.loc 3 144 0
 641 01aa 6A43     		muls	r2, r5, r2
 642              	.LVL77:
 643              		.loc 3 145 0
 644 01ac 05FB03F0 		mul	r0, r5, r3
 144:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       temp_theta = INT_MULT_RSHIFT(cos_psi, sp->theta, INT32_ANGLE_FRAC) - INT_MULT_RSHIFT(sin_psi,
 645              		.loc 3 144 0
 646 01b0 7343     		muls	r3, r6, r3
 647              	.LVL78:
 648              		.loc 3 145 0
 649 01b2 0913     		asrs	r1, r1, #12
 144:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       temp_theta = INT_MULT_RSHIFT(cos_psi, sp->theta, INT32_ANGLE_FRAC) - INT_MULT_RSHIFT(sin_psi,
 650              		.loc 3 144 0
 651 01b4 1213     		asrs	r2, r2, #12
 652              		.loc 3 145 0
 653 01b6 C1EB2030 		rsb	r0, r1, r0, asr #12
 144:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       temp_theta = INT_MULT_RSHIFT(cos_psi, sp->theta, INT32_ANGLE_FRAC) - INT_MULT_RSHIFT(sin_psi,
 654              		.loc 3 144 0
 655 01ba C2EB2333 		rsb	r3, r2, r3, asr #12
 656              	.LVL79:
 657              		.loc 3 145 0
 658 01be 2060     		str	r0, [r4, #0]
 146:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 147:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->theta = temp_theta;
 659              		.loc 3 147 0
 660 01c0 6360     		str	r3, [r4, #4]
 661 01c2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 662              	.LVL80:
 663              	.L44:
 664              	.LBE26:
 665              	.LBB29:
 666              	.LBB30:
 667              	.LBB31:
 195:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_I))
 668              		.loc 2 195 0
 669 01c4 124D     		ldr	r5, .L80+48
 670 01c6 95F8A411 		ldrb	r1, [r5, #420]	@ zero_extendqisi2
 671              	.LVL81:
 672 01ca 8907     		lsls	r1, r1, #30
 673 01cc 03D4     		bmi	.L72
 196:./math/pprz_orientation_conversion.h ****     orientationCalcEulers_i(orientation);
 674              		.loc 2 196 0
 675 01ce 05F5D270 		add	r0, r5, #420
 676 01d2 FFF7FEFF 		bl	orientationCalcEulers_i
 677              	.LVL82:
 678              	.L72:
 679              	.LBE31:
 680              	.LBE30:
 681              	.LBE29:
 148:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     }
 149:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   }
 150:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   else { /* if not flying, use current yaw as setpoint */
 151:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     sp->psi = stateGetNedToBodyEulers_i()->psi;
 682              		.loc 3 151 0
 683 01d6 D5F8C031 		ldr	r3, [r5, #448]
 684 01da A360     		str	r3, [r4, #8]
 685              	.LVL83:
 686              	.L43:
 687 01dc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 688              	.L81:
 689 01de 00BF     		.align	3
 690              	.L80:
 691 01e0 CDCCCCCC 		.word	3435973837
 692 01e4 CCCCF43F 		.word	1073007820
 693 01e8 257A19C5 		.word	3306781221
 694 01ec 72EB0140 		.word	1073867634
 695 01f0 00000000 		.word	radio_control
 696 01f4 00000000 		.word	autopilot_mode
 697 01f8 00DC0500 		.word	384000
 698 01fc BDCDFFFF 		.word	-12867
 699 0200 0000B040 		.word	1085276160
 700 0204 00000000 		.word	guidance_h_mode
 701 0208 00000000 		.word	.LANCHOR0
 702 020c 00000000 		.word	pprz_trig_int
 703 0210 00000000 		.word	state
 704              		.cfi_endproc
 705              	.LFE124:
 707              		.global	__aeabi_ddiv
 708              		.global	__aeabi_d2f
 709              		.global	__aeabi_dadd
 710              		.global	__aeabi_dsub
 711              		.global	__aeabi_dcmpgt
 712              		.global	__aeabi_fcmplt
 713              		.global	__aeabi_fdiv
 714 0214 AFF30080 		.section	.text.stabilization_attitude_read_rc_setpoint_eulers_f,"ax",%progbits
 715              		.align	1
 716              		.global	stabilization_attitude_read_rc_setpoint_eulers_f
 717              		.thumb
 718              		.thumb_func
 720              	stabilization_attitude_read_rc_setpoint_eulers_f:
 721              	.LFB125:
 152:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   }
 153:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** }
 154:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 155:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 156:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_setpoint_eulers_f(struct FloatEulers *sp, bool_t in_flight) {
 722              		.loc 3 156 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726              	.LVL84:
 727 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 728              	.LCFI5:
 729              		.cfi_def_cfa_offset 32
 730              		.cfi_offset 3, -32
 731              		.cfi_offset 4, -28
 732              		.cfi_offset 5, -24
 733              		.cfi_offset 6, -20
 734              		.cfi_offset 7, -16
 735              		.cfi_offset 8, -12
 736              		.cfi_offset 9, -8
 737              		.cfi_offset 14, -4
 157:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   sp->phi = (radio_control.values[RADIO_ROLL]  * STABILIZATION_ATTITUDE_SP_MAX_PHI / MAX_PPRZ);
 738              		.loc 3 157 0
 739 0004 964C     		ldr	r4, .L111+56
 156:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_setpoint_eulers_f(struct FloatEulers *sp, bool_t in_flight) {
 740              		.loc 3 156 0
 741 0006 0646     		mov	r6, r0
 742              		.loc 3 157 0
 743 0008 B4F90A00 		ldrsh	r0, [r4, #10]
 744              	.LVL85:
 156:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_setpoint_eulers_f(struct FloatEulers *sp, bool_t in_flight) {
 745              		.loc 3 156 0
 746 000c 0D46     		mov	r5, r1
 747              		.loc 3 157 0
 748 000e FFF7FEFF 		bl	__aeabi_i2d
 749              	.LVL86:
 750 0012 85A3     		adr	r3, .L111
 751 0014 D3E90023 		ldrd	r2, [r3]
 752 0018 FFF7FEFF 		bl	__aeabi_dmul
 753              	.LVL87:
 754 001c 0022     		movs	r2, #0
 755 001e 914B     		ldr	r3, .L111+60
 756 0020 FFF7FEFF 		bl	__aeabi_ddiv
 757              	.LVL88:
 758 0024 FFF7FEFF 		bl	__aeabi_d2f
 759              	.LVL89:
 760 0028 3060     		str	r0, [r6, #0]	@ float
 761 002a 0746     		mov	r7, r0
 158:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   sp->theta = (radio_control.values[RADIO_PITCH] * STABILIZATION_ATTITUDE_SP_MAX_THETA / MAX_PPRZ);
 762              		.loc 3 158 0
 763 002c B4F90800 		ldrsh	r0, [r4, #8]
 764 0030 FFF7FEFF 		bl	__aeabi_i2d
 765              	.LVL90:
 766 0034 7CA3     		adr	r3, .L111
 767 0036 D3E90023 		ldrd	r2, [r3]
 768 003a FFF7FEFF 		bl	__aeabi_dmul
 769              	.LVL91:
 770 003e 0022     		movs	r2, #0
 771 0040 884B     		ldr	r3, .L111+60
 772 0042 FFF7FEFF 		bl	__aeabi_ddiv
 773              	.LVL92:
 774 0046 FFF7FEFF 		bl	__aeabi_d2f
 775              	.LVL93:
 776 004a 8046     		mov	r8, r0
 777 004c 7060     		str	r0, [r6, #4]	@ float
 159:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 160:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   if (in_flight) {
 778              		.loc 3 160 0
 779 004e 002D     		cmp	r5, #0
 780 0050 00F0E480 		beq	.L83
 161:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     if (YAW_DEADBAND_EXCEEDED()) {
 781              		.loc 3 161 0
 782 0054 B4F80C90 		ldrh	r9, [r4, #12]
 783 0058 09F5FA70 		add	r0, r9, #500
 784 005c 81B2     		uxth	r1, r0
 785 005e B1F57A7F 		cmp	r1, #1000
 786 0062 04D8     		bhi	.L84
 787              	.L91:
 162:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->psi += (radio_control.values[RADIO_YAW] * STABILIZATION_ATTITUDE_SP_MAX_R / MAX_PPRZ / RC
 163:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       FLOAT_ANGLE_NORMALIZE(sp->psi);
 164:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     }
 165:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     if (autopilot_mode == AP_MODE_FORWARD) {
 788              		.loc 3 165 0
 789 0064 804A     		ldr	r2, .L111+64
 790 0066 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 791 0068 0F2B     		cmp	r3, #15
 792 006a 7ED1     		bne	.L86
 793 006c 48E0     		b	.L109
 794              	.L84:
 162:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->psi += (radio_control.values[RADIO_YAW] * STABILIZATION_ATTITUDE_SP_MAX_R / MAX_PPRZ / RC
 795              		.loc 3 162 0
 796 006e B068     		ldr	r0, [r6, #8]	@ float
 797 0070 FFF7FEFF 		bl	__aeabi_f2d
 798              	.LVL94:
 799 0074 0446     		mov	r4, r0
 800 0076 0FFA89F0 		sxth	r0, r9
 801 007a 0D46     		mov	r5, r1
 802 007c FFF7FEFF 		bl	__aeabi_i2d
 803              	.LVL95:
 804 0080 6BA3     		adr	r3, .L111+8
 805 0082 D3E90023 		ldrd	r2, [r3]
 806 0086 FFF7FEFF 		bl	__aeabi_dmul
 807              	.LVL96:
 808 008a 0022     		movs	r2, #0
 809 008c 754B     		ldr	r3, .L111+60
 810 008e FFF7FEFF 		bl	__aeabi_ddiv
 811              	.LVL97:
 812 0092 0022     		movs	r2, #0
 813 0094 754B     		ldr	r3, .L111+68
 814 0096 FFF7FEFF 		bl	__aeabi_ddiv
 815              	.LVL98:
 816 009a 0246     		mov	r2, r0
 817 009c 0B46     		mov	r3, r1
 818 009e 2046     		mov	r0, r4
 819 00a0 2946     		mov	r1, r5
 820 00a2 FFF7FEFF 		bl	__aeabi_dadd
 821              	.LVL99:
 822              	.L106:
 163:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       FLOAT_ANGLE_NORMALIZE(sp->psi);
 823              		.loc 3 163 0 discriminator 2
 824 00a6 FFF7FEFF 		bl	__aeabi_d2f
 825              	.LVL100:
 826 00aa B060     		str	r0, [r6, #8]	@ float
 827 00ac B068     		ldr	r0, [r6, #8]	@ float
 828 00ae FFF7FEFF 		bl	__aeabi_f2d
 829              	.LVL101:
 830 00b2 61A3     		adr	r3, .L111+16
 831 00b4 D3E90023 		ldrd	r2, [r3]
 832 00b8 0446     		mov	r4, r0
 833 00ba 0D46     		mov	r5, r1
 834 00bc FFF7FEFF 		bl	__aeabi_dcmpgt
 835              	.LVL102:
 836 00c0 38B1     		cbz	r0, .L103
 837              	.L88:
 838 00c2 2046     		mov	r0, r4
 839 00c4 2946     		mov	r1, r5
 840 00c6 5EA3     		adr	r3, .L111+24
 841 00c8 D3E90023 		ldrd	r2, [r3]
 842 00cc FFF7FEFF 		bl	__aeabi_dsub
 843              	.LVL103:
 844 00d0 E9E7     		b	.L106
 845              	.L103:
 163:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       FLOAT_ANGLE_NORMALIZE(sp->psi);
 846              		.loc 3 163 0 is_stmt 0 discriminator 4
 847 00d2 B068     		ldr	r0, [r6, #8]	@ float
 848 00d4 FFF7FEFF 		bl	__aeabi_f2d
 849              	.LVL104:
 850 00d8 5BA3     		adr	r3, .L111+32
 851 00da D3E90023 		ldrd	r2, [r3]
 852 00de 0446     		mov	r4, r0
 853 00e0 0D46     		mov	r5, r1
 854 00e2 FFF7FEFF 		bl	__aeabi_dcmplt
 855              	.LVL105:
 856 00e6 0028     		cmp	r0, #0
 857 00e8 BCD0     		beq	.L91
 858              	.L90:
 163:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       FLOAT_ANGLE_NORMALIZE(sp->psi);
 859              		.loc 3 163 0 discriminator 5
 860 00ea 55A3     		adr	r3, .L111+24
 861 00ec D3E90023 		ldrd	r2, [r3]
 862 00f0 2046     		mov	r0, r4
 863 00f2 2946     		mov	r1, r5
 864 00f4 FFF7FEFF 		bl	__aeabi_dadd
 865              	.LVL106:
 866 00f8 FFF7FEFF 		bl	__aeabi_d2f
 867              	.LVL107:
 868 00fc B060     		str	r0, [r6, #8]	@ float
 869 00fe E8E7     		b	.L103
 870              	.L109:
 871              	.LVL108:
 872              	.LBB32:
 166:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       //Coordinated turn
 167:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       //feedforward estimate angular rotation omega = g*tan(phi)/v
 168:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       //Take v = 9.81/1.3 m/s
 169:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       float omega;
 170:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       const float max_phi = RadOfDeg(85.0);
 171:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       if(abs(sp->phi) < max_phi)
 873              		.loc 3 171 0 is_stmt 1
 874 0100 3846     		mov	r0, r7
 875 0102 FFF7FEFF 		bl	__aeabi_f2iz
 876              	.LVL109:
 877 0106 0028     		cmp	r0, #0
 878 0108 B8BF     		it	lt
 879 010a 4042     		rsblt	r0, r0, #0
 880 010c FFF7FEFF 		bl	__aeabi_i2f
 881              	.LVL110:
 882 0110 5749     		ldr	r1, .L111+72
 883 0112 FFF7FEFF 		bl	__aeabi_fcmplt
 884              	.LVL111:
 885 0116 40B1     		cbz	r0, .L104
 172:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****         omega = 1.3*tanf(sp->phi);
 886              		.loc 3 172 0
 887 0118 3846     		mov	r0, r7
 888 011a FFF7FEFF 		bl	tanf
 889              	.LVL112:
 890 011e FFF7FEFF 		bl	__aeabi_f2d
 891              	.LVL113:
 892 0122 4BA3     		adr	r3, .L111+40
 893 0124 D3E90023 		ldrd	r2, [r3]
 894 0128 13E0     		b	.L107
 895              	.L104:
 173:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       else //max 60 degrees roll, then take constant omega
 174:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****         omega = 1.3*1.72305* ((sp->phi > 0) - (sp->phi < 0));
 896              		.loc 3 174 0
 897 012a 0021     		movs	r1, #0
 898 012c 3846     		mov	r0, r7
 899 012e FFF7FEFF 		bl	__aeabi_fcmpgt
 900              	.LVL114:
 901 0132 041C     		adds	r4, r0, #0
 902 0134 18BF     		it	ne
 903 0136 0124     		movne	r4, #1
 904 0138 3846     		mov	r0, r7
 905 013a 0021     		movs	r1, #0
 906 013c FFF7FEFF 		bl	__aeabi_fcmplt
 907              	.LVL115:
 908 0140 0028     		cmp	r0, #0
 909 0142 0CBF     		ite	eq
 910 0144 2046     		moveq	r0, r4
 911 0146 601E     		subne	r0, r4, #1
 912 0148 FFF7FEFF 		bl	__aeabi_i2d
 913              	.LVL116:
 914 014c 42A3     		adr	r3, .L111+48
 915 014e D3E90023 		ldrd	r2, [r3]
 916              	.L107:
 917 0152 FFF7FEFF 		bl	__aeabi_dmul
 918              	.LVL117:
 919 0156 FFF7FEFF 		bl	__aeabi_d2f
 920              	.LVL118:
 175:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 176:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->psi += omega/RC_UPDATE_FREQ;
 921              		.loc 3 176 0
 922 015a 4649     		ldr	r1, .L111+76
 923 015c FFF7FEFF 		bl	__aeabi_fdiv
 924              	.LVL119:
 925 0160 0146     		mov	r1, r0
 926 0162 B068     		ldr	r0, [r6, #8]	@ float
 927 0164 FFF7FEFF 		bl	__aeabi_fadd
 928              	.LVL120:
 929 0168 B060     		str	r0, [r6, #8]	@ float
 930              	.LVL121:
 931              	.L86:
 932              	.LBE32:
 177:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     }
 178:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #ifdef STABILIZATION_ATTITUDE_SP_PSI_DELTA_LIMIT
 179:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     // Make sure the yaw setpoint does not differ too much from the real yaw
 180:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     // to prevent a sudden switch at 180 deg
 181:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     float heading = stabilization_attitude_get_heading_f();
 182:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 183:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     float delta_psi = sp->psi - heading;
 184:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_ANGLE_NORMALIZE(delta_psi);
 185:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     if (delta_psi > STABILIZATION_ATTITUDE_SP_PSI_DELTA_LIMIT){
 186:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->psi = heading + STABILIZATION_ATTITUDE_SP_PSI_DELTA_LIMIT;
 187:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     }
 188:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     else if (delta_psi < -STABILIZATION_ATTITUDE_SP_PSI_DELTA_LIMIT){
 189:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->psi = heading - STABILIZATION_ATTITUDE_SP_PSI_DELTA_LIMIT;
 190:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     }
 191:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_ANGLE_NORMALIZE(sp->psi);
 192:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #endif
 193:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     //Care Free mode
 194:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     if (guidance_h_mode == GUIDANCE_H_MODE_CARE_FREE) {
 933              		.loc 3 194 0
 934 016a 4348     		ldr	r0, .L111+80
 935 016c 0178     		ldrb	r1, [r0, #0]	@ zero_extendqisi2
 936 016e 0629     		cmp	r1, #6
 937 0170 58D1     		bne	.L82
 938              	.LBB33:
 195:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       //care_free_heading has been set to current psi when entering care free mode.
 196:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       float cos_psi;
 197:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       float sin_psi;
 198:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       float temp_theta;
 199:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 200:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       float care_free_delta_psi_f = sp->psi - care_free_heading;
 939              		.loc 3 200 0
 940 0172 424C     		ldr	r4, .L111+84
 941 0174 B068     		ldr	r0, [r6, #8]	@ float
 942 0176 2168     		ldr	r1, [r4, #0]	@ float
 943 0178 FFF7FEFF 		bl	__aeabi_fsub
 944              	.LVL122:
 945              	.L108:
 201:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 202:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       FLOAT_ANGLE_NORMALIZE(care_free_delta_psi_f);
 946              		.loc 3 202 0 discriminator 2
 947 017c 8146     		mov	r9, r0
 948              	.LVL123:
 949 017e FFF7FEFF 		bl	__aeabi_f2d
 950              	.LVL124:
 951 0182 2DA3     		adr	r3, .L111+16
 952 0184 D3E90023 		ldrd	r2, [r3]
 953 0188 0446     		mov	r4, r0
 954 018a 0D46     		mov	r5, r1
 955 018c FFF7FEFF 		bl	__aeabi_dcmpgt
 956              	.LVL125:
 957 0190 48B1     		cbz	r0, .L105
 958              	.L99:
 959 0192 2BA3     		adr	r3, .L111+24
 960 0194 D3E90023 		ldrd	r2, [r3]
 961 0198 2046     		mov	r0, r4
 962 019a 2946     		mov	r1, r5
 963 019c FFF7FEFF 		bl	__aeabi_dsub
 964              	.LVL126:
 965 01a0 FFF7FEFF 		bl	__aeabi_d2f
 966              	.LVL127:
 967 01a4 EAE7     		b	.L108
 968              	.LVL128:
 969              	.L105:
 970              		.loc 3 202 0 is_stmt 0 discriminator 4
 971 01a6 4846     		mov	r0, r9
 972 01a8 FFF7FEFF 		bl	__aeabi_f2d
 973              	.LVL129:
 974 01ac 26A3     		adr	r3, .L111+32
 975 01ae D3E90023 		ldrd	r2, [r3]
 976 01b2 0446     		mov	r4, r0
 977 01b4 0D46     		mov	r5, r1
 978 01b6 FFF7FEFF 		bl	__aeabi_dcmplt
 979              	.LVL130:
 980 01ba 50B1     		cbz	r0, .L110
 981              	.L101:
 982              		.loc 3 202 0 discriminator 5
 983 01bc 20A3     		adr	r3, .L111+24
 984 01be D3E90023 		ldrd	r2, [r3]
 985 01c2 2046     		mov	r0, r4
 986 01c4 2946     		mov	r1, r5
 987 01c6 FFF7FEFF 		bl	__aeabi_dadd
 988              	.LVL131:
 989 01ca FFF7FEFF 		bl	__aeabi_d2f
 990              	.LVL132:
 991 01ce 8146     		mov	r9, r0
 992              	.LVL133:
 993 01d0 E9E7     		b	.L105
 994              	.LVL134:
 995              	.L110:
 203:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 204:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sin_psi = sinf(care_free_delta_psi_f);
 996              		.loc 3 204 0 is_stmt 1
 997 01d2 4846     		mov	r0, r9
 998 01d4 FFF7FEFF 		bl	sinf
 999              	.LVL135:
 1000 01d8 0446     		mov	r4, r0
 1001              	.LVL136:
 205:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       cos_psi = cosf(care_free_delta_psi_f);
 1002              		.loc 3 205 0
 1003 01da 4846     		mov	r0, r9
 1004              	.LVL137:
 1005 01dc FFF7FEFF 		bl	cosf
 1006              	.LVL138:
 206:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 207:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       temp_theta = cos_psi*sp->theta - sin_psi*sp->phi;
 208:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->phi = cos_psi*sp->phi - sin_psi*sp->theta;
 1007              		.loc 3 208 0
 1008 01e0 3946     		mov	r1, r7
 205:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       cos_psi = cosf(care_free_delta_psi_f);
 1009              		.loc 3 205 0
 1010 01e2 0546     		mov	r5, r0
 1011              	.LVL139:
 1012              		.loc 3 208 0
 1013 01e4 FFF7FEFF 		bl	__aeabi_fmul
 1014              	.LVL140:
 1015 01e8 4146     		mov	r1, r8
 1016 01ea 8146     		mov	r9, r0
 1017              	.LVL141:
 1018 01ec 2046     		mov	r0, r4
 1019 01ee FFF7FEFF 		bl	__aeabi_fmul
 1020              	.LVL142:
 1021 01f2 0146     		mov	r1, r0
 1022 01f4 4846     		mov	r0, r9
 1023 01f6 FFF7FEFF 		bl	__aeabi_fsub
 1024              	.LVL143:
 207:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       temp_theta = cos_psi*sp->theta - sin_psi*sp->phi;
 1025              		.loc 3 207 0
 1026 01fa 4146     		mov	r1, r8
 1027              		.loc 3 208 0
 1028 01fc 3060     		str	r0, [r6, #0]	@ float
 207:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       temp_theta = cos_psi*sp->theta - sin_psi*sp->phi;
 1029              		.loc 3 207 0
 1030 01fe 2846     		mov	r0, r5
 1031 0200 FFF7FEFF 		bl	__aeabi_fmul
 1032              	.LVL144:
 1033 0204 3946     		mov	r1, r7
 1034 0206 0546     		mov	r5, r0
 1035              	.LVL145:
 1036 0208 2046     		mov	r0, r4
 1037 020a FFF7FEFF 		bl	__aeabi_fmul
 1038              	.LVL146:
 1039 020e 0146     		mov	r1, r0
 1040 0210 2846     		mov	r0, r5
 1041 0212 FFF7FEFF 		bl	__aeabi_fsub
 1042              	.LVL147:
 209:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 210:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****       sp->theta = temp_theta;
 1043              		.loc 3 210 0
 1044 0216 7060     		str	r0, [r6, #4]	@ float
 1045 0218 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1046              	.LVL148:
 1047              	.L83:
 1048              	.LBE33:
 211:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     }
 212:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   }
 213:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   else { /* if not flying, use current yaw as setpoint */
 214:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     sp->psi = stateGetNedToBodyEulers_f()->psi;
 1049              		.loc 3 214 0
 1050 021c FFF7FEFF 		bl	stateGetNedToBodyEulers_f
 1051              	.LVL149:
 1052 0220 8368     		ldr	r3, [r0, #8]	@ float
 1053 0222 B360     		str	r3, [r6, #8]	@ float
 1054              	.L82:
 1055 0224 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1056              	.L112:
 1057              		.align	3
 1058              	.L111:
 1059 0228 A038DB37 		.word	937113760
 1060 022c 52C1E03F 		.word	1071694162
 1061 0230 F1D4C853 		.word	1405670641
 1062 0234 FB21E93F 		.word	1072243195
 1063 0238 182D4454 		.word	1413754136
 1064 023c FB210940 		.word	1074340347
 1065 0240 182D4454 		.word	1413754136
 1066 0244 FB211940 		.word	1075388923
 1067 0248 182D4454 		.word	1413754136
 1068 024c FB2109C0 		.word	-1073143301
 1069 0250 CDCCCCCC 		.word	3435973837
 1070 0254 CCCCF43F 		.word	1073007820
 1071 0258 257A19C5 		.word	3306781221
 1072 025c 72EB0140 		.word	1073867634
 1073 0260 00000000 		.word	radio_control
 1074 0264 00C0C240 		.word	1086504960
 1075 0268 00000000 		.word	autopilot_mode
 1076 026c 00004440 		.word	1078198272
 1077 0270 4EE4BD3F 		.word	1069409358
 1078 0274 00002042 		.word	1109393408
 1079 0278 00000000 		.word	guidance_h_mode
 1080 027c 00000000 		.word	.LANCHOR0
 1081              		.cfi_endproc
 1082              	.LFE125:
 1084              		.section	.text.stabilization_attitude_read_rc_roll_pitch_quat_f,"ax",%progbits
 1085              		.align	1
 1086              		.global	stabilization_attitude_read_rc_roll_pitch_quat_f
 1087              		.thumb
 1088              		.thumb_func
 1090              	stabilization_attitude_read_rc_roll_pitch_quat_f:
 1091              	.LFB126:
 215:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   }
 216:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** }
 217:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 218:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 219:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** /** Read roll/pitch command from RC as quaternion.
 220:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * Interprets the stick positions as axes.
 221:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * @param[out] q quaternion representing the RC roll/pitch input
 222:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  */
 223:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_roll_pitch_quat_f(struct FloatQuat* q) {
 1092              		.loc 3 223 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 0
 1095              		@ frame_needed = 0, uses_anonymous_args = 0
 1096              	.LVL150:
 1097 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1098              	.LCFI6:
 1099              		.cfi_def_cfa_offset 24
 1100              		.cfi_offset 3, -24
 1101              		.cfi_offset 4, -20
 1102              		.cfi_offset 5, -16
 1103              		.cfi_offset 6, -12
 1104              		.cfi_offset 7, -8
 1105              		.cfi_offset 14, -4
 224:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qx = radio_control.values[RADIO_ROLL] * STABILIZATION_ATTITUDE_SP_MAX_PHI / MAX_PPRZ / 2;
 1106              		.loc 3 224 0
 1107 0002 314D     		ldr	r5, .L114+8
 223:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_roll_pitch_quat_f(struct FloatQuat* q) {
 1108              		.loc 3 223 0
 1109 0004 0646     		mov	r6, r0
 1110              		.loc 3 224 0
 1111 0006 B5F90A00 		ldrsh	r0, [r5, #10]
 1112              	.LVL151:
 1113 000a FFF7FEFF 		bl	__aeabi_i2d
 1114              	.LVL152:
 1115 000e 2CA3     		adr	r3, .L114
 1116 0010 D3E90023 		ldrd	r2, [r3]
 1117 0014 FFF7FEFF 		bl	__aeabi_dmul
 1118              	.LVL153:
 1119 0018 0022     		movs	r2, #0
 1120 001a 2C4B     		ldr	r3, .L114+12
 1121 001c FFF7FEFF 		bl	__aeabi_ddiv
 1122              	.LVL154:
 1123 0020 0022     		movs	r2, #0
 1124 0022 2B4B     		ldr	r3, .L114+16
 1125 0024 FFF7FEFF 		bl	__aeabi_dmul
 1126              	.LVL155:
 1127 0028 FFF7FEFF 		bl	__aeabi_d2f
 1128              	.LVL156:
 1129 002c 0446     		mov	r4, r0
 1130 002e 7060     		str	r0, [r6, #4]	@ float
 225:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qy = radio_control.values[RADIO_PITCH] * STABILIZATION_ATTITUDE_SP_MAX_THETA / MAX_PPRZ / 2;
 1131              		.loc 3 225 0
 1132 0030 B5F90800 		ldrsh	r0, [r5, #8]
 1133 0034 FFF7FEFF 		bl	__aeabi_i2d
 1134              	.LVL157:
 1135 0038 21A3     		adr	r3, .L114
 1136 003a D3E90023 		ldrd	r2, [r3]
 1137 003e FFF7FEFF 		bl	__aeabi_dmul
 1138              	.LVL158:
 1139 0042 0022     		movs	r2, #0
 1140 0044 214B     		ldr	r3, .L114+12
 1141 0046 FFF7FEFF 		bl	__aeabi_ddiv
 1142              	.LVL159:
 1143 004a 0022     		movs	r2, #0
 1144 004c 204B     		ldr	r3, .L114+16
 1145 004e FFF7FEFF 		bl	__aeabi_dmul
 1146              	.LVL160:
 1147 0052 FFF7FEFF 		bl	__aeabi_d2f
 1148              	.LVL161:
 226:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qz = 0.0;
 1149              		.loc 3 226 0
 1150 0056 0023     		movs	r3, #0
 225:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qy = radio_control.values[RADIO_PITCH] * STABILIZATION_ATTITUDE_SP_MAX_THETA / MAX_PPRZ / 2;
 1151              		.loc 3 225 0
 1152 0058 0746     		mov	r7, r0
 1153              		.loc 3 226 0
 1154 005a F360     		str	r3, [r6, #12]	@ float
 227:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 228:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   /* normalize */
 229:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   float norm = sqrtf(1.0 + SQUARE(q->qx)+ SQUARE(q->qy));
 1155              		.loc 3 229 0
 1156 005c 2146     		mov	r1, r4
 225:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qy = radio_control.values[RADIO_PITCH] * STABILIZATION_ATTITUDE_SP_MAX_THETA / MAX_PPRZ / 2;
 1157              		.loc 3 225 0
 1158 005e B060     		str	r0, [r6, #8]	@ float
 1159              		.loc 3 229 0
 1160 0060 2046     		mov	r0, r4
 1161 0062 FFF7FEFF 		bl	__aeabi_fmul
 1162              	.LVL162:
 1163 0066 FFF7FEFF 		bl	__aeabi_f2d
 1164              	.LVL163:
 1165 006a 0022     		movs	r2, #0
 1166 006c 194B     		ldr	r3, .L114+20
 1167 006e FFF7FEFF 		bl	__aeabi_dadd
 1168              	.LVL164:
 1169 0072 0446     		mov	r4, r0
 1170 0074 0D46     		mov	r5, r1
 1171 0076 3846     		mov	r0, r7
 1172 0078 3946     		mov	r1, r7
 1173 007a FFF7FEFF 		bl	__aeabi_fmul
 1174              	.LVL165:
 1175 007e FFF7FEFF 		bl	__aeabi_f2d
 1176              	.LVL166:
 1177 0082 0246     		mov	r2, r0
 1178 0084 0B46     		mov	r3, r1
 1179 0086 2046     		mov	r0, r4
 1180 0088 2946     		mov	r1, r5
 1181 008a FFF7FEFF 		bl	__aeabi_dadd
 1182              	.LVL167:
 1183 008e FFF7FEFF 		bl	__aeabi_d2f
 1184              	.LVL168:
 1185 0092 FFF7FEFF 		bl	sqrtf
 1186              	.LVL169:
 1187 0096 0446     		mov	r4, r0
 1188              	.LVL170:
 230:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qi = 1.0 / norm;
 1189              		.loc 3 230 0
 1190 0098 2146     		mov	r1, r4
 1191 009a 4FF07E50 		mov	r0, #1065353216
 1192              	.LVL171:
 1193 009e FFF7FEFF 		bl	__aeabi_fdiv
 1194              	.LVL172:
 231:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qx /= norm;
 1195              		.loc 3 231 0
 1196 00a2 2146     		mov	r1, r4
 230:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qi = 1.0 / norm;
 1197              		.loc 3 230 0
 1198 00a4 3060     		str	r0, [r6, #0]	@ float
 1199              		.loc 3 231 0
 1200 00a6 7068     		ldr	r0, [r6, #4]	@ float
 1201 00a8 FFF7FEFF 		bl	__aeabi_fdiv
 1202              	.LVL173:
 232:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qy /= norm;
 1203              		.loc 3 232 0
 1204 00ac 2146     		mov	r1, r4
 231:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qx /= norm;
 1205              		.loc 3 231 0
 1206 00ae 7060     		str	r0, [r6, #4]	@ float
 1207              		.loc 3 232 0
 1208 00b0 B068     		ldr	r0, [r6, #8]	@ float
 1209 00b2 FFF7FEFF 		bl	__aeabi_fdiv
 1210              	.LVL174:
 1211 00b6 B060     		str	r0, [r6, #8]	@ float
 1212 00b8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1213              	.L115:
 1214 00ba 00BFAFF3 		.align	3
 1214      0080
 1215              	.L114:
 1216 00c0 A038DB37 		.word	937113760
 1217 00c4 52C1E03F 		.word	1071694162
 1218 00c8 00000000 		.word	radio_control
 1219 00cc 00C0C240 		.word	1086504960
 1220 00d0 0000E03F 		.word	1071644672
 1221 00d4 0000F03F 		.word	1072693248
 1222              		.cfi_endproc
 1223              	.LFE126:
 1225              		.section	.text.stabilization_attitude_read_rc_roll_pitch_earth_quat_f,"ax",%progbits
 1226              		.align	1
 1227              		.global	stabilization_attitude_read_rc_roll_pitch_earth_quat_f
 1228              		.thumb
 1229              		.thumb_func
 1231              	stabilization_attitude_read_rc_roll_pitch_earth_quat_f:
 1232              	.LFB127:
 233:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** }
 234:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 235:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** /** Read roll/pitch command from RC as quaternion.
 236:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * Both angles are are interpreted relative to to the horizontal plane (earth bound).
 237:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  * @param[out] q quaternion representing the RC roll/pitch input
 238:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****  */
 239:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_roll_pitch_earth_quat_f(struct FloatQuat* q) {
 1233              		.loc 3 239 0
 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 0
 1236              		@ frame_needed = 0, uses_anonymous_args = 0
 1237              	.LVL175:
 1238 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1239              	.LCFI7:
 1240              		.cfi_def_cfa_offset 32
 1241              		.cfi_offset 3, -32
 1242              		.cfi_offset 4, -28
 1243              		.cfi_offset 5, -24
 1244              		.cfi_offset 6, -20
 1245              		.cfi_offset 7, -16
 1246              		.cfi_offset 8, -12
 1247              		.cfi_offset 9, -8
 1248              		.cfi_offset 14, -4
 240:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   /* only non-zero entries for roll quaternion */
 241:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   float roll2 = radio_control.values[RADIO_ROLL] * STABILIZATION_ATTITUDE_SP_MAX_PHI / MAX_PPRZ / 2
 1249              		.loc 3 241 0
 1250 0004 DFF8D490 		ldr	r9, .L117+20
 239:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_roll_pitch_earth_quat_f(struct FloatQuat* q) {
 1251              		.loc 3 239 0
 1252 0008 0646     		mov	r6, r0
 1253              		.loc 3 241 0
 1254 000a B9F90A00 		ldrsh	r0, [r9, #10]
 1255              	.LVL176:
 1256 000e FFF7FEFF 		bl	__aeabi_i2d
 1257              	.LVL177:
 1258 0012 2DA3     		adr	r3, .L117
 1259 0014 D3E90023 		ldrd	r2, [r3]
 1260 0018 FFF7FEFF 		bl	__aeabi_dmul
 1261              	.LVL178:
 1262 001c 0022     		movs	r2, #0
 1263 001e 2C4B     		ldr	r3, .L117+8
 1264 0020 FFF7FEFF 		bl	__aeabi_ddiv
 1265              	.LVL179:
 1266 0024 0022     		movs	r2, #0
 1267 0026 2B4B     		ldr	r3, .L117+12
 1268 0028 FFF7FEFF 		bl	__aeabi_dmul
 1269              	.LVL180:
 1270 002c FFF7FEFF 		bl	__aeabi_d2f
 1271              	.LVL181:
 1272 0030 0446     		mov	r4, r0
 1273              	.LVL182:
 242:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   float qx_roll = sinf(roll2);
 1274              		.loc 3 242 0
 1275 0032 FFF7FEFF 		bl	sinf
 1276              	.LVL183:
 1277 0036 0746     		mov	r7, r0
 1278              	.LVL184:
 243:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   float qi_roll = cosf(roll2);
 1279              		.loc 3 243 0
 1280 0038 2046     		mov	r0, r4
 1281              	.LVL185:
 1282 003a FFF7FEFF 		bl	cosf
 1283              	.LVL186:
 244:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 245:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   //An offset is added if in forward mode
 246:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   /* only non-zero entries for pitch quaternion */
 247:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   float pitch2 = (ANGLE_FLOAT_OF_BFP(transition_theta_offset) + radio_control.values[RADIO_PITCH] *
 1284              		.loc 3 247 0
 1285 003e 264B     		ldr	r3, .L117+16
 243:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   float qi_roll = cosf(roll2);
 1286              		.loc 3 243 0
 1287 0040 8046     		mov	r8, r0
 1288              	.LVL187:
 1289              		.loc 3 247 0
 1290 0042 1868     		ldr	r0, [r3, #0]
 1291              	.LVL188:
 1292 0044 FFF7FEFF 		bl	__aeabi_i2f
 1293              	.LVL189:
 1294 0048 4FF06651 		mov	r1, #964689920
 1295 004c FFF7FEFF 		bl	__aeabi_fmul
 1296              	.LVL190:
 1297 0050 FFF7FEFF 		bl	__aeabi_f2d
 1298              	.LVL191:
 1299 0054 0446     		mov	r4, r0
 1300              	.LVL192:
 1301 0056 B9F90800 		ldrsh	r0, [r9, #8]
 1302 005a 0D46     		mov	r5, r1
 1303 005c FFF7FEFF 		bl	__aeabi_i2d
 1304              	.LVL193:
 1305 0060 19A3     		adr	r3, .L117
 1306 0062 D3E90023 		ldrd	r2, [r3]
 1307 0066 FFF7FEFF 		bl	__aeabi_dmul
 1308              	.LVL194:
 1309 006a 0022     		movs	r2, #0
 1310 006c 184B     		ldr	r3, .L117+8
 1311 006e FFF7FEFF 		bl	__aeabi_ddiv
 1312              	.LVL195:
 1313 0072 0246     		mov	r2, r0
 1314 0074 0B46     		mov	r3, r1
 1315 0076 2046     		mov	r0, r4
 1316 0078 2946     		mov	r1, r5
 1317 007a FFF7FEFF 		bl	__aeabi_dadd
 1318              	.LVL196:
 1319 007e 0022     		movs	r2, #0
 1320 0080 144B     		ldr	r3, .L117+12
 1321 0082 FFF7FEFF 		bl	__aeabi_dmul
 1322              	.LVL197:
 1323 0086 FFF7FEFF 		bl	__aeabi_d2f
 1324              	.LVL198:
 1325 008a 0546     		mov	r5, r0
 1326              	.LVL199:
 248:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   float qy_pitch = sinf(pitch2);
 1327              		.loc 3 248 0
 1328 008c FFF7FEFF 		bl	sinf
 1329              	.LVL200:
 1330 0090 0446     		mov	r4, r0
 1331              	.LVL201:
 249:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   float qi_pitch = cosf(pitch2);
 1332              		.loc 3 249 0
 1333 0092 2846     		mov	r0, r5
 1334              	.LVL202:
 1335 0094 FFF7FEFF 		bl	cosf
 1336              	.LVL203:
 1337 0098 0546     		mov	r5, r0
 1338              	.LVL204:
 250:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 251:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   /* only multiply non-zero entries of FLOAT_QUAT_COMP(*q, q_roll, q_pitch) */
 252:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qi = qi_roll * qi_pitch;
 1339              		.loc 3 252 0
 1340 009a 2946     		mov	r1, r5
 1341 009c 4046     		mov	r0, r8
 1342              	.LVL205:
 1343 009e FFF7FEFF 		bl	__aeabi_fmul
 1344              	.LVL206:
 253:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qx = qx_roll * qi_pitch;
 1345              		.loc 3 253 0
 1346 00a2 2946     		mov	r1, r5
 252:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qi = qi_roll * qi_pitch;
 1347              		.loc 3 252 0
 1348 00a4 3060     		str	r0, [r6, #0]	@ float
 1349              		.loc 3 253 0
 1350 00a6 3846     		mov	r0, r7
 1351 00a8 FFF7FEFF 		bl	__aeabi_fmul
 1352              	.LVL207:
 254:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qy = qi_roll * qy_pitch;
 1353              		.loc 3 254 0
 1354 00ac 2146     		mov	r1, r4
 253:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qx = qx_roll * qi_pitch;
 1355              		.loc 3 253 0
 1356 00ae 7060     		str	r0, [r6, #4]	@ float
 1357              		.loc 3 254 0
 1358 00b0 4046     		mov	r0, r8
 1359 00b2 FFF7FEFF 		bl	__aeabi_fmul
 1360              	.LVL208:
 255:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qz = qx_roll * qy_pitch;
 1361              		.loc 3 255 0
 1362 00b6 2146     		mov	r1, r4
 254:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   q->qy = qi_roll * qy_pitch;
 1363              		.loc 3 254 0
 1364 00b8 B060     		str	r0, [r6, #8]	@ float
 1365              		.loc 3 255 0
 1366 00ba 3846     		mov	r0, r7
 1367 00bc FFF7FEFF 		bl	__aeabi_fmul
 1368              	.LVL209:
 1369 00c0 F060     		str	r0, [r6, #12]	@ float
 1370 00c2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1371              	.L118:
 1372 00c6 00BF     		.align	3
 1373              	.L117:
 1374 00c8 A038DB37 		.word	937113760
 1375 00cc 52C1E03F 		.word	1071694162
 1376 00d0 00C0C240 		.word	1086504960
 1377 00d4 0000E03F 		.word	1071644672
 1378 00d8 00000000 		.word	transition_theta_offset
 1379 00dc 00000000 		.word	radio_control
 1380              		.cfi_endproc
 1381              	.LFE127:
 1383              		.section	.text.stabilization_attitude_read_rc_setpoint_quat_f,"ax",%progbits
 1384              		.align	1
 1385              		.global	stabilization_attitude_read_rc_setpoint_quat_f
 1386              		.thumb
 1387              		.thumb_func
 1389              	stabilization_attitude_read_rc_setpoint_quat_f:
 1390              	.LFB128:
 256:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** }
 257:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 258:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_setpoint_quat_f(struct FloatQuat* q_sp, bool_t in_flight) {
 1391              		.loc 3 258 0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 56
 1394              		@ frame_needed = 0, uses_anonymous_args = 0
 1395              	.LVL210:
 1396 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1397              	.LCFI8:
 1398              		.cfi_def_cfa_offset 36
 1399              		.cfi_offset 4, -36
 1400              		.cfi_offset 5, -32
 1401              		.cfi_offset 6, -28
 1402              		.cfi_offset 7, -24
 1403              		.cfi_offset 8, -20
 1404              		.cfi_offset 9, -16
 1405              		.cfi_offset 10, -12
 1406              		.cfi_offset 11, -8
 1407              		.cfi_offset 14, -4
 1408 0004 0446     		mov	r4, r0
 1409 0006 8FB0     		sub	sp, sp, #60
 1410              	.LCFI9:
 1411              		.cfi_def_cfa_offset 96
 259:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 260:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   // FIXME: remove me, do in quaternion directly
 261:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   // is currently still needed, since the yaw setpoint integration is done in eulers
 262:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #if defined STABILIZATION_ATTITUDE_TYPE_INT
 263:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   stabilization_attitude_read_rc_setpoint_eulers(&stab_att_sp_euler, in_flight);
 1412              		.loc 3 263 0
 1413 0008 0B48     		ldr	r0, .L133
 1414              	.LVL211:
 258:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_setpoint_quat_f(struct FloatQuat* q_sp, bool_t in_flight) {
 1415              		.loc 3 258 0
 1416 000a 0891     		str	r1, [sp, #32]
 1417              		.loc 3 263 0
 1418 000c FFF7FEFF 		bl	stabilization_attitude_read_rc_setpoint_eulers
 1419              	.LVL212:
 264:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #else
 265:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   stabilization_attitude_read_rc_setpoint_eulers_f(&stab_att_sp_euler, in_flight);
 266:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #endif
 267:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 268:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   struct FloatQuat q_rp_cmd;
 269:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   stabilization_attitude_read_rc_roll_pitch_quat_f(&q_rp_cmd);
 1420              		.loc 3 269 0
 1421 0010 0AA8     		add	r0, sp, #40
 1422 0012 FFF7FEFF 		bl	stabilization_attitude_read_rc_roll_pitch_quat_f
 1423              	.LVL213:
 270:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 271:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   /* get current heading */
 272:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   const struct FloatVect3 zaxis = {0., 0., 1.};
 273:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   struct FloatQuat q_yaw;
 274:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 275:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   //Care Free mode
 276:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   if (guidance_h_mode == GUIDANCE_H_MODE_CARE_FREE) {
 1424              		.loc 3 276 0
 1425 0016 094B     		ldr	r3, .L133+4
 1426 0018 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1427 001a 0628     		cmp	r0, #6
 1428 001c 12D1     		bne	.L120
 1429              	.LBB34:
 277:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     //care_free_heading has been set to current psi when entering care free mode.
 278:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw, zaxis, care_free_heading);
 1430              		.loc 3 278 0
 1431 001e 0849     		ldr	r1, .L133+8
 1432 0020 0868     		ldr	r0, [r1, #0]	@ float
 1433 0022 4FF07C51 		mov	r1, #1056964608
 1434 0026 FFF7FEFF 		bl	__aeabi_fmul
 1435              	.LVL214:
 1436 002a 0646     		mov	r6, r0
 1437 002c FFF7FEFF 		bl	sinf
 1438              	.LVL215:
 1439 0030 0546     		mov	r5, r0
 1440              	.LVL216:
 1441 0032 3046     		mov	r0, r6
 1442              	.LVL217:
 1443 0034 17E0     		b	.L132
 1444              	.L134:
 1445 0036 00BF     		.align	2
 1446              	.L133:
 1447 0038 00000000 		.word	stab_att_sp_euler
 1448 003c 00000000 		.word	guidance_h_mode
 1449 0040 00000000 		.word	.LANCHOR0
 1450              	.LVL218:
 1451              	.L120:
 1452              	.LBE34:
 1453              	.LBB35:
 279:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   }
 280:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   else {
 281:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw, zaxis, stateGetNedToBodyEulers_f()->psi);
 1454              		.loc 3 281 0
 1455 0044 FFF7FEFF 		bl	stateGetNedToBodyEulers_f
 1456              	.LVL219:
 1457 0048 4FF07C51 		mov	r1, #1056964608
 1458 004c 8068     		ldr	r0, [r0, #8]	@ float
 1459 004e FFF7FEFF 		bl	__aeabi_fmul
 1460              	.LVL220:
 1461 0052 FFF7FEFF 		bl	sinf
 1462              	.LVL221:
 1463 0056 0546     		mov	r5, r0
 1464              	.LVL222:
 1465 0058 FFF7FEFF 		bl	stateGetNedToBodyEulers_f
 1466              	.LVL223:
 1467 005c 4FF07C51 		mov	r1, #1056964608
 1468 0060 8068     		ldr	r0, [r0, #8]	@ float
 1469 0062 FFF7FEFF 		bl	__aeabi_fmul
 1470              	.LVL224:
 1471              	.L132:
 1472 0066 FFF7FEFF 		bl	cosf
 1473              	.LVL225:
 1474 006a 0021     		movs	r1, #0
 1475 006c 0490     		str	r0, [sp, #16]	@ float
 1476              	.LVL226:
 1477 006e 2846     		mov	r0, r5
 1478              	.LVL227:
 1479 0070 FFF7FEFF 		bl	__aeabi_fmul
 1480              	.LVL228:
 1481              	.LBE35:
 282:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   }
 283:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 284:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   /* roll/pitch commands applied to to current heading */
 285:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   struct FloatQuat q_rp_sp;
 286:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   FLOAT_QUAT_COMP(q_rp_sp, q_yaw, q_rp_cmd);
 1482              		.loc 3 286 0
 1483 0074 DDF82CB0 		ldr	fp, [sp, #44]	@ float
 1484              	.LBB36:
 281:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw, zaxis, stateGetNedToBodyEulers_f()->psi);
 1485              		.loc 3 281 0
 1486 0078 8146     		mov	r9, r0
 1487              	.LVL229:
 1488              	.LBE36:
 1489              		.loc 3 286 0
 1490 007a 5946     		mov	r1, fp
 1491              	.LBB37:
 281:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw, zaxis, stateGetNedToBodyEulers_f()->psi);
 1492              		.loc 3 281 0
 1493 007c 0395     		str	r5, [sp, #12]	@ float
 1494              	.LBE37:
 1495              		.loc 3 286 0
 1496 007e FFF7FEFF 		bl	__aeabi_fmul
 1497              	.LVL230:
 1498 0082 0C9A     		ldr	r2, [sp, #48]	@ float
 1499 0084 0590     		str	r0, [sp, #20]	@ float
 1500 0086 1146     		mov	r1, r2
 1501 0088 4846     		mov	r0, r9
 1502 008a 0192     		str	r2, [sp, #4]
 1503 008c FFF7FEFF 		bl	__aeabi_fmul
 1504              	.LVL231:
 1505 0090 0A9D     		ldr	r5, [sp, #40]	@ float
 1506              	.LVL232:
 1507 0092 0690     		str	r0, [sp, #24]	@ float
 1508 0094 2946     		mov	r1, r5
 1509 0096 0498     		ldr	r0, [sp, #16]	@ float
 1510 0098 FFF7FEFF 		bl	__aeabi_fmul
 1511              	.LVL233:
 1512 009c 0599     		ldr	r1, [sp, #20]	@ float
 1513 009e FFF7FEFF 		bl	__aeabi_fsub
 1514              	.LVL234:
 1515 00a2 0699     		ldr	r1, [sp, #24]	@ float
 1516 00a4 FFF7FEFF 		bl	__aeabi_fsub
 1517              	.LVL235:
 1518 00a8 DDF834A0 		ldr	sl, [sp, #52]	@ float
 1519 00ac 0746     		mov	r7, r0
 1520 00ae 5146     		mov	r1, sl
 1521 00b0 0398     		ldr	r0, [sp, #12]	@ float
 1522 00b2 FFF7FEFF 		bl	__aeabi_fmul
 1523              	.LVL236:
 1524 00b6 0146     		mov	r1, r0
 1525 00b8 3846     		mov	r0, r7
 1526 00ba FFF7FEFF 		bl	__aeabi_fsub
 1527              	.LVL237:
 1528 00be 2946     		mov	r1, r5
 1529 00c0 8046     		mov	r8, r0
 1530              	.LVL238:
 1531 00c2 4846     		mov	r0, r9
 1532              	.LVL239:
 1533 00c4 FFF7FEFF 		bl	__aeabi_fmul
 1534              	.LVL240:
 1535 00c8 5146     		mov	r1, sl
 1536 00ca 0790     		str	r0, [sp, #28]	@ float
 1537 00cc 4846     		mov	r0, r9
 1538 00ce FFF7FEFF 		bl	__aeabi_fmul
 1539              	.LVL241:
 1540 00d2 5946     		mov	r1, fp
 1541 00d4 0646     		mov	r6, r0
 1542 00d6 0498     		ldr	r0, [sp, #16]	@ float
 1543 00d8 FFF7FEFF 		bl	__aeabi_fmul
 1544              	.LVL242:
 1545 00dc 0799     		ldr	r1, [sp, #28]	@ float
 1546 00de FFF7FEFF 		bl	__aeabi_fadd
 1547              	.LVL243:
 1548 00e2 3146     		mov	r1, r6
 1549 00e4 FFF7FEFF 		bl	__aeabi_fadd
 1550              	.LVL244:
 1551 00e8 019B     		ldr	r3, [sp, #4]
 1552 00ea 0746     		mov	r7, r0
 1553 00ec 1946     		mov	r1, r3
 1554 00ee 0398     		ldr	r0, [sp, #12]	@ float
 1555 00f0 FFF7FEFF 		bl	__aeabi_fmul
 1556              	.LVL245:
 1557 00f4 0146     		mov	r1, r0
 1558 00f6 3846     		mov	r0, r7
 1559 00f8 FFF7FEFF 		bl	__aeabi_fsub
 1560              	.LVL246:
 1561 00fc 0199     		ldr	r1, [sp, #4]
 1562 00fe 0746     		mov	r7, r0
 1563              	.LVL247:
 1564 0100 0498     		ldr	r0, [sp, #16]	@ float
 1565              	.LVL248:
 1566 0102 FFF7FEFF 		bl	__aeabi_fmul
 1567              	.LVL249:
 1568 0106 3146     		mov	r1, r6
 1569 0108 FFF7FEFF 		bl	__aeabi_fsub
 1570              	.LVL250:
 1571 010c 0799     		ldr	r1, [sp, #28]	@ float
 1572 010e FFF7FEFF 		bl	__aeabi_fadd
 1573              	.LVL251:
 1574 0112 5946     		mov	r1, fp
 1575 0114 0646     		mov	r6, r0
 1576 0116 0398     		ldr	r0, [sp, #12]	@ float
 1577 0118 FFF7FEFF 		bl	__aeabi_fmul
 1578              	.LVL252:
 1579 011c 0146     		mov	r1, r0
 1580 011e 3046     		mov	r0, r6
 1581 0120 FFF7FEFF 		bl	__aeabi_fadd
 1582              	.LVL253:
 1583 0124 5146     		mov	r1, sl
 1584 0126 0646     		mov	r6, r0
 1585              	.LVL254:
 1586 0128 0498     		ldr	r0, [sp, #16]	@ float
 1587              	.LVL255:
 1588 012a FFF7FEFF 		bl	__aeabi_fmul
 1589              	.LVL256:
 1590 012e 0699     		ldr	r1, [sp, #24]	@ float
 1591 0130 FFF7FEFF 		bl	__aeabi_fadd
 1592              	.LVL257:
 1593 0134 0599     		ldr	r1, [sp, #20]	@ float
 1594 0136 FFF7FEFF 		bl	__aeabi_fsub
 1595              	.LVL258:
 1596 013a 2946     		mov	r1, r5
 1597 013c 8246     		mov	sl, r0
 1598 013e 0398     		ldr	r0, [sp, #12]	@ float
 1599 0140 FFF7FEFF 		bl	__aeabi_fmul
 1600              	.LVL259:
 1601 0144 0146     		mov	r1, r0
 1602 0146 5046     		mov	r0, sl
 1603 0148 FFF7FEFF 		bl	__aeabi_fadd
 1604              	.LVL260:
 1605              	.LBB38:
 287:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   FLOAT_QUAT_NORMALIZE(q_rp_sp);
 1606              		.loc 3 287 0
 1607 014c 4146     		mov	r1, r8
 1608              	.LBE38:
 286:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   FLOAT_QUAT_COMP(q_rp_sp, q_yaw, q_rp_cmd);
 1609              		.loc 3 286 0
 1610 014e 0546     		mov	r5, r0
 1611              	.LVL261:
 1612              	.LBB39:
 1613              		.loc 3 287 0
 1614 0150 4046     		mov	r0, r8
 1615              	.LVL262:
 1616 0152 FFF7FEFF 		bl	__aeabi_fmul
 1617              	.LVL263:
 1618 0156 3946     		mov	r1, r7
 1619 0158 8246     		mov	sl, r0
 1620 015a 3846     		mov	r0, r7
 1621 015c FFF7FEFF 		bl	__aeabi_fmul
 1622              	.LVL264:
 1623 0160 0146     		mov	r1, r0
 1624 0162 5046     		mov	r0, sl
 1625 0164 FFF7FEFF 		bl	__aeabi_fadd
 1626              	.LVL265:
 1627 0168 3146     		mov	r1, r6
 1628 016a 8246     		mov	sl, r0
 1629 016c 3046     		mov	r0, r6
 1630 016e FFF7FEFF 		bl	__aeabi_fmul
 1631              	.LVL266:
 1632 0172 0146     		mov	r1, r0
 1633 0174 5046     		mov	r0, sl
 1634 0176 FFF7FEFF 		bl	__aeabi_fadd
 1635              	.LVL267:
 1636 017a 2946     		mov	r1, r5
 1637 017c 8246     		mov	sl, r0
 1638 017e 2846     		mov	r0, r5
 1639 0180 FFF7FEFF 		bl	__aeabi_fmul
 1640              	.LVL268:
 1641 0184 0146     		mov	r1, r0
 1642 0186 5046     		mov	r0, sl
 1643 0188 FFF7FEFF 		bl	__aeabi_fadd
 1644              	.LVL269:
 1645 018c FFF7FEFF 		bl	sqrtf
 1646              	.LVL270:
 1647 0190 4FF40001 		mov	r1, #8388608
 1648 0194 8246     		mov	sl, r0
 1649              	.LVL271:
 1650 0196 FFF7FEFF 		bl	__aeabi_fcmpgt
 1651              	.LVL272:
 1652 019a 98B1     		cbz	r0, .L122
 1653              		.loc 3 287 0 is_stmt 0 discriminator 1
 1654 019c 4046     		mov	r0, r8
 1655 019e 5146     		mov	r1, sl
 1656 01a0 FFF7FEFF 		bl	__aeabi_fdiv
 1657              	.LVL273:
 1658 01a4 5146     		mov	r1, sl
 1659 01a6 8046     		mov	r8, r0
 1660              	.LVL274:
 1661 01a8 3846     		mov	r0, r7
 1662              	.LVL275:
 1663 01aa FFF7FEFF 		bl	__aeabi_fdiv
 1664              	.LVL276:
 1665 01ae 5146     		mov	r1, sl
 1666 01b0 0746     		mov	r7, r0
 1667              	.LVL277:
 1668 01b2 3046     		mov	r0, r6
 1669              	.LVL278:
 1670 01b4 FFF7FEFF 		bl	__aeabi_fdiv
 1671              	.LVL279:
 1672 01b8 5146     		mov	r1, sl
 1673 01ba 0646     		mov	r6, r0
 1674              	.LVL280:
 1675 01bc 2846     		mov	r0, r5
 1676              	.LVL281:
 1677 01be FFF7FEFF 		bl	__aeabi_fdiv
 1678              	.LVL282:
 1679 01c2 0546     		mov	r5, r0
 1680              	.LVL283:
 1681              	.L122:
 1682              	.LBE39:
 288:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 289:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   if (in_flight)
 1683              		.loc 3 289 0 is_stmt 1
 1684 01c4 0898     		ldr	r0, [sp, #32]
 1685 01c6 0028     		cmp	r0, #0
 1686 01c8 00F06281 		beq	.L124
 1687              	.LBB40:
 1688              	.LBB41:
 290:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   {
 291:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     /* get current heading setpoint */
 292:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     struct FloatQuat q_yaw_sp;
 293:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #if defined STABILIZATION_ATTITUDE_TYPE_INT
 294:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw_sp, zaxis, ANGLE_FLOAT_OF_BFP(stab_att_sp_euler.psi));
 1689              		.loc 3 294 0
 1690 01cc 8F4A     		ldr	r2, .L135
 1691 01ce 9068     		ldr	r0, [r2, #8]
 1692 01d0 FFF7FEFF 		bl	__aeabi_i2f
 1693              	.LVL284:
 1694 01d4 4FF06651 		mov	r1, #964689920
 1695 01d8 FFF7FEFF 		bl	__aeabi_fmul
 1696              	.LVL285:
 1697 01dc 4FF07C51 		mov	r1, #1056964608
 1698 01e0 FFF7FEFF 		bl	__aeabi_fmul
 1699              	.LVL286:
 1700 01e4 8346     		mov	fp, r0
 1701 01e6 FFF7FEFF 		bl	sinf
 1702              	.LVL287:
 1703 01ea 0590     		str	r0, [sp, #20]	@ float
 1704              	.LVL288:
 1705 01ec 5846     		mov	r0, fp
 1706              	.LVL289:
 1707 01ee FFF7FEFF 		bl	cosf
 1708              	.LVL290:
 1709 01f2 0021     		movs	r1, #0
 1710 01f4 8346     		mov	fp, r0
 1711              	.LVL291:
 1712 01f6 0598     		ldr	r0, [sp, #20]	@ float
 1713              	.LVL292:
 1714 01f8 FFF7FEFF 		bl	__aeabi_fmul
 1715              	.LVL293:
 1716              	.LBE41:
 295:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #else
 296:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw_sp, zaxis, stab_att_sp_euler.psi);
 297:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** #endif
 298:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 299:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     /* rotation between current yaw and yaw setpoint */
 300:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     struct FloatQuat q_yaw_diff;
 301:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_COMP_INV(q_yaw_diff, q_yaw_sp, q_yaw);
 1717              		.loc 3 301 0
 1718 01fc 4946     		mov	r1, r9
 1719              	.LBB42:
 294:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw_sp, zaxis, ANGLE_FLOAT_OF_BFP(stab_att_sp_euler.psi));
 1720              		.loc 3 294 0
 1721 01fe 8246     		mov	sl, r0
 1722              	.LVL294:
 1723              	.LBE42:
 1724              		.loc 3 301 0
 1725 0200 FFF7FEFF 		bl	__aeabi_fmul
 1726              	.LVL295:
 1727 0204 0499     		ldr	r1, [sp, #16]	@ float
 1728 0206 0690     		str	r0, [sp, #24]	@ float
 1729 0208 5846     		mov	r0, fp
 1730 020a FFF7FEFF 		bl	__aeabi_fmul
 1731              	.LVL296:
 1732 020e 0699     		ldr	r1, [sp, #24]	@ float
 1733 0210 FFF7FEFF 		bl	__aeabi_fadd
 1734              	.LVL297:
 1735 0214 0699     		ldr	r1, [sp, #24]	@ float
 1736 0216 FFF7FEFF 		bl	__aeabi_fadd
 1737              	.LVL298:
 1738 021a 0399     		ldr	r1, [sp, #12]	@ float
 1739 021c 0346     		mov	r3, r0
 1740 021e 0598     		ldr	r0, [sp, #20]	@ float
 1741 0220 0093     		str	r3, [sp, #0]
 1742 0222 FFF7FEFF 		bl	__aeabi_fmul
 1743              	.LVL299:
 1744 0226 0146     		mov	r1, r0
 1745 0228 0098     		ldr	r0, [sp, #0]
 1746 022a FFF7FEFF 		bl	__aeabi_fadd
 1747              	.LVL300:
 1748 022e 0BF10042 		add	r2, fp, #-2147483648
 1749 0232 4946     		mov	r1, r9
 1750 0234 0790     		str	r0, [sp, #28]	@ float
 1751              	.LVL301:
 1752 0236 1046     		mov	r0, r2
 1753              	.LVL302:
 1754 0238 0092     		str	r2, [sp, #0]
 1755 023a FFF7FEFF 		bl	__aeabi_fmul
 1756              	.LVL303:
 1757 023e 0499     		ldr	r1, [sp, #16]	@ float
 1758 0240 0890     		str	r0, [sp, #32]	@ float
 1759 0242 5046     		mov	r0, sl
 1760 0244 FFF7FEFF 		bl	__aeabi_fmul
 1761              	.LVL304:
 1762 0248 0399     		ldr	r1, [sp, #12]	@ float
 1763 024a 0990     		str	r0, [sp, #36]	@ float
 1764 024c 5046     		mov	r0, sl
 1765 024e FFF7FEFF 		bl	__aeabi_fmul
 1766              	.LVL305:
 1767 0252 4946     		mov	r1, r9
 1768 0254 8246     		mov	sl, r0
 1769              	.LVL306:
 1770 0256 0598     		ldr	r0, [sp, #20]	@ float
 1771 0258 FFF7FEFF 		bl	__aeabi_fmul
 1772              	.LVL307:
 1773 025c 0999     		ldr	r1, [sp, #36]	@ float
 1774 025e 8346     		mov	fp, r0
 1775              	.LVL308:
 1776 0260 0898     		ldr	r0, [sp, #32]	@ float
 1777 0262 FFF7FEFF 		bl	__aeabi_fadd
 1778              	.LVL309:
 1779 0266 5146     		mov	r1, sl
 1780 0268 FFF7FEFF 		bl	__aeabi_fsub
 1781              	.LVL310:
 1782 026c 5946     		mov	r1, fp
 1783 026e FFF7FEFF 		bl	__aeabi_fadd
 1784              	.LVL311:
 1785 0272 5146     		mov	r1, sl
 1786 0274 8146     		mov	r9, r0
 1787              	.LVL312:
 1788 0276 0898     		ldr	r0, [sp, #32]	@ float
 1789              	.LVL313:
 1790 0278 FFF7FEFF 		bl	__aeabi_fadd
 1791              	.LVL314:
 1792 027c 0999     		ldr	r1, [sp, #36]	@ float
 1793 027e FFF7FEFF 		bl	__aeabi_fadd
 1794              	.LVL315:
 1795 0282 5946     		mov	r1, fp
 1796 0284 FFF7FEFF 		bl	__aeabi_fsub
 1797              	.LVL316:
 1798 0288 0099     		ldr	r1, [sp, #0]
 1799 028a 8246     		mov	sl, r0
 1800              	.LVL317:
 1801 028c 0846     		mov	r0, r1
 1802              	.LVL318:
 1803 028e 0399     		ldr	r1, [sp, #12]	@ float
 1804 0290 FFF7FEFF 		bl	__aeabi_fmul
 1805              	.LVL319:
 1806 0294 0699     		ldr	r1, [sp, #24]	@ float
 1807 0296 FFF7FEFF 		bl	__aeabi_fsub
 1808              	.LVL320:
 1809 029a 0699     		ldr	r1, [sp, #24]	@ float
 1810 029c FFF7FEFF 		bl	__aeabi_fadd
 1811              	.LVL321:
 1812 02a0 0499     		ldr	r1, [sp, #16]	@ float
 1813 02a2 8346     		mov	fp, r0
 1814 02a4 0598     		ldr	r0, [sp, #20]	@ float
 1815 02a6 FFF7FEFF 		bl	__aeabi_fmul
 1816              	.LVL322:
 1817 02aa 0146     		mov	r1, r0
 1818 02ac 5846     		mov	r0, fp
 1819 02ae FFF7FEFF 		bl	__aeabi_fadd
 1820              	.LVL323:
 302:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 303:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     /* compute final setpoint with yaw */
 304:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_COMP_NORM_SHORTEST(*q_sp, q_rp_sp, q_yaw_diff);
 1821              		.loc 3 304 0
 1822 02b2 0799     		ldr	r1, [sp, #28]	@ float
 301:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_COMP_INV(q_yaw_diff, q_yaw_sp, q_yaw);
 1823              		.loc 3 301 0
 1824 02b4 8346     		mov	fp, r0
 1825              	.LVL324:
 1826              		.loc 3 304 0
 1827 02b6 4046     		mov	r0, r8
 1828              	.LVL325:
 1829 02b8 FFF7FEFF 		bl	__aeabi_fmul
 1830              	.LVL326:
 1831 02bc 4946     		mov	r1, r9
 1832 02be 0346     		mov	r3, r0
 1833 02c0 3846     		mov	r0, r7
 1834 02c2 0093     		str	r3, [sp, #0]
 1835 02c4 FFF7FEFF 		bl	__aeabi_fmul
 1836              	.LVL327:
 1837 02c8 0146     		mov	r1, r0
 1838 02ca 0098     		ldr	r0, [sp, #0]
 1839 02cc FFF7FEFF 		bl	__aeabi_fsub
 1840              	.LVL328:
 1841 02d0 5146     		mov	r1, sl
 1842 02d2 0246     		mov	r2, r0
 1843 02d4 3046     		mov	r0, r6
 1844 02d6 0092     		str	r2, [sp, #0]
 1845 02d8 FFF7FEFF 		bl	__aeabi_fmul
 1846              	.LVL329:
 1847 02dc 009B     		ldr	r3, [sp, #0]
 1848 02de 0146     		mov	r1, r0
 1849 02e0 1846     		mov	r0, r3
 1850 02e2 FFF7FEFF 		bl	__aeabi_fsub
 1851              	.LVL330:
 1852 02e6 5946     		mov	r1, fp
 1853 02e8 0246     		mov	r2, r0
 1854 02ea 2846     		mov	r0, r5
 1855 02ec 0092     		str	r2, [sp, #0]
 1856 02ee FFF7FEFF 		bl	__aeabi_fmul
 1857              	.LVL331:
 1858 02f2 0146     		mov	r1, r0
 1859 02f4 0098     		ldr	r0, [sp, #0]
 1860 02f6 FFF7FEFF 		bl	__aeabi_fsub
 1861              	.LVL332:
 1862 02fa 4946     		mov	r1, r9
 1863 02fc 0346     		mov	r3, r0
 1864 02fe 2060     		str	r0, [r4, #0]	@ float
 1865 0300 4046     		mov	r0, r8
 1866 0302 0093     		str	r3, [sp, #0]
 1867 0304 FFF7FEFF 		bl	__aeabi_fmul
 1868              	.LVL333:
 1869 0308 0799     		ldr	r1, [sp, #28]	@ float
 1870 030a 0246     		mov	r2, r0
 1871 030c 3846     		mov	r0, r7
 1872 030e 0192     		str	r2, [sp, #4]
 1873 0310 FFF7FEFF 		bl	__aeabi_fmul
 1874              	.LVL334:
 1875 0314 0146     		mov	r1, r0
 1876 0316 0198     		ldr	r0, [sp, #4]
 1877 0318 FFF7FEFF 		bl	__aeabi_fadd
 1878              	.LVL335:
 1879 031c 5946     		mov	r1, fp
 1880 031e 0346     		mov	r3, r0
 1881 0320 3046     		mov	r0, r6
 1882 0322 0193     		str	r3, [sp, #4]
 1883 0324 FFF7FEFF 		bl	__aeabi_fmul
 1884              	.LVL336:
 1885 0328 019A     		ldr	r2, [sp, #4]
 1886 032a 0146     		mov	r1, r0
 1887 032c 1046     		mov	r0, r2
 1888 032e FFF7FEFF 		bl	__aeabi_fadd
 1889              	.LVL337:
 1890 0332 5146     		mov	r1, sl
 1891 0334 0346     		mov	r3, r0
 1892 0336 2846     		mov	r0, r5
 1893 0338 0193     		str	r3, [sp, #4]
 1894 033a FFF7FEFF 		bl	__aeabi_fmul
 1895              	.LVL338:
 1896 033e 0146     		mov	r1, r0
 1897 0340 0198     		ldr	r0, [sp, #4]
 1898 0342 FFF7FEFF 		bl	__aeabi_fsub
 1899              	.LVL339:
 1900 0346 5146     		mov	r1, sl
 1901 0348 8446     		mov	ip, r0
 1902 034a 6060     		str	r0, [r4, #4]	@ float
 1903 034c 4046     		mov	r0, r8
 1904 034e CDF808C0 		str	ip, [sp, #8]
 1905 0352 FFF7FEFF 		bl	__aeabi_fmul
 1906              	.LVL340:
 1907 0356 5946     		mov	r1, fp
 1908 0358 0246     		mov	r2, r0
 1909 035a 3846     		mov	r0, r7
 1910 035c 0192     		str	r2, [sp, #4]
 1911 035e FFF7FEFF 		bl	__aeabi_fmul
 1912              	.LVL341:
 1913 0362 019B     		ldr	r3, [sp, #4]
 1914 0364 0146     		mov	r1, r0
 1915 0366 1846     		mov	r0, r3
 1916 0368 FFF7FEFF 		bl	__aeabi_fsub
 1917              	.LVL342:
 1918 036c 0799     		ldr	r1, [sp, #28]	@ float
 1919 036e 0246     		mov	r2, r0
 1920 0370 3046     		mov	r0, r6
 1921 0372 0192     		str	r2, [sp, #4]
 1922 0374 FFF7FEFF 		bl	__aeabi_fmul
 1923              	.LVL343:
 1924 0378 0146     		mov	r1, r0
 1925 037a 0198     		ldr	r0, [sp, #4]
 1926 037c FFF7FEFF 		bl	__aeabi_fadd
 1927              	.LVL344:
 1928 0380 4946     		mov	r1, r9
 1929 0382 0346     		mov	r3, r0
 1930 0384 2846     		mov	r0, r5
 1931 0386 0193     		str	r3, [sp, #4]
 1932 0388 FFF7FEFF 		bl	__aeabi_fmul
 1933              	.LVL345:
 1934 038c 019A     		ldr	r2, [sp, #4]
 1935 038e 0146     		mov	r1, r0
 1936 0390 1046     		mov	r0, r2
 1937 0392 FFF7FEFF 		bl	__aeabi_fadd
 1938              	.LVL346:
 1939 0396 5946     		mov	r1, fp
 1940 0398 0346     		mov	r3, r0
 1941 039a A060     		str	r0, [r4, #8]	@ float
 1942 039c 4046     		mov	r0, r8
 1943 039e 0193     		str	r3, [sp, #4]
 1944 03a0 FFF7FEFF 		bl	__aeabi_fmul
 1945              	.LVL347:
 1946 03a4 5146     		mov	r1, sl
 1947 03a6 8046     		mov	r8, r0
 1948              	.LVL348:
 1949 03a8 3846     		mov	r0, r7
 1950 03aa FFF7FEFF 		bl	__aeabi_fmul
 1951              	.LVL349:
 1952 03ae 0146     		mov	r1, r0
 1953 03b0 4046     		mov	r0, r8
 1954 03b2 FFF7FEFF 		bl	__aeabi_fadd
 1955              	.LVL350:
 1956 03b6 4946     		mov	r1, r9
 1957 03b8 0746     		mov	r7, r0
 1958              	.LVL351:
 1959 03ba 3046     		mov	r0, r6
 1960 03bc FFF7FEFF 		bl	__aeabi_fmul
 1961              	.LVL352:
 1962 03c0 0146     		mov	r1, r0
 1963 03c2 3846     		mov	r0, r7
 1964 03c4 FFF7FEFF 		bl	__aeabi_fsub
 1965              	.LVL353:
 1966 03c8 0799     		ldr	r1, [sp, #28]	@ float
 1967 03ca 0646     		mov	r6, r0
 1968              	.LVL354:
 1969 03cc 2846     		mov	r0, r5
 1970 03ce FFF7FEFF 		bl	__aeabi_fmul
 1971              	.LVL355:
 1972 03d2 0146     		mov	r1, r0
 1973 03d4 3046     		mov	r0, r6
 1974 03d6 FFF7FEFF 		bl	__aeabi_fadd
 1975              	.LVL356:
 1976 03da E060     		str	r0, [r4, #12]	@ float
 1977 03dc 0099     		ldr	r1, [sp, #0]
 1978 03de 0546     		mov	r5, r0
 1979              	.LVL357:
 1980 03e0 0846     		mov	r0, r1
 1981 03e2 0021     		movs	r1, #0
 1982 03e4 FFF7FEFF 		bl	__aeabi_fcmplt
 1983              	.LVL358:
 1984 03e8 019A     		ldr	r2, [sp, #4]
 1985 03ea 009B     		ldr	r3, [sp, #0]
 1986 03ec DDF808C0 		ldr	ip, [sp, #8]
 1987 03f0 70B1     		cbz	r0, .L125
 1988              		.loc 3 304 0 is_stmt 0 discriminator 1
 1989 03f2 03F10040 		add	r0, r3, #-2147483648
 1990 03f6 0CF10047 		add	r7, ip, #-2147483648
 1991 03fa 02F10046 		add	r6, r2, #-2147483648
 1992 03fe 05F10045 		add	r5, r5, #-2147483648
 1993 0402 2060     		str	r0, [r4, #0]	@ float
 1994 0404 6760     		str	r7, [r4, #4]	@ float
 1995 0406 A660     		str	r6, [r4, #8]	@ float
 1996 0408 E560     		str	r5, [r4, #12]	@ float
 1997 040a 01E0     		b	.L136
 1998              	.L137:
 1999              		.align	2
 2000              	.L135:
 2001 040c 00000000 		.word	stab_att_sp_euler
 2002              	.L136:
 2003              	.L125:
 2004              	.LBB43:
 2005              		.loc 3 304 0 discriminator 2
 2006 0410 2068     		ldr	r0, [r4, #0]	@ float
 2007 0412 D4F80480 		ldr	r8, [r4, #4]	@ float
 2008 0416 0146     		mov	r1, r0
 2009 0418 FFF7FEFF 		bl	__aeabi_fmul
 2010              	.LVL359:
 2011 041c 4146     		mov	r1, r8
 2012 041e 0546     		mov	r5, r0
 2013 0420 4046     		mov	r0, r8
 2014 0422 FFF7FEFF 		bl	__aeabi_fmul
 2015              	.LVL360:
 2016 0426 0146     		mov	r1, r0
 2017 0428 2846     		mov	r0, r5
 2018 042a FFF7FEFF 		bl	__aeabi_fadd
 2019              	.LVL361:
 2020 042e A768     		ldr	r7, [r4, #8]	@ float
 2021 0430 0546     		mov	r5, r0
 2022 0432 3946     		mov	r1, r7
 2023 0434 3846     		mov	r0, r7
 2024 0436 FFF7FEFF 		bl	__aeabi_fmul
 2025              	.LVL362:
 2026 043a 0146     		mov	r1, r0
 2027 043c 2846     		mov	r0, r5
 2028 043e FFF7FEFF 		bl	__aeabi_fadd
 2029              	.LVL363:
 2030 0442 E668     		ldr	r6, [r4, #12]	@ float
 2031 0444 0546     		mov	r5, r0
 2032 0446 3146     		mov	r1, r6
 2033 0448 3046     		mov	r0, r6
 2034 044a FFF7FEFF 		bl	__aeabi_fmul
 2035              	.LVL364:
 2036 044e 0146     		mov	r1, r0
 2037 0450 2846     		mov	r0, r5
 2038 0452 FFF7FEFF 		bl	__aeabi_fadd
 2039              	.LVL365:
 2040 0456 FFF7FEFF 		bl	sqrtf
 2041              	.LVL366:
 2042 045a 4FF40001 		mov	r1, #8388608
 2043 045e 0546     		mov	r5, r0
 2044              	.LVL367:
 2045 0460 FFF7FEFF 		bl	__aeabi_fcmpgt
 2046              	.LVL368:
 2047 0464 C8B1     		cbz	r0, .L119
 2048              		.loc 3 304 0 discriminator 3
 2049 0466 2068     		ldr	r0, [r4, #0]	@ float
 2050 0468 2946     		mov	r1, r5
 2051 046a FFF7FEFF 		bl	__aeabi_fdiv
 2052              	.LVL369:
 2053 046e 2946     		mov	r1, r5
 2054 0470 2060     		str	r0, [r4, #0]	@ float
 2055 0472 6068     		ldr	r0, [r4, #4]	@ float
 2056 0474 FFF7FEFF 		bl	__aeabi_fdiv
 2057              	.LVL370:
 2058 0478 2946     		mov	r1, r5
 2059 047a 6060     		str	r0, [r4, #4]	@ float
 2060 047c A068     		ldr	r0, [r4, #8]	@ float
 2061 047e FFF7FEFF 		bl	__aeabi_fdiv
 2062              	.LVL371:
 2063 0482 2946     		mov	r1, r5
 2064 0484 A060     		str	r0, [r4, #8]	@ float
 2065 0486 E068     		ldr	r0, [r4, #12]	@ float
 2066 0488 FFF7FEFF 		bl	__aeabi_fdiv
 2067              	.LVL372:
 2068 048c E060     		str	r0, [r4, #12]	@ float
 2069 048e 04E0     		b	.L119
 2070              	.LVL373:
 2071              	.L124:
 2072              	.LBE43:
 2073              	.LBE40:
 305:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   } else {
 306:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     QUAT_COPY(*q_sp, q_rp_sp);
 2074              		.loc 3 306 0 is_stmt 1
 2075 0490 C4F80080 		str	r8, [r4, #0]	@ float
 2076 0494 6760     		str	r7, [r4, #4]	@ float
 2077 0496 A660     		str	r6, [r4, #8]	@ float
 2078 0498 E560     		str	r5, [r4, #12]	@ float
 2079              	.LVL374:
 2080              	.L119:
 307:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   }
 308:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** }
 2081              		.loc 3 308 0
 2082 049a 0FB0     		add	sp, sp, #60
 2083 049c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2084              		.cfi_endproc
 2085              	.LFE128:
 2087              		.section	.text.stabilization_attitude_read_rc_setpoint_quat_earth_bound_f,"ax",%progbits
 2088              		.align	1
 2089              		.global	stabilization_attitude_read_rc_setpoint_quat_earth_bound_f
 2090              		.thumb
 2091              		.thumb_func
 2093              	stabilization_attitude_read_rc_setpoint_quat_earth_bound_f:
 2094              	.LFB129:
 309:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 310:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** //Function that reads the rc setpoint in an earth bound frame
 311:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_setpoint_quat_earth_bound_f(struct FloatQuat* q_sp, bool_t in_f
 2095              		.loc 3 311 0
 2096              		.cfi_startproc
 2097              		@ args = 0, pretend = 0, frame = 40
 2098              		@ frame_needed = 0, uses_anonymous_args = 0
 2099              	.LVL375:
 2100 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2101              	.LCFI10:
 2102              		.cfi_def_cfa_offset 36
 2103              		.cfi_offset 4, -36
 2104              		.cfi_offset 5, -32
 2105              		.cfi_offset 6, -28
 2106              		.cfi_offset 7, -24
 2107              		.cfi_offset 8, -20
 2108              		.cfi_offset 9, -16
 2109              		.cfi_offset 10, -12
 2110              		.cfi_offset 11, -8
 2111              		.cfi_offset 14, -4
 312:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   // FIXME: remove me, do in quaternion directly
 313:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   // is currently still needed, since the yaw setpoint integration is done in eulers
 314:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   #if defined STABILIZATION_ATTITUDE_TYPE_INT
 315:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   stabilization_attitude_read_rc_setpoint_eulers(&stab_att_sp_euler, in_flight);
 2112              		.loc 3 315 0
 2113 0004 4B4C     		ldr	r4, .L144
 311:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_setpoint_quat_earth_bound_f(struct FloatQuat* q_sp, bool_t in_f
 2114              		.loc 3 311 0
 2115 0006 8BB0     		sub	sp, sp, #44
 2116              	.LCFI11:
 2117              		.cfi_def_cfa_offset 80
 311:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_setpoint_quat_earth_bound_f(struct FloatQuat* q_sp, bool_t in_f
 2118              		.loc 3 311 0
 2119 0008 8246     		mov	sl, r0
 2120              		.loc 3 315 0
 2121 000a 2046     		mov	r0, r4
 2122              	.LVL376:
 311:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** void stabilization_attitude_read_rc_setpoint_quat_earth_bound_f(struct FloatQuat* q_sp, bool_t in_f
 2123              		.loc 3 311 0
 2124 000c 0D46     		mov	r5, r1
 2125              		.loc 3 315 0
 2126 000e FFF7FEFF 		bl	stabilization_attitude_read_rc_setpoint_eulers
 2127              	.LVL377:
 316:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   #else
 317:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   stabilization_attitude_read_rc_setpoint_eulers_f(&stab_att_sp_euler, in_flight);
 318:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   #endif
 319:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 320:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   const struct FloatVect3 zaxis = {0., 0., 1.};
 321:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 322:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   struct FloatQuat q_rp_cmd;
 323:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   stabilization_attitude_read_rc_roll_pitch_earth_quat_f(&q_rp_cmd);
 2128              		.loc 3 323 0
 2129 0012 06A8     		add	r0, sp, #24
 2130 0014 FFF7FEFF 		bl	stabilization_attitude_read_rc_roll_pitch_earth_quat_f
 2131              	.LVL378:
 324:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 325:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   if (in_flight) {
 2132              		.loc 3 325 0
 2133 0018 002D     		cmp	r5, #0
 2134 001a 00F08D80 		beq	.L139
 2135              	.LBB44:
 2136              	.LBB45:
 326:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     /* get current heading setpoint */
 327:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     struct FloatQuat q_yaw_sp;
 328:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 329:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     #if defined STABILIZATION_ATTITUDE_TYPE_INT
 330:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw_sp, zaxis, ANGLE_FLOAT_OF_BFP(stab_att_sp_euler.psi));
 2137              		.loc 3 330 0
 2138 001e A068     		ldr	r0, [r4, #8]
 2139 0020 FFF7FEFF 		bl	__aeabi_i2f
 2140              	.LVL379:
 2141 0024 4FF06651 		mov	r1, #964689920
 2142 0028 FFF7FEFF 		bl	__aeabi_fmul
 2143              	.LVL380:
 2144 002c 4FF07C51 		mov	r1, #1056964608
 2145 0030 FFF7FEFF 		bl	__aeabi_fmul
 2146              	.LVL381:
 2147 0034 0646     		mov	r6, r0
 2148 0036 FFF7FEFF 		bl	sinf
 2149              	.LVL382:
 2150 003a 0446     		mov	r4, r0
 2151              	.LVL383:
 2152 003c 3046     		mov	r0, r6
 2153              	.LVL384:
 2154 003e FFF7FEFF 		bl	cosf
 2155              	.LVL385:
 2156 0042 0021     		movs	r1, #0
 2157 0044 0546     		mov	r5, r0
 2158              	.LVL386:
 2159 0046 2046     		mov	r0, r4
 2160              	.LVL387:
 2161 0048 FFF7FEFF 		bl	__aeabi_fmul
 2162              	.LVL388:
 2163              	.LBE45:
 331:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     #else
 332:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw_sp, zaxis, stab_att_sp_euler.psi);
 333:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     #endif
 334:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 335:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_COMP(*q_sp, q_yaw_sp, q_rp_cmd);
 2164              		.loc 3 335 0
 2165 004c DDF81C90 		ldr	r9, [sp, #28]	@ float
 2166              	.LBB46:
 330:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw_sp, zaxis, ANGLE_FLOAT_OF_BFP(stab_att_sp_euler.psi));
 2167              		.loc 3 330 0
 2168 0050 8046     		mov	r8, r0
 2169              	.LVL389:
 2170              	.LBE46:
 2171              		.loc 3 335 0
 2172 0052 4946     		mov	r1, r9
 2173 0054 FFF7FEFF 		bl	__aeabi_fmul
 2174              	.LVL390:
 2175 0058 089B     		ldr	r3, [sp, #32]	@ float
 2176 005a 0390     		str	r0, [sp, #12]	@ float
 2177 005c 1946     		mov	r1, r3
 2178 005e 4046     		mov	r0, r8
 2179 0060 0193     		str	r3, [sp, #4]
 2180 0062 FFF7FEFF 		bl	__aeabi_fmul
 2181              	.LVL391:
 2182 0066 069E     		ldr	r6, [sp, #24]	@ float
 2183 0068 0490     		str	r0, [sp, #16]	@ float
 2184 006a 3146     		mov	r1, r6
 2185 006c 2846     		mov	r0, r5
 2186 006e FFF7FEFF 		bl	__aeabi_fmul
 2187              	.LVL392:
 2188 0072 0399     		ldr	r1, [sp, #12]	@ float
 2189 0074 FFF7FEFF 		bl	__aeabi_fsub
 2190              	.LVL393:
 2191 0078 0499     		ldr	r1, [sp, #16]	@ float
 2192 007a FFF7FEFF 		bl	__aeabi_fsub
 2193              	.LVL394:
 2194 007e 099F     		ldr	r7, [sp, #36]	@ float
 2195 0080 8346     		mov	fp, r0
 2196 0082 3946     		mov	r1, r7
 2197 0084 2046     		mov	r0, r4
 2198 0086 FFF7FEFF 		bl	__aeabi_fmul
 2199              	.LVL395:
 2200 008a 0146     		mov	r1, r0
 2201 008c 5846     		mov	r0, fp
 2202 008e FFF7FEFF 		bl	__aeabi_fsub
 2203              	.LVL396:
 2204 0092 3146     		mov	r1, r6
 2205 0094 CAF80000 		str	r0, [sl, #0]	@ float
 2206 0098 4046     		mov	r0, r8
 2207 009a FFF7FEFF 		bl	__aeabi_fmul
 2208              	.LVL397:
 2209 009e 3946     		mov	r1, r7
 2210 00a0 8346     		mov	fp, r0
 2211 00a2 4046     		mov	r0, r8
 2212 00a4 FFF7FEFF 		bl	__aeabi_fmul
 2213              	.LVL398:
 2214 00a8 4946     		mov	r1, r9
 2215 00aa 8046     		mov	r8, r0
 2216              	.LVL399:
 2217 00ac 2846     		mov	r0, r5
 2218 00ae FFF7FEFF 		bl	__aeabi_fmul
 2219              	.LVL400:
 2220 00b2 5946     		mov	r1, fp
 2221 00b4 FFF7FEFF 		bl	__aeabi_fadd
 2222              	.LVL401:
 2223 00b8 4146     		mov	r1, r8
 2224 00ba FFF7FEFF 		bl	__aeabi_fadd
 2225              	.LVL402:
 2226 00be 019A     		ldr	r2, [sp, #4]
 2227 00c0 8446     		mov	ip, r0
 2228 00c2 1146     		mov	r1, r2
 2229 00c4 2046     		mov	r0, r4
 2230 00c6 CDF808C0 		str	ip, [sp, #8]
 2231 00ca FFF7FEFF 		bl	__aeabi_fmul
 2232              	.LVL403:
 2233 00ce DDF808C0 		ldr	ip, [sp, #8]
 2234 00d2 0146     		mov	r1, r0
 2235 00d4 6046     		mov	r0, ip
 2236 00d6 FFF7FEFF 		bl	__aeabi_fsub
 2237              	.LVL404:
 2238 00da 0199     		ldr	r1, [sp, #4]
 2239 00dc CAF80400 		str	r0, [sl, #4]	@ float
 2240 00e0 2846     		mov	r0, r5
 2241 00e2 FFF7FEFF 		bl	__aeabi_fmul
 2242              	.LVL405:
 2243 00e6 4146     		mov	r1, r8
 2244 00e8 FFF7FEFF 		bl	__aeabi_fsub
 2245              	.LVL406:
 2246 00ec 5946     		mov	r1, fp
 2247 00ee FFF7FEFF 		bl	__aeabi_fadd
 2248              	.LVL407:
 2249 00f2 4946     		mov	r1, r9
 2250 00f4 8046     		mov	r8, r0
 2251 00f6 2046     		mov	r0, r4
 2252 00f8 FFF7FEFF 		bl	__aeabi_fmul
 2253              	.LVL408:
 2254 00fc 0146     		mov	r1, r0
 2255 00fe 4046     		mov	r0, r8
 2256 0100 FFF7FEFF 		bl	__aeabi_fadd
 2257              	.LVL409:
 2258 0104 3946     		mov	r1, r7
 2259 0106 CAF80800 		str	r0, [sl, #8]	@ float
 2260 010a 2846     		mov	r0, r5
 2261 010c FFF7FEFF 		bl	__aeabi_fmul
 2262              	.LVL410:
 2263 0110 0499     		ldr	r1, [sp, #16]	@ float
 2264 0112 FFF7FEFF 		bl	__aeabi_fadd
 2265              	.LVL411:
 2266 0116 0399     		ldr	r1, [sp, #12]	@ float
 2267 0118 FFF7FEFF 		bl	__aeabi_fsub
 2268              	.LVL412:
 2269 011c 3146     		mov	r1, r6
 2270 011e 0546     		mov	r5, r0
 2271              	.LVL413:
 2272 0120 2046     		mov	r0, r4
 2273 0122 FFF7FEFF 		bl	__aeabi_fmul
 2274              	.LVL414:
 2275 0126 0146     		mov	r1, r0
 2276 0128 2846     		mov	r0, r5
 2277 012a FFF7FEFF 		bl	__aeabi_fadd
 2278              	.LVL415:
 2279 012e CAF80C00 		str	r0, [sl, #12]	@ float
 2280 0132 CAE0     		b	.L138
 2281              	.L145:
 2282              		.align	2
 2283              	.L144:
 2284 0134 00000000 		.word	stab_att_sp_euler
 2285              	.LVL416:
 2286              	.L139:
 2287              	.LBE44:
 2288              	.LBB47:
 2289              	.LBB48:
 336:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   }
 337:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   else {
 338:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     struct FloatQuat q_yaw;
 339:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw, zaxis, stateGetNedToBodyEulers_f()->psi);
 2290              		.loc 3 339 0
 2291 0138 FFF7FEFF 		bl	stateGetNedToBodyEulers_f
 2292              	.LVL417:
 2293 013c 4FF07C51 		mov	r1, #1056964608
 2294 0140 8068     		ldr	r0, [r0, #8]	@ float
 2295 0142 FFF7FEFF 		bl	__aeabi_fmul
 2296              	.LVL418:
 2297 0146 FFF7FEFF 		bl	sinf
 2298              	.LVL419:
 2299 014a 0646     		mov	r6, r0
 2300              	.LVL420:
 2301 014c FFF7FEFF 		bl	stateGetNedToBodyEulers_f
 2302              	.LVL421:
 2303 0150 4FF07C51 		mov	r1, #1056964608
 2304 0154 8068     		ldr	r0, [r0, #8]	@ float
 2305 0156 FFF7FEFF 		bl	__aeabi_fmul
 2306              	.LVL422:
 2307 015a FFF7FEFF 		bl	cosf
 2308              	.LVL423:
 2309 015e 0021     		movs	r1, #0
 2310 0160 0746     		mov	r7, r0
 2311              	.LVL424:
 2312 0162 3046     		mov	r0, r6
 2313              	.LVL425:
 2314 0164 FFF7FEFF 		bl	__aeabi_fmul
 2315              	.LVL426:
 2316              	.LBE48:
 340:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 341:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     /* roll/pitch commands applied to to current heading */
 342:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     struct FloatQuat q_rp_sp;
 343:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_COMP(q_rp_sp, q_yaw, q_rp_cmd);
 2317              		.loc 3 343 0
 2318 0168 079B     		ldr	r3, [sp, #28]	@ float
 2319              	.LBB49:
 339:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_OF_AXIS_ANGLE(q_yaw, zaxis, stateGetNedToBodyEulers_f()->psi);
 2320              		.loc 3 339 0
 2321 016a 0546     		mov	r5, r0
 2322              	.LVL427:
 2323              	.LBE49:
 2324              		.loc 3 343 0
 2325 016c 1946     		mov	r1, r3
 2326 016e 0293     		str	r3, [sp, #8]
 2327 0170 FFF7FEFF 		bl	__aeabi_fmul
 2328              	.LVL428:
 2329 0174 089A     		ldr	r2, [sp, #32]	@ float
 2330 0176 0390     		str	r0, [sp, #12]	@ float
 2331 0178 1146     		mov	r1, r2
 2332 017a 2846     		mov	r0, r5
 2333 017c 0192     		str	r2, [sp, #4]
 2334 017e FFF7FEFF 		bl	__aeabi_fmul
 2335              	.LVL429:
 2336 0182 DDF81880 		ldr	r8, [sp, #24]	@ float
 2337 0186 0490     		str	r0, [sp, #16]	@ float
 2338 0188 4146     		mov	r1, r8
 2339 018a 3846     		mov	r0, r7
 2340 018c FFF7FEFF 		bl	__aeabi_fmul
 2341              	.LVL430:
 2342 0190 0399     		ldr	r1, [sp, #12]	@ float
 2343 0192 FFF7FEFF 		bl	__aeabi_fsub
 2344              	.LVL431:
 2345 0196 0499     		ldr	r1, [sp, #16]	@ float
 2346 0198 FFF7FEFF 		bl	__aeabi_fsub
 2347              	.LVL432:
 2348 019c DDF82490 		ldr	r9, [sp, #36]	@ float
 2349 01a0 0446     		mov	r4, r0
 2350 01a2 4946     		mov	r1, r9
 2351 01a4 3046     		mov	r0, r6
 2352 01a6 FFF7FEFF 		bl	__aeabi_fmul
 2353              	.LVL433:
 2354 01aa 0146     		mov	r1, r0
 2355 01ac 2046     		mov	r0, r4
 2356 01ae FFF7FEFF 		bl	__aeabi_fsub
 2357              	.LVL434:
 2358 01b2 4146     		mov	r1, r8
 2359 01b4 8346     		mov	fp, r0
 2360              	.LVL435:
 2361 01b6 2846     		mov	r0, r5
 2362              	.LVL436:
 2363 01b8 FFF7FEFF 		bl	__aeabi_fmul
 2364              	.LVL437:
 2365 01bc 4946     		mov	r1, r9
 2366 01be 0446     		mov	r4, r0
 2367 01c0 2846     		mov	r0, r5
 2368 01c2 FFF7FEFF 		bl	__aeabi_fmul
 2369              	.LVL438:
 2370 01c6 0299     		ldr	r1, [sp, #8]
 2371 01c8 0590     		str	r0, [sp, #20]	@ float
 2372 01ca 3846     		mov	r0, r7
 2373 01cc FFF7FEFF 		bl	__aeabi_fmul
 2374              	.LVL439:
 2375 01d0 2146     		mov	r1, r4
 2376 01d2 FFF7FEFF 		bl	__aeabi_fadd
 2377              	.LVL440:
 2378 01d6 0599     		ldr	r1, [sp, #20]	@ float
 2379 01d8 FFF7FEFF 		bl	__aeabi_fadd
 2380              	.LVL441:
 2381 01dc 019B     		ldr	r3, [sp, #4]
 2382 01de 0546     		mov	r5, r0
 2383              	.LVL442:
 2384 01e0 1946     		mov	r1, r3
 2385 01e2 3046     		mov	r0, r6
 2386 01e4 FFF7FEFF 		bl	__aeabi_fmul
 2387              	.LVL443:
 2388 01e8 0146     		mov	r1, r0
 2389 01ea 2846     		mov	r0, r5
 2390 01ec FFF7FEFF 		bl	__aeabi_fsub
 2391              	.LVL444:
 2392 01f0 019A     		ldr	r2, [sp, #4]
 2393 01f2 0546     		mov	r5, r0
 2394              	.LVL445:
 2395 01f4 1146     		mov	r1, r2
 2396 01f6 3846     		mov	r0, r7
 2397              	.LVL446:
 2398 01f8 FFF7FEFF 		bl	__aeabi_fmul
 2399              	.LVL447:
 2400 01fc 0599     		ldr	r1, [sp, #20]	@ float
 2401 01fe FFF7FEFF 		bl	__aeabi_fsub
 2402              	.LVL448:
 2403 0202 2146     		mov	r1, r4
 2404 0204 FFF7FEFF 		bl	__aeabi_fadd
 2405              	.LVL449:
 2406 0208 0299     		ldr	r1, [sp, #8]
 2407 020a 0446     		mov	r4, r0
 2408 020c 3046     		mov	r0, r6
 2409 020e FFF7FEFF 		bl	__aeabi_fmul
 2410              	.LVL450:
 2411 0212 0146     		mov	r1, r0
 2412 0214 2046     		mov	r0, r4
 2413 0216 FFF7FEFF 		bl	__aeabi_fadd
 2414              	.LVL451:
 2415 021a 4946     		mov	r1, r9
 2416 021c 0446     		mov	r4, r0
 2417              	.LVL452:
 2418 021e 3846     		mov	r0, r7
 2419              	.LVL453:
 2420 0220 FFF7FEFF 		bl	__aeabi_fmul
 2421              	.LVL454:
 2422 0224 0499     		ldr	r1, [sp, #16]	@ float
 2423 0226 FFF7FEFF 		bl	__aeabi_fadd
 2424              	.LVL455:
 2425 022a 0399     		ldr	r1, [sp, #12]	@ float
 2426 022c FFF7FEFF 		bl	__aeabi_fsub
 2427              	.LVL456:
 2428 0230 4146     		mov	r1, r8
 2429 0232 0746     		mov	r7, r0
 2430              	.LVL457:
 2431 0234 3046     		mov	r0, r6
 2432 0236 FFF7FEFF 		bl	__aeabi_fmul
 2433              	.LVL458:
 2434 023a 0146     		mov	r1, r0
 2435 023c 3846     		mov	r0, r7
 2436 023e FFF7FEFF 		bl	__aeabi_fadd
 2437              	.LVL459:
 2438              	.LBB50:
 344:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_NORMALIZE(q_rp_sp);
 2439              		.loc 3 344 0
 2440 0242 5946     		mov	r1, fp
 2441              	.LBE50:
 343:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     FLOAT_QUAT_COMP(q_rp_sp, q_yaw, q_rp_cmd);
 2442              		.loc 3 343 0
 2443 0244 0646     		mov	r6, r0
 2444              	.LVL460:
 2445              	.LBB51:
 2446              		.loc 3 344 0
 2447 0246 5846     		mov	r0, fp
 2448              	.LVL461:
 2449 0248 FFF7FEFF 		bl	__aeabi_fmul
 2450              	.LVL462:
 2451 024c 2946     		mov	r1, r5
 2452 024e 0746     		mov	r7, r0
 2453 0250 2846     		mov	r0, r5
 2454 0252 FFF7FEFF 		bl	__aeabi_fmul
 2455              	.LVL463:
 2456 0256 0146     		mov	r1, r0
 2457 0258 3846     		mov	r0, r7
 2458 025a FFF7FEFF 		bl	__aeabi_fadd
 2459              	.LVL464:
 2460 025e 2146     		mov	r1, r4
 2461 0260 0746     		mov	r7, r0
 2462 0262 2046     		mov	r0, r4
 2463 0264 FFF7FEFF 		bl	__aeabi_fmul
 2464              	.LVL465:
 2465 0268 0146     		mov	r1, r0
 2466 026a 3846     		mov	r0, r7
 2467 026c FFF7FEFF 		bl	__aeabi_fadd
 2468              	.LVL466:
 2469 0270 3146     		mov	r1, r6
 2470 0272 0746     		mov	r7, r0
 2471 0274 3046     		mov	r0, r6
 2472 0276 FFF7FEFF 		bl	__aeabi_fmul
 2473              	.LVL467:
 2474 027a 0146     		mov	r1, r0
 2475 027c 3846     		mov	r0, r7
 2476 027e FFF7FEFF 		bl	__aeabi_fadd
 2477              	.LVL468:
 2478 0282 FFF7FEFF 		bl	sqrtf
 2479              	.LVL469:
 2480 0286 4FF40001 		mov	r1, #8388608
 2481 028a 0746     		mov	r7, r0
 2482              	.LVL470:
 2483 028c FFF7FEFF 		bl	__aeabi_fcmpgt
 2484              	.LVL471:
 2485 0290 98B1     		cbz	r0, .L141
 2486              		.loc 3 344 0 is_stmt 0 discriminator 1
 2487 0292 5846     		mov	r0, fp
 2488 0294 3946     		mov	r1, r7
 2489 0296 FFF7FEFF 		bl	__aeabi_fdiv
 2490              	.LVL472:
 2491 029a 3946     		mov	r1, r7
 2492 029c 8346     		mov	fp, r0
 2493              	.LVL473:
 2494 029e 2846     		mov	r0, r5
 2495              	.LVL474:
 2496 02a0 FFF7FEFF 		bl	__aeabi_fdiv
 2497              	.LVL475:
 2498 02a4 3946     		mov	r1, r7
 2499 02a6 0546     		mov	r5, r0
 2500              	.LVL476:
 2501 02a8 2046     		mov	r0, r4
 2502              	.LVL477:
 2503 02aa FFF7FEFF 		bl	__aeabi_fdiv
 2504              	.LVL478:
 2505 02ae 3946     		mov	r1, r7
 2506 02b0 0446     		mov	r4, r0
 2507              	.LVL479:
 2508 02b2 3046     		mov	r0, r6
 2509              	.LVL480:
 2510 02b4 FFF7FEFF 		bl	__aeabi_fdiv
 2511              	.LVL481:
 2512 02b8 0646     		mov	r6, r0
 2513              	.LVL482:
 2514              	.L141:
 2515              	.LBE51:
 345:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** 
 346:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****     QUAT_COPY(*q_sp, q_rp_sp);
 2516              		.loc 3 346 0 is_stmt 1
 2517 02ba CAF800B0 		str	fp, [sl, #0]	@ float
 2518 02be CAF80450 		str	r5, [sl, #4]	@ float
 2519 02c2 CAF80840 		str	r4, [sl, #8]	@ float
 2520 02c6 CAF80C60 		str	r6, [sl, #12]	@ float
 2521              	.LVL483:
 2522              	.L138:
 2523              	.LBE47:
 347:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c ****   }
 348:firmwares/rotorcraft/stabilization/stabilization_attitude_rc_setpoint.c **** }
 2524              		.loc 3 348 0
 2525 02ca 0BB0     		add	sp, sp, #44
 2526 02cc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2527              		.cfi_endproc
 2528              	.LFE129:
 2530              		.global	care_free_heading
 2531              		.section	.bss.care_free_heading,"aw",%nobits
 2532              		.align	2
 2533              		.set	.LANCHOR0,. + 0
 2536              	care_free_heading:
 2537 0000 00000000 		.space	4
 2538              		.text
 2539              	.Letext0:
 2540              		.file 4 "/opt/local/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../arm-none-eabi/include/stdint.h"
 2541              		.file 5 "/Users/tony-yi/git/paparazzi_local/sw/include/std.h"
 2542              		.file 6 "./math/pprz_algebra_int.h"
 2543              		.file 7 "./math/pprz_algebra_float.h"
 2544              		.file 8 "./paparazzi.h"
 2545              		.file 9 "./mcu_periph/sys_time.h"
 2546              		.file 10 "./subsystems/radio_control.h"
 2547              		.file 11 "./math/pprz_geodetic_int.h"
 2548              		.file 12 "./math/pprz_geodetic_float.h"
 2549              		.file 13 "./math/pprz_trig_int.h"
 2550              		.file 14 "./firmwares/rotorcraft/guidance/guidance_h.h"
 2551              		.file 15 "./firmwares/rotorcraft/stabilization/stabilization_attitude_common_int.h"
 2552              		.file 16 "./firmwares/rotorcraft/autopilot.h"
 2553              		.file 17 "/opt/local/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../arm-none-eabi/include/math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stabilization_attitude_rc_setpoint.c
/var/tmp//ccdEkcXK.s:19     .text.stateGetNedToBodyEulers_f:0000000000000000 $t
/var/tmp//ccdEkcXK.s:23     .text.stateGetNedToBodyEulers_f:0000000000000000 stateGetNedToBodyEulers_f
/var/tmp//ccdEkcXK.s:57     .text.stateGetNedToBodyEulers_f:0000000000000018 $d
/var/tmp//ccdEkcXK.s:63     .text.stabilization_attitude_reset_care_free_heading:0000000000000000 $t
/var/tmp//ccdEkcXK.s:68     .text.stabilization_attitude_reset_care_free_heading:0000000000000000 stabilization_attitude_reset_care_free_heading
/var/tmp//ccdEkcXK.s:90     .text.stabilization_attitude_reset_care_free_heading:0000000000000010 $d
/var/tmp//ccdEkcXK.s:98     .text.stabilization_attitude_get_heading_i:0000000000000000 $t
/var/tmp//ccdEkcXK.s:103    .text.stabilization_attitude_get_heading_i:0000000000000000 stabilization_attitude_get_heading_i
/var/tmp//ccdEkcXK.s:248    .text.stabilization_attitude_get_heading_i:00000000000000b8 $d
/var/tmp//ccdEkcXK.s:260    .text.stabilization_attitude_get_heading_f:0000000000000000 $t
/var/tmp//ccdEkcXK.s:265    .text.stabilization_attitude_get_heading_f:0000000000000000 stabilization_attitude_get_heading_f
/var/tmp//ccdEkcXK.s:337    .text.stabilization_attitude_get_heading_f:0000000000000058 $d
/var/tmp//ccdEkcXK.s:346    .text.stabilization_attitude_read_rc_setpoint_eulers:0000000000000000 $t
/var/tmp//ccdEkcXK.s:351    .text.stabilization_attitude_read_rc_setpoint_eulers:0000000000000000 stabilization_attitude_read_rc_setpoint_eulers
/var/tmp//ccdEkcXK.s:691    .text.stabilization_attitude_read_rc_setpoint_eulers:00000000000001e0 $d
/var/tmp//ccdEkcXK.s:715    .text.stabilization_attitude_read_rc_setpoint_eulers_f:0000000000000000 $t
/var/tmp//ccdEkcXK.s:720    .text.stabilization_attitude_read_rc_setpoint_eulers_f:0000000000000000 stabilization_attitude_read_rc_setpoint_eulers_f
/var/tmp//ccdEkcXK.s:1059   .text.stabilization_attitude_read_rc_setpoint_eulers_f:0000000000000228 $d
/var/tmp//ccdEkcXK.s:1085   .text.stabilization_attitude_read_rc_roll_pitch_quat_f:0000000000000000 $t
/var/tmp//ccdEkcXK.s:1090   .text.stabilization_attitude_read_rc_roll_pitch_quat_f:0000000000000000 stabilization_attitude_read_rc_roll_pitch_quat_f
/var/tmp//ccdEkcXK.s:1216   .text.stabilization_attitude_read_rc_roll_pitch_quat_f:00000000000000c0 $d
/var/tmp//ccdEkcXK.s:1226   .text.stabilization_attitude_read_rc_roll_pitch_earth_quat_f:0000000000000000 $t
/var/tmp//ccdEkcXK.s:1231   .text.stabilization_attitude_read_rc_roll_pitch_earth_quat_f:0000000000000000 stabilization_attitude_read_rc_roll_pitch_earth_quat_f
/var/tmp//ccdEkcXK.s:1374   .text.stabilization_attitude_read_rc_roll_pitch_earth_quat_f:00000000000000c8 $d
/var/tmp//ccdEkcXK.s:1384   .text.stabilization_attitude_read_rc_setpoint_quat_f:0000000000000000 $t
/var/tmp//ccdEkcXK.s:1389   .text.stabilization_attitude_read_rc_setpoint_quat_f:0000000000000000 stabilization_attitude_read_rc_setpoint_quat_f
/var/tmp//ccdEkcXK.s:1447   .text.stabilization_attitude_read_rc_setpoint_quat_f:0000000000000038 $d
/var/tmp//ccdEkcXK.s:1455   .text.stabilization_attitude_read_rc_setpoint_quat_f:0000000000000044 $t
/var/tmp//ccdEkcXK.s:2001   .text.stabilization_attitude_read_rc_setpoint_quat_f:000000000000040c $d
/var/tmp//ccdEkcXK.s:2006   .text.stabilization_attitude_read_rc_setpoint_quat_f:0000000000000410 $t
/var/tmp//ccdEkcXK.s:2088   .text.stabilization_attitude_read_rc_setpoint_quat_earth_bound_f:0000000000000000 $t
/var/tmp//ccdEkcXK.s:2093   .text.stabilization_attitude_read_rc_setpoint_quat_earth_bound_f:0000000000000000 stabilization_attitude_read_rc_setpoint_quat_earth_bound_f
/var/tmp//ccdEkcXK.s:2284   .text.stabilization_attitude_read_rc_setpoint_quat_earth_bound_f:0000000000000134 $d
/var/tmp//ccdEkcXK.s:2291   .text.stabilization_attitude_read_rc_setpoint_quat_earth_bound_f:0000000000000138 $t
/var/tmp//ccdEkcXK.s:2536   .bss.care_free_heading:0000000000000000 care_free_heading
/var/tmp//ccdEkcXK.s:2532   .bss.care_free_heading:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
/var/tmp//ccdEkcXK.s:714    .text.stabilization_attitude_read_rc_setpoint_eulers:0000000000000214 $t

UNDEFINED SYMBOLS
orientationCalcEulers_f
state
__aeabi_i2f
__aeabi_fmul
__aeabi_fcmpgt
orientationCalcEulers_i
pprz_trig_int
__aeabi_f2iz
__aeabi_i2d
__aeabi_dcmplt
__aeabi_fsub
__aeabi_fadd
sinf
__aeabi_f2d
__aeabi_dmul
__aeabi_d2iz
tanf
radio_control
autopilot_mode
guidance_h_mode
__aeabi_ddiv
__aeabi_d2f
__aeabi_dadd
__aeabi_dsub
__aeabi_dcmpgt
__aeabi_fcmplt
__aeabi_fdiv
cosf
sqrtf
transition_theta_offset
stab_att_sp_euler
