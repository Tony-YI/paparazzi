   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ppm_arch.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.ppm_arch_init,"ax",%progbits
  19              		.align	1
  20              		.global	ppm_arch_init
  21              		.thumb
  22              		.thumb_func
  24              	ppm_arch_init:
  25              	.LFB22:
  26              		.file 1 "arch/stm32/subsystems/radio_control/ppm_arch.c"
   1:arch/stm32/subsystems/radio_control/ppm_arch.c **** /*
   2:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * Copyright (C) 2010 The Paparazzi Team
   3:arch/stm32/subsystems/radio_control/ppm_arch.c ****  *
   4:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * This file is part of paparazzi.
   5:arch/stm32/subsystems/radio_control/ppm_arch.c ****  *
   6:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * it under the terms of the GNU General Public License as published by
   8:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * any later version.
  10:arch/stm32/subsystems/radio_control/ppm_arch.c ****  *
  11:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * GNU General Public License for more details.
  15:arch/stm32/subsystems/radio_control/ppm_arch.c ****  *
  16:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * You should have received a copy of the GNU General Public License
  17:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * Boston, MA 02111-1307, USA.
  20:arch/stm32/subsystems/radio_control/ppm_arch.c ****  */
  21:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  22:arch/stm32/subsystems/radio_control/ppm_arch.c **** /**
  23:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * @file arch/stm32/subsystems/radio_control/ppm_arch.c
  24:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * @ingroup stm32_arch
  25:arch/stm32/subsystems/radio_control/ppm_arch.c ****  *
  26:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * STM32 ppm decoder.
  27:arch/stm32/subsystems/radio_control/ppm_arch.c ****  *
  28:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * Input signal either on:
  29:arch/stm32/subsystems/radio_control/ppm_arch.c ****  *  - PA1 TIM2/CH2 (uart1 trig on Lisa/L)  (Servo 6 on Lisa/M)
  30:arch/stm32/subsystems/radio_control/ppm_arch.c ****  *  - PA10 TIM1/CH3 (uart1 trig on Lisa/L) (uart1 rx on Lisa/M)
  31:arch/stm32/subsystems/radio_control/ppm_arch.c ****  *
  32:arch/stm32/subsystems/radio_control/ppm_arch.c ****  */
  33:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  34:arch/stm32/subsystems/radio_control/ppm_arch.c **** #include "subsystems/radio_control.h"
  35:arch/stm32/subsystems/radio_control/ppm_arch.c **** #include "subsystems/radio_control/ppm.h"
  36:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  37:arch/stm32/subsystems/radio_control/ppm_arch.c **** #include BOARD_CONFIG
  38:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  39:arch/stm32/subsystems/radio_control/ppm_arch.c **** #include <libopencm3/stm32/rcc.h>
  40:arch/stm32/subsystems/radio_control/ppm_arch.c **** #include <libopencm3/stm32/gpio.h>
  41:arch/stm32/subsystems/radio_control/ppm_arch.c **** #include <libopencm3/stm32/timer.h>
  42:arch/stm32/subsystems/radio_control/ppm_arch.c **** #include <libopencm3/cm3/nvic.h>
  43:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  44:arch/stm32/subsystems/radio_control/ppm_arch.c **** #include "mcu_periph/sys_time.h"
  45:arch/stm32/subsystems/radio_control/ppm_arch.c **** #include "mcu_periph/gpio.h"
  46:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  47:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  48:arch/stm32/subsystems/radio_control/ppm_arch.c **** #define ONE_MHZ_CLK 1000000
  49:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  50:arch/stm32/subsystems/radio_control/ppm_arch.c **** uint8_t  ppm_cur_pulse;
  51:arch/stm32/subsystems/radio_control/ppm_arch.c **** uint32_t ppm_last_pulse_time;
  52:arch/stm32/subsystems/radio_control/ppm_arch.c **** bool_t   ppm_data_valid;
  53:arch/stm32/subsystems/radio_control/ppm_arch.c **** static uint32_t timer_rollover_cnt;
  54:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  55:arch/stm32/subsystems/radio_control/ppm_arch.c **** /*
  56:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * Timer clock frequency (before prescaling) is twice the frequency
  57:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * of the APB domain to which the timer is connected.
  58:arch/stm32/subsystems/radio_control/ppm_arch.c ****  */
  59:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  60:arch/stm32/subsystems/radio_control/ppm_arch.c **** #ifdef STM32F1
  61:arch/stm32/subsystems/radio_control/ppm_arch.c **** /**
  62:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * HCLK = 72MHz, Timer clock also 72MHz since
  63:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * TIM1_CLK = APB2 = 72MHz
  64:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * TIM2_CLK = 2 * APB1 = 2 * 32MHz
  65:arch/stm32/subsystems/radio_control/ppm_arch.c ****  */
  66:arch/stm32/subsystems/radio_control/ppm_arch.c **** #define PPM_TIMER_CLK       AHB_CLK
  67:arch/stm32/subsystems/radio_control/ppm_arch.c **** #endif
  68:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  69:arch/stm32/subsystems/radio_control/ppm_arch.c **** #if USE_PPM_TIM2
  70:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  71:arch/stm32/subsystems/radio_control/ppm_arch.c **** PRINT_CONFIG_MSG("Using TIM2 for PPM input.")
  72:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  73:arch/stm32/subsystems/radio_control/ppm_arch.c **** #define PPM_RCC             &RCC_APB1ENR
  74:arch/stm32/subsystems/radio_control/ppm_arch.c **** #define PPM_PERIPHERAL      RCC_APB1ENR_TIM2EN
  75:arch/stm32/subsystems/radio_control/ppm_arch.c **** #define PPM_TIMER           TIM2
  76:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  77:arch/stm32/subsystems/radio_control/ppm_arch.c **** #ifdef STM32F4
  78:arch/stm32/subsystems/radio_control/ppm_arch.c **** /* Since APB prescaler != 1 :
  79:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * Timer clock frequency (before prescaling) is twice the frequency
  80:arch/stm32/subsystems/radio_control/ppm_arch.c ****  * of the APB domain to which the timer is connected.
  81:arch/stm32/subsystems/radio_control/ppm_arch.c ****  */
  82:arch/stm32/subsystems/radio_control/ppm_arch.c **** #define PPM_TIMER_CLK       (rcc_ppre1_frequency * 2)
  83:arch/stm32/subsystems/radio_control/ppm_arch.c **** #endif
  84:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  85:arch/stm32/subsystems/radio_control/ppm_arch.c **** #elif USE_PPM_TIM1
  86:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  87:arch/stm32/subsystems/radio_control/ppm_arch.c **** PRINT_CONFIG_MSG("Using TIM1 for PPM input.")
  88:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  89:arch/stm32/subsystems/radio_control/ppm_arch.c **** #define PPM_RCC             &RCC_APB2ENR
  90:arch/stm32/subsystems/radio_control/ppm_arch.c **** #define PPM_PERIPHERAL      RCC_APB2ENR_TIM1EN
  91:arch/stm32/subsystems/radio_control/ppm_arch.c **** #define PPM_TIMER           TIM1
  92:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  93:arch/stm32/subsystems/radio_control/ppm_arch.c **** #ifdef STM32F4
  94:arch/stm32/subsystems/radio_control/ppm_arch.c **** #define PPM_TIMER_CLK       (rcc_ppre2_frequency * 2)
  95:arch/stm32/subsystems/radio_control/ppm_arch.c **** #endif
  96:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
  97:arch/stm32/subsystems/radio_control/ppm_arch.c **** #else
  98:arch/stm32/subsystems/radio_control/ppm_arch.c **** #error Unknown PPM input timer configuration.
  99:arch/stm32/subsystems/radio_control/ppm_arch.c **** #endif
 100:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 101:arch/stm32/subsystems/radio_control/ppm_arch.c **** void ppm_arch_init ( void ) {
  27              		.loc 1 101 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
 102:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 103:arch/stm32/subsystems/radio_control/ppm_arch.c ****   /* timer clock enable */
 104:arch/stm32/subsystems/radio_control/ppm_arch.c ****   rcc_peripheral_enable_clock(PPM_RCC, PPM_PERIPHERAL);
 105:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 106:arch/stm32/subsystems/radio_control/ppm_arch.c ****   /* GPIO clock enable */
 107:arch/stm32/subsystems/radio_control/ppm_arch.c ****   gpio_enable_clock(PPM_GPIO_PORT);
  36              		.loc 1 107 0
  37 0002 2D4C     		ldr	r4, .L2
 104:arch/stm32/subsystems/radio_control/ppm_arch.c ****   rcc_peripheral_enable_clock(PPM_RCC, PPM_PERIPHERAL);
  38              		.loc 1 104 0
  39 0004 0121     		movs	r1, #1
  40 0006 2D48     		ldr	r0, .L2+4
  41 0008 FFF7FEFF 		bl	rcc_peripheral_enable_clock
  42              	.LVL0:
  43              		.loc 1 107 0
  44 000c 2046     		mov	r0, r4
  45 000e FFF7FEFF 		bl	gpio_enable_clock
  46              	.LVL1:
 108:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 109:arch/stm32/subsystems/radio_control/ppm_arch.c ****   /* timer gpio configuration */
 110:arch/stm32/subsystems/radio_control/ppm_arch.c ****   gpio_setup_pin_af(PPM_GPIO_PORT, PPM_GPIO_PIN, PPM_GPIO_AF, FALSE);
  47              		.loc 1 110 0
  48 0012 0022     		movs	r2, #0
  49 0014 0221     		movs	r1, #2
  50 0016 1346     		mov	r3, r2
  51 0018 2046     		mov	r0, r4
  52 001a FFF7FEFF 		bl	gpio_setup_pin_af
  53              	.LVL2:
 111:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 112:arch/stm32/subsystems/radio_control/ppm_arch.c ****   /* Time Base configuration */
 113:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_reset(PPM_TIMER);
  54              		.loc 1 113 0
  55 001e 4FF08040 		mov	r0, #1073741824
  56 0022 FFF7FEFF 		bl	timer_reset
  57              	.LVL3:
 114:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_set_mode(PPM_TIMER, TIM_CR1_CKD_CK_INT,
  58              		.loc 1 114 0
  59 0026 0021     		movs	r1, #0
  60 0028 0B46     		mov	r3, r1
  61 002a 0A46     		mov	r2, r1
  62 002c 4FF08040 		mov	r0, #1073741824
  63 0030 FFF7FEFF 		bl	timer_set_mode
  64              	.LVL4:
 115:arch/stm32/subsystems/radio_control/ppm_arch.c ****                  TIM_CR1_CMS_EDGE, TIM_CR1_DIR_UP);
 116:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_set_period(PPM_TIMER, 0xFFFF);
  65              		.loc 1 116 0
  66 0034 4FF08040 		mov	r0, #1073741824
  67 0038 4FF6FF71 		movw	r1, #65535
  68 003c FFF7FEFF 		bl	timer_set_period
  69              	.LVL5:
 117:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_set_prescaler(PPM_TIMER, (PPM_TIMER_CLK / (RC_PPM_TICKS_PER_USEC*ONE_MHZ_CLK)) - 1);
  70              		.loc 1 117 0
  71 0040 0B21     		movs	r1, #11
  72 0042 4FF08040 		mov	r0, #1073741824
  73 0046 FFF7FEFF 		bl	timer_set_prescaler
  74              	.LVL6:
 118:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 119:arch/stm32/subsystems/radio_control/ppm_arch.c ****  /* TIM configuration: Input Capture mode ---------------------
 120:arch/stm32/subsystems/radio_control/ppm_arch.c ****      The Rising edge is used as active edge
 121:arch/stm32/subsystems/radio_control/ppm_arch.c ****   ------------------------------------------------------------ */
 122:arch/stm32/subsystems/radio_control/ppm_arch.c **** #if defined PPM_PULSE_TYPE && PPM_PULSE_TYPE == PPM_PULSE_TYPE_POSITIVE
 123:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_ic_set_polarity(PPM_TIMER, PPM_CHANNEL, TIM_IC_RISING);
  75              		.loc 1 123 0
  76 004a 0121     		movs	r1, #1
  77 004c 0022     		movs	r2, #0
  78 004e 4FF08040 		mov	r0, #1073741824
  79 0052 FFF7FEFF 		bl	timer_ic_set_polarity
  80              	.LVL7:
 124:arch/stm32/subsystems/radio_control/ppm_arch.c **** #elif defined PPM_PULSE_TYPE && PPM_PULSE_TYPE == PPM_PULSE_TYPE_NEGATIVE
 125:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_ic_set_polarity(PPM_TIMER, PPM_CHANNEL, TIM_IC_FALLING);
 126:arch/stm32/subsystems/radio_control/ppm_arch.c **** #else
 127:arch/stm32/subsystems/radio_control/ppm_arch.c **** #error "Unknown PPM_PULSE_TYPE"
 128:arch/stm32/subsystems/radio_control/ppm_arch.c **** #endif
 129:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_ic_set_input(PPM_TIMER, PPM_CHANNEL, PPM_TIMER_INPUT);
  81              		.loc 1 129 0
  82 0056 0121     		movs	r1, #1
  83 0058 0222     		movs	r2, #2
  84 005a 4FF08040 		mov	r0, #1073741824
  85 005e FFF7FEFF 		bl	timer_ic_set_input
  86              	.LVL8:
 130:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_ic_set_prescaler(PPM_TIMER, PPM_CHANNEL, TIM_IC_PSC_OFF);
  87              		.loc 1 130 0
  88 0062 0121     		movs	r1, #1
  89 0064 0022     		movs	r2, #0
  90 0066 4FF08040 		mov	r0, #1073741824
  91 006a FFF7FEFF 		bl	timer_ic_set_prescaler
  92              	.LVL9:
 131:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_ic_set_filter(PPM_TIMER, PPM_CHANNEL, TIM_IC_OFF);
  93              		.loc 1 131 0
  94 006e 0022     		movs	r2, #0
  95 0070 0121     		movs	r1, #1
  96 0072 4FF08040 		mov	r0, #1073741824
  97 0076 FFF7FEFF 		bl	timer_ic_set_filter
  98              	.LVL10:
 132:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 133:arch/stm32/subsystems/radio_control/ppm_arch.c ****   /* Enable timer Interrupt(s). */
 134:arch/stm32/subsystems/radio_control/ppm_arch.c ****   nvic_set_priority(PPM_IRQ, 2);
  99              		.loc 1 134 0
 100 007a 0221     		movs	r1, #2
 101 007c 1C20     		movs	r0, #28
 102 007e FFF7FEFF 		bl	nvic_set_priority
 103              	.LVL11:
 135:arch/stm32/subsystems/radio_control/ppm_arch.c ****   nvic_enable_irq(PPM_IRQ);
 104              		.loc 1 135 0
 105 0082 1C20     		movs	r0, #28
 106 0084 FFF7FEFF 		bl	nvic_enable_irq
 107              	.LVL12:
 136:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 137:arch/stm32/subsystems/radio_control/ppm_arch.c **** #ifdef PPM_IRQ2
 138:arch/stm32/subsystems/radio_control/ppm_arch.c ****   nvic_set_priority(PPM_IRQ2, 2);
 139:arch/stm32/subsystems/radio_control/ppm_arch.c ****   nvic_enable_irq(PPM_IRQ2);
 140:arch/stm32/subsystems/radio_control/ppm_arch.c **** #endif
 141:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 142:arch/stm32/subsystems/radio_control/ppm_arch.c ****   /* Enable the Capture/Compare and Update interrupt requests. */
 143:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_enable_irq(PPM_TIMER, (PPM_CC_IE | TIM_DIER_UIE));
 108              		.loc 1 143 0
 109 0088 0521     		movs	r1, #5
 110 008a 4FF08040 		mov	r0, #1073741824
 111 008e FFF7FEFF 		bl	timer_enable_irq
 112              	.LVL13:
 144:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 145:arch/stm32/subsystems/radio_control/ppm_arch.c ****   /* Enable capture channel. */
 146:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_ic_enable(PPM_TIMER, PPM_CHANNEL);
 113              		.loc 1 146 0
 114 0092 0121     		movs	r1, #1
 115 0094 4FF08040 		mov	r0, #1073741824
 116 0098 FFF7FEFF 		bl	timer_ic_enable
 117              	.LVL14:
 147:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 148:arch/stm32/subsystems/radio_control/ppm_arch.c ****   /* TIM enable counter */
 149:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_enable_counter(PPM_TIMER);
 118              		.loc 1 149 0
 119 009c 4FF08040 		mov	r0, #1073741824
 120 00a0 FFF7FEFF 		bl	timer_enable_counter
 121              	.LVL15:
 150:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 151:arch/stm32/subsystems/radio_control/ppm_arch.c ****   ppm_last_pulse_time = 0;
 122              		.loc 1 151 0
 123 00a4 064A     		ldr	r2, .L2+8
 124 00a6 0023     		movs	r3, #0
 125 00a8 1360     		str	r3, [r2, #0]
 152:arch/stm32/subsystems/radio_control/ppm_arch.c ****   ppm_cur_pulse = RADIO_CONTROL_NB_CHANNEL;
 126              		.loc 1 152 0
 127 00aa 0648     		ldr	r0, .L2+12
 153:arch/stm32/subsystems/radio_control/ppm_arch.c ****   timer_rollover_cnt = 0;
 128              		.loc 1 153 0
 129 00ac 064A     		ldr	r2, .L2+16
 152:arch/stm32/subsystems/radio_control/ppm_arch.c ****   ppm_cur_pulse = RADIO_CONTROL_NB_CHANNEL;
 130              		.loc 1 152 0
 131 00ae 0821     		movs	r1, #8
 132 00b0 0170     		strb	r1, [r0, #0]
 133              		.loc 1 153 0
 134 00b2 1360     		str	r3, [r2, #0]
 135 00b4 10BD     		pop	{r4, pc}
 136              	.L3:
 137 00b6 00BF     		.align	2
 138              	.L2:
 139 00b8 00080140 		.word	1073809408
 140 00bc 1C100240 		.word	1073877020
 141 00c0 00000000 		.word	.LANCHOR0
 142 00c4 00000000 		.word	.LANCHOR1
 143 00c8 00000000 		.word	.LANCHOR2
 144              		.cfi_endproc
 145              	.LFE22:
 147              		.section	.text.tim2_isr,"ax",%progbits
 148              		.align	1
 149              		.weak	tim2_isr
 150              		.thumb
 151              		.thumb_func
 153              	tim2_isr:
 154              	.LFB23:
 154:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 155:arch/stm32/subsystems/radio_control/ppm_arch.c **** }
 156:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 157:arch/stm32/subsystems/radio_control/ppm_arch.c **** #if USE_PPM_TIM2
 158:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 159:arch/stm32/subsystems/radio_control/ppm_arch.c **** void tim2_isr(void) {
 155              		.loc 1 159 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 160:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 161:arch/stm32/subsystems/radio_control/ppm_arch.c ****   if((TIM2_SR & PPM_CC_IF) != 0) {
 159              		.loc 1 161 0
 160 0000 294B     		ldr	r3, .L22
 159:arch/stm32/subsystems/radio_control/ppm_arch.c **** void tim2_isr(void) {
 161              		.loc 1 159 0
 162 0002 10B5     		push	{r4, lr}
 163              	.LCFI1:
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 4, -8
 166              		.cfi_offset 14, -4
 167              		.loc 1 161 0
 168 0004 1A68     		ldr	r2, [r3, #0]
 169 0006 5207     		lsls	r2, r2, #29
 170 0008 3ED5     		bpl	.L5
 171              	.LBB2:
 162:arch/stm32/subsystems/radio_control/ppm_arch.c ****     timer_clear_flag(TIM2, PPM_CC_IF);
 172              		.loc 1 162 0
 173 000a 0421     		movs	r1, #4
 174 000c 4FF08040 		mov	r0, #1073741824
 175 0010 FFF7FEFF 		bl	timer_clear_flag
 176              	.LVL16:
 163:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 164:arch/stm32/subsystems/radio_control/ppm_arch.c ****     uint32_t now = timer_get_counter(TIM2) + timer_rollover_cnt;
 177              		.loc 1 164 0
 178 0014 4FF08040 		mov	r0, #1073741824
 179 0018 FFF7FEFF 		bl	timer_get_counter
 180              	.LVL17:
 181 001c 2349     		ldr	r1, .L22+4
 182              	.LBB3:
 165:arch/stm32/subsystems/radio_control/ppm_arch.c ****     DecodePpmFrame(now);
 183              		.loc 1 165 0
 184 001e 244A     		ldr	r2, .L22+8
 185              	.LBE3:
 164:arch/stm32/subsystems/radio_control/ppm_arch.c ****     uint32_t now = timer_get_counter(TIM2) + timer_rollover_cnt;
 186              		.loc 1 164 0
 187 0020 0B68     		ldr	r3, [r1, #0]
 188              	.LBB4:
 189              		.loc 1 165 0
 190 0022 1168     		ldr	r1, [r2, #0]
 191              	.LBE4:
 164:arch/stm32/subsystems/radio_control/ppm_arch.c ****     uint32_t now = timer_get_counter(TIM2) + timer_rollover_cnt;
 192              		.loc 1 164 0
 193 0024 C018     		adds	r0, r0, r3
 194              	.LVL18:
 195              	.LBB5:
 196              		.loc 1 165 0
 197 0026 234B     		ldr	r3, .L22+12
 198 0028 1060     		str	r0, [r2, #0]
 199 002a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 200 002c 411A     		subs	r1, r0, r1
 201              	.LVL19:
 202 002e 082A     		cmp	r2, #8
 203 0030 13D1     		bne	.L6
 204              		.loc 1 165 0 is_stmt 0 discriminator 1
 205 0032 A1F5EA40 		sub	r0, r1, #29952
 206              	.LVL20:
 207 0036 3138     		subs	r0, r0, #49
 208 0038 4EF65E21 		movw	r1, #59998
 209              	.LVL21:
 210 003c 8842     		cmp	r0, r1
 211 003e 1E4B     		ldr	r3, .L22+16
 212 0040 09D8     		bhi	.L7
 213              		.loc 1 165 0 discriminator 3
 214 0042 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 215 0044 22B1     		cbz	r2, .L8
 216              		.loc 1 165 0 discriminator 5
 217 0046 1D49     		ldr	r1, .L22+20
 218 0048 0120     		movs	r0, #1
 219              	.LVL22:
 220 004a 0022     		movs	r2, #0
 221 004c 0870     		strb	r0, [r1, #0]
 222 004e 1A70     		strb	r2, [r3, #0]
 223              	.L8:
 224              		.loc 1 165 0 discriminator 6
 225 0050 0022     		movs	r2, #0
 226 0052 184B     		ldr	r3, .L22+12
 227 0054 16E0     		b	.L20
 228              	.L7:
 229              		.loc 1 165 0 discriminator 4
 230 0056 0022     		movs	r2, #0
 231 0058 14E0     		b	.L20
 232              	.LVL23:
 233              	.L6:
 234              		.loc 1 165 0 discriminator 2
 235 005a A1F59654 		sub	r4, r1, #4800
 236 005e 601E     		subs	r0, r4, #1
 237              	.LVL24:
 238 0060 42F2CE04 		movw	r4, #8398
 239 0064 A042     		cmp	r0, r4
 240 0066 09D8     		bhi	.L10
 241              		.loc 1 165 0 discriminator 7
 242 0068 1548     		ldr	r0, .L22+24
 243 006a 20F81210 		strh	r1, [r0, r2, lsl #1]	@ movhi
 244 006e 511C     		adds	r1, r2, #1
 245              	.LVL25:
 246 0070 CAB2     		uxtb	r2, r1
 247 0072 082A     		cmp	r2, #8
 248 0074 1A70     		strb	r2, [r3, #0]
 249 0076 16D1     		bne	.L4
 250              		.loc 1 165 0 discriminator 9
 251 0078 0122     		movs	r2, #1
 252 007a 02E0     		b	.L19
 253              	.LVL26:
 254              	.L10:
 255              		.loc 1 165 0 discriminator 8
 256 007c 0821     		movs	r1, #8
 257              	.LVL27:
 258 007e 1970     		strb	r1, [r3, #0]
 259 0080 0022     		movs	r2, #0
 260              	.LVL28:
 261              	.L19:
 262 0082 0D4B     		ldr	r3, .L22+16
 263              	.L20:
 264 0084 1A70     		strb	r2, [r3, #0]
 265 0086 10BD     		pop	{r4, pc}
 266              	.LVL29:
 267              	.L5:
 268              	.LBE5:
 269              	.LBE2:
 166:arch/stm32/subsystems/radio_control/ppm_arch.c ****   }
 167:arch/stm32/subsystems/radio_control/ppm_arch.c ****   else if((TIM2_SR & TIM_SR_UIF) != 0) {
 270              		.loc 1 167 0 is_stmt 1
 271 0088 1868     		ldr	r0, [r3, #0]
 272 008a C307     		lsls	r3, r0, #31
 273 008c 0BD5     		bpl	.L4
 168:arch/stm32/subsystems/radio_control/ppm_arch.c ****     timer_rollover_cnt+=(1<<16);
 274              		.loc 1 168 0
 275 008e 0749     		ldr	r1, .L22+4
 169:arch/stm32/subsystems/radio_control/ppm_arch.c ****     timer_clear_flag(TIM2, TIM_SR_UIF);
 276              		.loc 1 169 0
 277 0090 4FF08040 		mov	r0, #1073741824
 168:arch/stm32/subsystems/radio_control/ppm_arch.c ****     timer_rollover_cnt+=(1<<16);
 278              		.loc 1 168 0
 279 0094 0B68     		ldr	r3, [r1, #0]
 280 0096 03F58032 		add	r2, r3, #65536
 281 009a 0A60     		str	r2, [r1, #0]
 282              		.loc 1 169 0
 283 009c 0121     		movs	r1, #1
 170:arch/stm32/subsystems/radio_control/ppm_arch.c ****   }
 171:arch/stm32/subsystems/radio_control/ppm_arch.c **** 
 172:arch/stm32/subsystems/radio_control/ppm_arch.c **** }
 284              		.loc 1 172 0
 285 009e BDE81040 		pop	{r4, lr}
 169:arch/stm32/subsystems/radio_control/ppm_arch.c ****     timer_clear_flag(TIM2, TIM_SR_UIF);
 286              		.loc 1 169 0
 287 00a2 FFF7FEBF 		b	timer_clear_flag
 288              	.LVL30:
 289              	.L4:
 290 00a6 10BD     		pop	{r4, pc}
 291              	.L23:
 292              		.align	2
 293              	.L22:
 294 00a8 10000040 		.word	1073741840
 295 00ac 00000000 		.word	.LANCHOR2
 296 00b0 00000000 		.word	.LANCHOR0
 297 00b4 00000000 		.word	.LANCHOR1
 298 00b8 00000000 		.word	.LANCHOR3
 299 00bc 00000000 		.word	ppm_frame_available
 300 00c0 00000000 		.word	ppm_pulses
 301              		.cfi_endproc
 302              	.LFE23:
 304              		.global	ppm_data_valid
 305              		.global	ppm_last_pulse_time
 306              		.global	ppm_cur_pulse
 307              		.section	.bss.ppm_data_valid,"aw",%nobits
 308              		.set	.LANCHOR3,. + 0
 311              	ppm_data_valid:
 312 0000 00       		.space	1
 313              		.section	.bss.ppm_last_pulse_time,"aw",%nobits
 314              		.align	2
 315              		.set	.LANCHOR0,. + 0
 318              	ppm_last_pulse_time:
 319 0000 00000000 		.space	4
 320              		.section	.bss.timer_rollover_cnt,"aw",%nobits
 321              		.align	2
 322              		.set	.LANCHOR2,. + 0
 325              	timer_rollover_cnt:
 326 0000 00000000 		.space	4
 327              		.section	.bss.ppm_cur_pulse,"aw",%nobits
 328              		.set	.LANCHOR1,. + 0
 331              	ppm_cur_pulse:
 332 0000 00       		.space	1
 333              		.text
 334              	.Letext0:
 335              		.file 2 "/opt/local/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../arm-none-eabi/include/stdint.h"
 336              		.file 3 "../ext/libopencm3/include/libopencm3/cm3/common.h"
 337              		.file 4 "/Users/tony-yi/git/paparazzi_local/sw/include/std.h"
 338              		.file 5 "./paparazzi.h"
 339              		.file 6 "./mcu_periph/sys_time.h"
 340              		.file 7 "./subsystems/radio_control.h"
 341              		.file 8 "../ext/libopencm3/include/libopencm3/stm32/common/timer_common_all.h"
 342              		.file 9 "../ext/libopencm3/include/libopencm3/stm32/f1/timer.h"
 343              		.file 10 "./subsystems/radio_control/ppm.h"
 344              		.file 11 "../ext/libopencm3/include/libopencm3/stm32/f1/rcc.h"
 345              		.file 12 "/Users/tony-yi/git/paparazzi_local/sw/airborne/arch/stm32/mcu_periph/gpio_arch.h"
 346              		.file 13 "../ext/libopencm3/include/libopencm3/cm3/nvic.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ppm_arch.c
/var/tmp//ccOyT1E1.s:19     .text.ppm_arch_init:0000000000000000 $t
/var/tmp//ccOyT1E1.s:24     .text.ppm_arch_init:0000000000000000 ppm_arch_init
/var/tmp//ccOyT1E1.s:139    .text.ppm_arch_init:00000000000000b8 $d
/var/tmp//ccOyT1E1.s:148    .text.tim2_isr:0000000000000000 $t
/var/tmp//ccOyT1E1.s:153    .text.tim2_isr:0000000000000000 tim2_isr
/var/tmp//ccOyT1E1.s:294    .text.tim2_isr:00000000000000a8 $d
/var/tmp//ccOyT1E1.s:311    .bss.ppm_data_valid:0000000000000000 ppm_data_valid
/var/tmp//ccOyT1E1.s:318    .bss.ppm_last_pulse_time:0000000000000000 ppm_last_pulse_time
/var/tmp//ccOyT1E1.s:331    .bss.ppm_cur_pulse:0000000000000000 ppm_cur_pulse
/var/tmp//ccOyT1E1.s:312    .bss.ppm_data_valid:0000000000000000 $d
/var/tmp//ccOyT1E1.s:314    .bss.ppm_last_pulse_time:0000000000000000 $d
/var/tmp//ccOyT1E1.s:321    .bss.timer_rollover_cnt:0000000000000000 $d
/var/tmp//ccOyT1E1.s:325    .bss.timer_rollover_cnt:0000000000000000 timer_rollover_cnt
/var/tmp//ccOyT1E1.s:332    .bss.ppm_cur_pulse:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rcc_peripheral_enable_clock
gpio_enable_clock
gpio_setup_pin_af
timer_reset
timer_set_mode
timer_set_period
timer_set_prescaler
timer_ic_set_polarity
timer_ic_set_input
timer_ic_set_prescaler
timer_ic_set_filter
nvic_set_priority
nvic_enable_irq
timer_enable_irq
timer_ic_enable
timer_enable_counter
timer_clear_flag
timer_get_counter
ppm_frame_available
ppm_pulses
