   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"guidance_v.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.stateGetPositionNed_i,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	stateGetPositionNed_i:
  24              	.LFB53:
  25              		.file 1 "./state.h"
   1:./state.h     **** /*
   2:./state.h     ****  * Copyright (C) 2011-2012 Felix Ruess <felix.ruess@gmail.com>
   3:./state.h     ****  *
   4:./state.h     ****  * This file is part of paparazzi.
   5:./state.h     ****  *
   6:./state.h     ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./state.h     ****  * it under the terms of the GNU General Public License as published by
   8:./state.h     ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./state.h     ****  * any later version.
  10:./state.h     ****  *
  11:./state.h     ****  * paparazzi is distributed in the hope that it will be useful,
  12:./state.h     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./state.h     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./state.h     ****  * GNU General Public License for more details.
  15:./state.h     ****  *
  16:./state.h     ****  * You should have received a copy of the GNU General Public License
  17:./state.h     ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./state.h     ****  * <http://www.gnu.org/licenses/>.
  19:./state.h     ****  */
  20:./state.h     **** 
  21:./state.h     **** /**
  22:./state.h     ****  * @file state.h
  23:./state.h     ****  *
  24:./state.h     ****  * API to get/set the generic vehicle states.
  25:./state.h     ****  *
  26:./state.h     ****  * Also see the @ref state_interface "State Interface" page.
  27:./state.h     ****  *
  28:./state.h     ****  * @author Felix Ruess <felix.ruess@gmail.com>
  29:./state.h     ****  */
  30:./state.h     **** 
  31:./state.h     **** #ifndef STATE_H
  32:./state.h     **** #define STATE_H
  33:./state.h     **** 
  34:./state.h     **** #include "math/pprz_algebra_int.h"
  35:./state.h     **** #include "math/pprz_algebra_float.h"
  36:./state.h     **** #include "math/pprz_geodetic_int.h"
  37:./state.h     **** #include "math/pprz_geodetic_float.h"
  38:./state.h     **** #include "math/pprz_orientation_conversion.h"
  39:./state.h     **** 
  40:./state.h     **** #include "std.h"
  41:./state.h     **** #include <string.h>
  42:./state.h     **** 
  43:./state.h     **** /**
  44:./state.h     ****  * This general state interface holds all the most important vehicle states like
  45:./state.h     ****  * position, velocity, attitude, etc. It handles coordinate system and
  46:./state.h     ****  * fixed-/floating-point conversion on the fly when needed.
  47:./state.h     ****  *
  48:./state.h     ****  * You can set e.g. the position in any coordinate system you wish:
  49:./state.h     ****  * stateSetPositionNed_i() to set the position in fixed-point NED coordinates.
  50:./state.h     ****  * If you need to read the position somewhere else in a different representation,
  51:./state.h     ****  * call: stateGetPositionLla_f() and only then the LLA float position representation
  52:./state.h     ****  * is calculated on the fly and returned. It's also only calculated once,
  53:./state.h     ****  * until a new position is set which invalidates all the other representations again.
  54:./state.h     ****  */
  55:./state.h     **** 
  56:./state.h     **** /**
  57:./state.h     ****  * @defgroup state_interface State interface
  58:./state.h     ****  * @{
  59:./state.h     ****  */
  60:./state.h     **** 
  61:./state.h     **** /**
  62:./state.h     ****  * @defgroup state_position Position representations
  63:./state.h     ****  * @{
  64:./state.h     ****  */
  65:./state.h     **** #define POS_ECEF_I 0
  66:./state.h     **** #define POS_NED_I  1
  67:./state.h     **** #define POS_ENU_I  2
  68:./state.h     **** #define POS_LLA_I  3
  69:./state.h     **** #define POS_UTM_I  4
  70:./state.h     **** #define POS_ECEF_F 5
  71:./state.h     **** #define POS_NED_F  6
  72:./state.h     **** #define POS_ENU_F  7
  73:./state.h     **** #define POS_LLA_F  8
  74:./state.h     **** #define POS_UTM_F  9
  75:./state.h     **** #define POS_LOCAL_COORD ((1<<POS_NED_I)|(1<<POS_NED_F)|(1<<POS_ENU_I)|(1<<POS_ENU_F))
  76:./state.h     **** #define POS_GLOBAL_COORD ((1<<POS_ECEF_I)|(1<<POS_ECEF_F)|(1<<POS_LLA_I)|(1<<POS_LLA_F)|(1<<POS_UTM
  77:./state.h     **** /**@}*/
  78:./state.h     **** 
  79:./state.h     **** /**
  80:./state.h     ****  * @defgroup state_velocity Speed representations
  81:./state.h     ****  * @{
  82:./state.h     ****  */
  83:./state.h     **** #define SPEED_ECEF_I  0
  84:./state.h     **** #define SPEED_NED_I   1
  85:./state.h     **** #define SPEED_ENU_I   2
  86:./state.h     **** #define SPEED_HNORM_I 3
  87:./state.h     **** #define SPEED_HDIR_I  4
  88:./state.h     **** #define SPEED_ECEF_F  5
  89:./state.h     **** #define SPEED_NED_F   6
  90:./state.h     **** #define SPEED_ENU_F   7
  91:./state.h     **** #define SPEED_HNORM_F 8
  92:./state.h     **** #define SPEED_HDIR_F  9
  93:./state.h     **** #define SPEED_LOCAL_COORD ((1<<SPEED_NED_I)|(1<<SPEED_ENU_I)|(1<<SPEED_NED_F)|(1<<SPEED_ENU_F))
  94:./state.h     **** /**@}*/
  95:./state.h     **** 
  96:./state.h     **** /**
  97:./state.h     ****  * @defgroup state_acceleration Acceleration representations
  98:./state.h     ****  * @{
  99:./state.h     ****  */
 100:./state.h     **** #define ACCEL_ECEF_I 0
 101:./state.h     **** #define ACCEL_NED_I  1
 102:./state.h     **** #define ACCEL_ECEF_F 2
 103:./state.h     **** #define ACCEL_NED_F  3
 104:./state.h     **** /**@}*/
 105:./state.h     **** 
 106:./state.h     **** /**
 107:./state.h     ****  * @defgroup state_rate Angular rate representations
 108:./state.h     ****  * @{
 109:./state.h     ****  */
 110:./state.h     **** #define RATE_I 0
 111:./state.h     **** #define RATE_F 1
 112:./state.h     **** /**@}*/
 113:./state.h     **** 
 114:./state.h     **** /**
 115:./state.h     ****  * @defgroup state_wind_airspeed Wind- and airspeed representations
 116:./state.h     ****  * @{
 117:./state.h     ****  */
 118:./state.h     **** #define WINDSPEED_I 0
 119:./state.h     **** #define AIRSPEED_I  1
 120:./state.h     **** #define WINDSPEED_F 2
 121:./state.h     **** #define AIRSPEED_F  3
 122:./state.h     **** #define AOA_F       4
 123:./state.h     **** #define SIDESLIP_F  5
 124:./state.h     **** /**@}*/
 125:./state.h     **** 
 126:./state.h     **** 
 127:./state.h     **** /**
 128:./state.h     ****  * Structure holding vehicle state data.
 129:./state.h     ****  */
 130:./state.h     **** struct State {
 131:./state.h     **** 
 132:./state.h     ****   /** @addtogroup state_position
 133:./state.h     ****    *  @{ */
 134:./state.h     **** 
 135:./state.h     ****   /**
 136:./state.h     ****    * Holds the status bits for all position representations.
 137:./state.h     ****    * When the corresponding bit is set the representation
 138:./state.h     ****    * is already computed.
 139:./state.h     ****    */
 140:./state.h     ****   uint16_t pos_status;
 141:./state.h     **** 
 142:./state.h     ****   /**
 143:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 144:./state.h     ****    * Units: centimeters
 145:./state.h     ****    */
 146:./state.h     ****   struct EcefCoor_i ecef_pos_i;
 147:./state.h     **** 
 148:./state.h     ****   /**
 149:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 150:./state.h     ****    * Units lat,lon: radians*1e7
 151:./state.h     ****    * Units alt: milimeters above reference ellipsoid
 152:./state.h     ****    */
 153:./state.h     ****   struct LlaCoor_i lla_pos_i;
 154:./state.h     **** 
 155:./state.h     ****   /**
 156:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 157:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 158:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 159:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 160:./state.h     ****    * (int version)
 161:./state.h     ****    */
 162:./state.h     ****   struct LtpDef_i ned_origin_i;
 163:./state.h     **** 
 164:./state.h     ****   /**
 165:./state.h     ****    * true if local int coordinate frame is initialsed
 166:./state.h     ****    */
 167:./state.h     ****   bool_t ned_initialized_i;
 168:./state.h     **** 
 169:./state.h     ****   /**
 170:./state.h     ****    * Position in North East Down coordinates.
 171:./state.h     ****    * with respect to ned_origin_i (flat earth)
 172:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 173:./state.h     ****    */
 174:./state.h     ****   struct NedCoor_i ned_pos_i;
 175:./state.h     **** 
 176:./state.h     ****   /**
 177:./state.h     ****    * Position in East North Up coordinates.
 178:./state.h     ****    * with respect to ned_origin_i (flat earth)
 179:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 180:./state.h     ****    */
 181:./state.h     ****   struct EnuCoor_i enu_pos_i;
 182:./state.h     **** 
 183:./state.h     ****   /**
 184:./state.h     ****    * Position in UTM coordinates.
 185:./state.h     ****    * Units x,y: meters.
 186:./state.h     ****    * Units z: meters above MSL
 187:./state.h     ****    */
 188:./state.h     ****   struct UtmCoor_f utm_pos_f;
 189:./state.h     **** 
 190:./state.h     ****   /**
 191:./state.h     ****    * Altitude above ground level.
 192:./state.h     ****    * Unit: meters
 193:./state.h     ****    */
 194:./state.h     ****   float alt_agl_f;
 195:./state.h     **** 
 196:./state.h     ****   /**
 197:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 198:./state.h     ****    * Units lat,lon: radians
 199:./state.h     ****    * Units alt: meters above reference ellipsoid
 200:./state.h     ****    */
 201:./state.h     ****   struct LlaCoor_f lla_pos_f;
 202:./state.h     **** 
 203:./state.h     ****   /**
 204:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 205:./state.h     ****    * Units: meters
 206:./state.h     ****    */
 207:./state.h     ****   struct EcefCoor_f ecef_pos_f;
 208:./state.h     **** 
 209:./state.h     ****   /**
 210:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 211:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 212:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 213:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 214:./state.h     ****    * (float version)
 215:./state.h     ****    */
 216:./state.h     ****   struct LtpDef_f ned_origin_f;
 217:./state.h     **** 
 218:./state.h     ****   /// True if local float coordinate frame is initialsed
 219:./state.h     ****   bool_t ned_initialized_f;
 220:./state.h     **** 
 221:./state.h     ****   /**
 222:./state.h     ****    * Definition of the origin of Utm coordinate system.
 223:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 224:./state.h     ****    * in UTM coordinates, used as a reference when ned_origin is not
 225:./state.h     ****    * initialized.
 226:./state.h     ****    * (float version)
 227:./state.h     ****    */
 228:./state.h     ****   struct UtmCoor_f utm_origin_f;
 229:./state.h     **** 
 230:./state.h     ****   /// True if utm origin (float) coordinate frame is initialsed
 231:./state.h     ****   bool_t utm_initialized_f;
 232:./state.h     **** 
 233:./state.h     ****   /**
 234:./state.h     ****    * Position in North East Down coordinates.
 235:./state.h     ****    * with respect to ned_origin_i (flat earth)
 236:./state.h     ****    * Units: meters
 237:./state.h     ****    */
 238:./state.h     ****   struct NedCoor_f ned_pos_f;
 239:./state.h     **** 
 240:./state.h     ****   /**
 241:./state.h     ****    * Position in East North Up coordinates.
 242:./state.h     ****    * with respect to ned_origin_i (flat earth)
 243:./state.h     ****    * Units: meters
 244:./state.h     ****    */
 245:./state.h     ****   struct EnuCoor_f enu_pos_f;
 246:./state.h     ****   /** @}*/
 247:./state.h     **** 
 248:./state.h     **** 
 249:./state.h     ****   /** @addtogroup state_velocity
 250:./state.h     ****    *  @{ */
 251:./state.h     ****   /**
 252:./state.h     ****    * Holds the status bits for all ground speed representations.
 253:./state.h     ****    * When the corresponding bit is one the representation
 254:./state.h     ****    * is already computed.
 255:./state.h     ****    */
 256:./state.h     ****   uint16_t speed_status;
 257:./state.h     **** 
 258:./state.h     ****   /**
 259:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 260:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 261:./state.h     ****    */
 262:./state.h     ****   struct EcefCoor_i ecef_speed_i;
 263:./state.h     **** 
 264:./state.h     ****   /**
 265:./state.h     ****    * Velocity in North East Down coordinates.
 266:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 267:./state.h     ****    */
 268:./state.h     ****   struct NedCoor_i ned_speed_i;
 269:./state.h     **** 
 270:./state.h     ****   /**
 271:./state.h     ****    * Velocity in East North Up coordinates.
 272:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 273:./state.h     ****    */
 274:./state.h     ****   struct EnuCoor_i enu_speed_i;
 275:./state.h     **** 
 276:./state.h     ****   /**
 277:./state.h     ****    * Norm of horizontal ground speed.
 278:./state.h     ****    * Unit: m/s in BFP with #INT32_SPEED_FRAC
 279:./state.h     ****    */
 280:./state.h     ****   int32_t h_speed_norm_i;
 281:./state.h     **** 
 282:./state.h     ****   /**
 283:./state.h     ****    * Direction of horizontal ground speed.
 284:./state.h     ****    * Unit: rad in BFP with #INT32_ANGLE_FRAC
 285:./state.h     ****    * (clockwise, zero=north)
 286:./state.h     ****    */
 287:./state.h     ****   int32_t h_speed_dir_i;
 288:./state.h     **** 
 289:./state.h     ****   /**
 290:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 291:./state.h     ****    * Units: m/s
 292:./state.h     ****    */
 293:./state.h     ****   struct EcefCoor_f ecef_speed_f;
 294:./state.h     **** 
 295:./state.h     ****   /**
 296:./state.h     ****    * @brief speed in North East Down coordinates
 297:./state.h     ****    * @details Units: m/s */
 298:./state.h     ****   struct NedCoor_f ned_speed_f;
 299:./state.h     **** 
 300:./state.h     ****   /**
 301:./state.h     ****    * Velocity in East North Up coordinates.
 302:./state.h     ****    * Units: m/s
 303:./state.h     ****    */
 304:./state.h     ****   struct EnuCoor_f enu_speed_f;
 305:./state.h     **** 
 306:./state.h     ****   /**
 307:./state.h     ****    * Norm of horizontal ground speed.
 308:./state.h     ****    * Unit: m/s
 309:./state.h     ****    */
 310:./state.h     ****   float h_speed_norm_f;
 311:./state.h     **** 
 312:./state.h     ****   /**
 313:./state.h     ****    * Direction of horizontal ground speed.
 314:./state.h     ****    * Unit: rad (clockwise, zero=north)
 315:./state.h     ****    */
 316:./state.h     ****   float h_speed_dir_f;
 317:./state.h     ****   /** @}*/
 318:./state.h     **** 
 319:./state.h     **** 
 320:./state.h     ****   /** @addtogroup state_acceleration
 321:./state.h     ****    *  @{ */
 322:./state.h     ****   /**
 323:./state.h     ****    * Holds the status bits for all acceleration representations.
 324:./state.h     ****    * When the corresponding bit is one the representation
 325:./state.h     ****    * is already computed.
 326:./state.h     ****    */
 327:./state.h     ****   uint8_t accel_status;
 328:./state.h     **** 
 329:./state.h     ****   /**
 330:./state.h     ****    * Acceleration in North East Down coordinates.
 331:./state.h     ****    * Units: m/s^2 in BFP with #INT32_ACCEL_FRAC
 332:./state.h     ****    */
 333:./state.h     ****   struct NedCoor_i ned_accel_i;
 334:./state.h     **** 
 335:./state.h     ****   /**
 336:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 337:./state.h     ****    * Units: m/s^2 in BFP with INT32_ACCEL_FRAC
 338:./state.h     ****    */
 339:./state.h     ****   struct EcefCoor_i ecef_accel_i;
 340:./state.h     **** 
 341:./state.h     ****   /**
 342:./state.h     ****    * Acceleration in North East Down coordinates.
 343:./state.h     ****    * Units: m/s^2
 344:./state.h     ****    */
 345:./state.h     ****   struct NedCoor_f ned_accel_f;
 346:./state.h     **** 
 347:./state.h     ****   /**
 348:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 349:./state.h     ****    * Units: m/s^2
 350:./state.h     ****    */
 351:./state.h     ****   struct EcefCoor_f ecef_accel_f;
 352:./state.h     ****   /** @}*/
 353:./state.h     **** 
 354:./state.h     **** 
 355:./state.h     ****   /** @defgroup state_attitude Attitude representations
 356:./state.h     ****    */
 357:./state.h     ****   struct OrientationReps ned_to_body_orientation;
 358:./state.h     **** 
 359:./state.h     **** 
 360:./state.h     ****   /** @addtogroup state_rate
 361:./state.h     ****    *  @{ */
 362:./state.h     ****   /**
 363:./state.h     ****    * Holds the status bits for all angular rate representations.
 364:./state.h     ****    * When the corresponding bit is one the representation
 365:./state.h     ****    * is already computed.
 366:./state.h     ****    */
 367:./state.h     ****   uint8_t rate_status;
 368:./state.h     **** 
 369:./state.h     ****   /**
 370:./state.h     ****    * Angular rates in body frame.
 371:./state.h     ****    * Units: rad/s in BFP with #INT32_RATE_FRAC
 372:./state.h     ****    */
 373:./state.h     ****   struct Int32Rates  body_rates_i;
 374:./state.h     **** 
 375:./state.h     ****   /**
 376:./state.h     ****    * Angular rates in body frame.
 377:./state.h     ****    * Units: rad/s
 378:./state.h     ****    */
 379:./state.h     ****   struct FloatRates  body_rates_f;
 380:./state.h     ****   /** @}*/
 381:./state.h     **** 
 382:./state.h     **** 
 383:./state.h     ****   /** @addtogroup state_wind_airspeed
 384:./state.h     ****    *  @{ */
 385:./state.h     ****   /**
 386:./state.h     ****    * Holds the status bits for all wind- and airspeed representations.
 387:./state.h     ****    * When the corresponding bit is one the representation
 388:./state.h     ****    * is already computed.
 389:./state.h     ****    */
 390:./state.h     ****   uint8_t wind_air_status;
 391:./state.h     **** 
 392:./state.h     ****   /**
 393:./state.h     ****    * Horizontal windspeed in north/east.
 394:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 395:./state.h     ****    */
 396:./state.h     ****   struct Int32Vect2 h_windspeed_i;
 397:./state.h     **** 
 398:./state.h     ****   /**
 399:./state.h     ****    * Norm of horizontal ground speed.
 400:./state.h     ****    * @details Unit: m/s in BFP with #INT32_SPEED_FRAC
 401:./state.h     ****    */
 402:./state.h     ****   int32_t airspeed_i;
 403:./state.h     **** 
 404:./state.h     ****   /**
 405:./state.h     ****    * Horizontal windspeed.
 406:./state.h     ****    * Units: m/s with x=north, y=east
 407:./state.h     ****    */
 408:./state.h     ****   struct FloatVect2 h_windspeed_f;
 409:./state.h     **** 
 410:./state.h     ****   /**
 411:./state.h     ****    * Norm of relative air speed.
 412:./state.h     ****    * Unit: m/s
 413:./state.h     ****    */
 414:./state.h     ****   float airspeed_f;
 415:./state.h     **** 
 416:./state.h     ****   /**
 417:./state.h     ****    * Angle of attack
 418:./state.h     ****    * Unit: rad
 419:./state.h     ****    */
 420:./state.h     ****   float angle_of_attack_f;
 421:./state.h     **** 
 422:./state.h     ****   /**
 423:./state.h     ****    * Sideslip angle
 424:./state.h     ****    * Unit: rad
 425:./state.h     ****    */
 426:./state.h     ****   float sideslip_f;
 427:./state.h     **** 
 428:./state.h     ****   /** @}*/
 429:./state.h     **** 
 430:./state.h     **** };
 431:./state.h     **** 
 432:./state.h     **** extern struct State state;
 433:./state.h     **** 
 434:./state.h     **** extern void stateInit(void);
 435:./state.h     **** 
 436:./state.h     **** /** @addtogroup state_position
 437:./state.h     ****  *  @{ */
 438:./state.h     **** 
 439:./state.h     **** /// Set the local (flat earth) coordinate frame origin (int).
 440:./state.h     **** static inline void stateSetLocalOrigin_i(struct LtpDef_i* ltp_def) {
 441:./state.h     ****   memcpy(&state.ned_origin_i, ltp_def, sizeof(struct LtpDef_i));
 442:./state.h     ****   /* convert to float */
 443:./state.h     ****   ECEF_FLOAT_OF_BFP(state.ned_origin_f.ecef, state.ned_origin_i.ecef);
 444:./state.h     ****   LLA_FLOAT_OF_BFP(state.ned_origin_f.lla, state.ned_origin_i.lla);
 445:./state.h     ****   RMAT_FLOAT_OF_BFP(state.ned_origin_f.ltp_of_ecef, state.ned_origin_i.ltp_of_ecef);
 446:./state.h     ****   state.ned_origin_f.hmsl = M_OF_MM(state.ned_origin_i.hmsl);
 447:./state.h     **** 
 448:./state.h     ****   /* clear bits for all local frame representations */
 449:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 450:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 451:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 452:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 453:./state.h     **** 
 454:./state.h     ****   state.ned_initialized_i = TRUE;
 455:./state.h     ****   state.ned_initialized_f = TRUE;
 456:./state.h     **** }
 457:./state.h     **** 
 458:./state.h     **** /// Set the local (flat earth) coordinate frame origin from UTM (float).
 459:./state.h     **** static inline void stateSetLocalUtmOrigin_f(struct UtmCoor_f* utm_def) {
 460:./state.h     ****   memcpy(&state.utm_origin_f, utm_def, sizeof(struct UtmCoor_f));
 461:./state.h     ****   state.utm_initialized_f = TRUE;
 462:./state.h     **** 
 463:./state.h     ****   /* clear bits for all local frame representations */
 464:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 465:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 466:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 467:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 468:./state.h     **** }
 469:./state.h     **** /*******************************************************************************
 470:./state.h     ****  *                                                                             *
 471:./state.h     ****  * Set and Get functions for the POSITION representations                      *
 472:./state.h     ****  *                                                                             *
 473:./state.h     ****  ******************************************************************************/
 474:./state.h     **** 
 475:./state.h     **** /************* declaration of transformation functions ************/
 476:./state.h     **** extern void stateCalcPositionEcef_i(void);
 477:./state.h     **** extern void stateCalcPositionNed_i(void);
 478:./state.h     **** extern void stateCalcPositionEnu_i(void);
 479:./state.h     **** extern void stateCalcPositionLla_i(void);
 480:./state.h     **** extern void stateCalcPositionUtm_f(void);
 481:./state.h     **** extern void stateCalcPositionEcef_f(void);
 482:./state.h     **** extern void stateCalcPositionNed_f(void);
 483:./state.h     **** extern void stateCalcPositionEnu_f(void);
 484:./state.h     **** extern void stateCalcPositionLla_f(void);
 485:./state.h     **** 
 486:./state.h     **** /*********************** validity test functions ******************/
 487:./state.h     **** 
 488:./state.h     **** /// Test if local coordinates are valid.
 489:./state.h     **** static inline bool_t stateIsLocalCoordinateValid(void) {
 490:./state.h     ****   return ((state.ned_initialized_i || state.utm_initialized_f) && (state.pos_status & (POS_LOCAL_CO
 491:./state.h     **** }
 492:./state.h     **** 
 493:./state.h     **** /// Test if global coordinates are valid.
 494:./state.h     **** static inline bool_t stateIsGlobalCoordinateValid(void) {
 495:./state.h     ****   return ((state.pos_status & (POS_GLOBAL_COORD)) || stateIsLocalCoordinateValid());
 496:./state.h     **** }
 497:./state.h     **** 
 498:./state.h     **** /************************ Set functions ****************************/
 499:./state.h     **** 
 500:./state.h     **** /// Set position from ECEF coordinates (int).
 501:./state.h     **** static inline void stateSetPositionEcef_i(struct EcefCoor_i* ecef_pos) {
 502:./state.h     ****   INT32_VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 503:./state.h     ****   /* clear bits for all position representations and only set the new one */
 504:./state.h     ****   state.pos_status = (1 << POS_ECEF_I);
 505:./state.h     **** }
 506:./state.h     **** 
 507:./state.h     **** /// Set position from local NED coordinates (int).
 508:./state.h     **** static inline void stateSetPositionNed_i(struct NedCoor_i* ned_pos) {
 509:./state.h     ****   INT32_VECT3_COPY(state.ned_pos_i, *ned_pos);
 510:./state.h     ****   /* clear bits for all position representations and only set the new one */
 511:./state.h     ****   state.pos_status = (1 << POS_NED_I);
 512:./state.h     **** }
 513:./state.h     **** 
 514:./state.h     **** /// Set position from local ENU coordinates (int).
 515:./state.h     **** static inline void stateSetPositionEnu_i(struct EnuCoor_i* enu_pos) {
 516:./state.h     ****   INT32_VECT3_COPY(state.enu_pos_i, *enu_pos);
 517:./state.h     ****   /* clear bits for all position representations and only set the new one */
 518:./state.h     ****   state.pos_status = (1 << POS_ENU_I);
 519:./state.h     **** }
 520:./state.h     **** 
 521:./state.h     **** /// Set position from LLA coordinates (int).
 522:./state.h     **** static inline void stateSetPositionLla_i(struct LlaCoor_i* lla_pos) {
 523:./state.h     ****   LLA_COPY(state.lla_pos_i, *lla_pos);
 524:./state.h     ****   /* clear bits for all position representations and only set the new one */
 525:./state.h     ****   state.pos_status = (1 << POS_LLA_I);
 526:./state.h     **** }
 527:./state.h     **** 
 528:./state.h     **** /// Set multiple position coordinates (int).
 529:./state.h     **** static inline void stateSetPosition_i(
 530:./state.h     ****     struct EcefCoor_i* ecef_pos,
 531:./state.h     ****     struct NedCoor_i* ned_pos,
 532:./state.h     ****     struct EnuCoor_i* enu_pos,
 533:./state.h     ****     struct LlaCoor_i* lla_pos) {
 534:./state.h     ****   /* clear all status bit */
 535:./state.h     ****   state.pos_status = 0;
 536:./state.h     ****   if (ecef_pos != NULL) {
 537:./state.h     ****     INT32_VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 538:./state.h     ****     state.pos_status |= (1 << POS_ECEF_I);
 539:./state.h     ****   }
 540:./state.h     ****   if (ned_pos != NULL) {
 541:./state.h     ****     INT32_VECT3_COPY(state.ned_pos_i, *ned_pos);
 542:./state.h     ****     state.pos_status |= (1 << POS_NED_I);
 543:./state.h     ****   }
 544:./state.h     ****   if (enu_pos != NULL) {
 545:./state.h     ****     INT32_VECT3_COPY(state.enu_pos_i, *enu_pos);
 546:./state.h     ****     state.pos_status |= (1 << POS_ENU_I);
 547:./state.h     ****   }
 548:./state.h     ****   if (lla_pos != NULL) {
 549:./state.h     ****     LLA_COPY(state.lla_pos_i, *lla_pos);
 550:./state.h     ****     state.pos_status |= (1 << POS_LLA_I);
 551:./state.h     ****   }
 552:./state.h     **** }
 553:./state.h     **** 
 554:./state.h     **** /// Set position from UTM coordinates (float).
 555:./state.h     **** static inline void stateSetPositionUtm_f(struct UtmCoor_f* utm_pos) {
 556:./state.h     ****   memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 557:./state.h     ****   /* clear bits for all position representations and only set the new one */
 558:./state.h     ****   state.pos_status = (1 << POS_UTM_F);
 559:./state.h     **** }
 560:./state.h     **** 
 561:./state.h     **** /// Set position from ECEF coordinates (float).
 562:./state.h     **** static inline void stateSetPositionEcef_f(struct EcefCoor_f* ecef_pos) {
 563:./state.h     ****   VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 564:./state.h     ****   /* clear bits for all position representations and only set the new one */
 565:./state.h     ****   state.pos_status = (1 << POS_ECEF_F);
 566:./state.h     **** }
 567:./state.h     **** 
 568:./state.h     **** /// Set position from local NED coordinates (float).
 569:./state.h     **** static inline void stateSetPositionNed_f(struct NedCoor_f* ned_pos) {
 570:./state.h     ****   VECT3_COPY(state.ned_pos_f, *ned_pos);
 571:./state.h     ****   /* clear bits for all position representations and only set the new one */
 572:./state.h     ****   state.pos_status = (1 << POS_NED_F);
 573:./state.h     **** }
 574:./state.h     **** 
 575:./state.h     **** /// Set position from local ENU coordinates (float).
 576:./state.h     **** static inline void stateSetPositionEnu_f(struct EnuCoor_f* enu_pos) {
 577:./state.h     ****   VECT3_COPY(state.enu_pos_f, *enu_pos);
 578:./state.h     ****   /* clear bits for all position representations and only set the new one */
 579:./state.h     ****   state.pos_status = (1 << POS_ENU_F);
 580:./state.h     **** }
 581:./state.h     **** 
 582:./state.h     **** /// Set position from LLA coordinates (float).
 583:./state.h     **** static inline void stateSetPositionLla_f(struct LlaCoor_f* lla_pos) {
 584:./state.h     ****   LLA_COPY(state.lla_pos_f, *lla_pos);
 585:./state.h     ****   /* clear bits for all position representations and only set the new one */
 586:./state.h     ****   state.pos_status = (1 << POS_LLA_F);
 587:./state.h     **** }
 588:./state.h     **** 
 589:./state.h     **** /// Set multiple position coordinates (float).
 590:./state.h     **** static inline void stateSetPosition_f(
 591:./state.h     ****     struct EcefCoor_f* ecef_pos,
 592:./state.h     ****     struct NedCoor_f* ned_pos,
 593:./state.h     ****     struct EnuCoor_f* enu_pos,
 594:./state.h     ****     struct LlaCoor_f* lla_pos,
 595:./state.h     ****     struct UtmCoor_f* utm_pos) {
 596:./state.h     ****   /* clear all status bit */
 597:./state.h     ****   state.pos_status = 0;
 598:./state.h     ****   if (ecef_pos != NULL) {
 599:./state.h     ****     VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 600:./state.h     ****     state.pos_status |= (1 << POS_ECEF_F);
 601:./state.h     ****   }
 602:./state.h     ****   if (ned_pos != NULL) {
 603:./state.h     ****     VECT3_COPY(state.ned_pos_f, *ned_pos);
 604:./state.h     ****     state.pos_status |= (1 << POS_NED_F);
 605:./state.h     ****   }
 606:./state.h     ****   if (enu_pos != NULL) {
 607:./state.h     ****     VECT3_COPY(state.enu_pos_f, *enu_pos);
 608:./state.h     ****     state.pos_status |= (1 << POS_ENU_F);
 609:./state.h     ****   }
 610:./state.h     ****   if (lla_pos != NULL) {
 611:./state.h     ****     LLA_COPY(state.lla_pos_f, *lla_pos);
 612:./state.h     ****     state.pos_status |= (1 << POS_LLA_F);
 613:./state.h     ****   }
 614:./state.h     ****   if (utm_pos != NULL) {
 615:./state.h     ****     memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 616:./state.h     ****     state.pos_status |= (1 << POS_UTM_F);
 617:./state.h     ****   }
 618:./state.h     **** }
 619:./state.h     **** 
 620:./state.h     **** /************************ Get functions ****************************/
 621:./state.h     **** 
 622:./state.h     **** /// Get position in ECEF coordinates (int).
 623:./state.h     **** static inline struct EcefCoor_i* stateGetPositionEcef_i(void) {
 624:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_I))
 625:./state.h     ****     stateCalcPositionEcef_i();
 626:./state.h     ****   return &state.ecef_pos_i;
 627:./state.h     **** }
 628:./state.h     **** 
 629:./state.h     **** /// Get position in local NED coordinates (int).
 630:./state.h     **** static inline struct NedCoor_i* stateGetPositionNed_i(void) {
  26              		.loc 1 630 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 08B5     		push	{r3, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
 631:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_I))
  35              		.loc 1 631 0
  36 0002 044B     		ldr	r3, .L4
  37 0004 1888     		ldrh	r0, [r3, #0]
  38 0006 8307     		lsls	r3, r0, #30
  39 0008 01D4     		bmi	.L2
 632:./state.h     ****     stateCalcPositionNed_i();
  40              		.loc 1 632 0
  41 000a FFF7FEFF 		bl	stateCalcPositionNed_i
  42              	.LVL0:
  43              	.L2:
 633:./state.h     ****   return &state.ned_pos_i;
 634:./state.h     **** }
  44              		.loc 1 634 0
  45 000e 0248     		ldr	r0, .L4+4
  46 0010 08BD     		pop	{r3, pc}
  47              	.L5:
  48 0012 00BF     		.align	2
  49              	.L4:
  50 0014 00000000 		.word	state
  51 0018 60000000 		.word	state+96
  52              		.cfi_endproc
  53              	.LFE53:
  55              		.section	.text.stateGetSpeedNed_i,"ax",%progbits
  56              		.align	1
  57              		.thumb
  58              		.thumb_func
  60              	stateGetSpeedNed_i:
  61              	.LFB69:
 635:./state.h     **** 
 636:./state.h     **** /// Get position in local ENU coordinates (int).
 637:./state.h     **** static inline struct EnuCoor_i* stateGetPositionEnu_i(void) {
 638:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_I))
 639:./state.h     ****     stateCalcPositionEnu_i();
 640:./state.h     ****   return &state.enu_pos_i;
 641:./state.h     **** }
 642:./state.h     **** 
 643:./state.h     **** /// Get position in LLA coordinates (int).
 644:./state.h     **** static inline struct LlaCoor_i* stateGetPositionLla_i(void) {
 645:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_I))
 646:./state.h     ****     stateCalcPositionLla_i();
 647:./state.h     ****   return &state.lla_pos_i;
 648:./state.h     **** }
 649:./state.h     **** 
 650:./state.h     **** /// Get position in UTM coordinates (float).
 651:./state.h     **** static inline struct UtmCoor_f* stateGetPositionUtm_f(void) {
 652:./state.h     ****   if (!bit_is_set(state.pos_status, POS_UTM_F))
 653:./state.h     ****     stateCalcPositionUtm_f();
 654:./state.h     ****   return &state.utm_pos_f;
 655:./state.h     **** }
 656:./state.h     **** 
 657:./state.h     **** /// Get position in ECEF coordinates (float).
 658:./state.h     **** static inline struct EcefCoor_f* stateGetPositionEcef_f(void) {
 659:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_F))
 660:./state.h     ****     stateCalcPositionEcef_f();
 661:./state.h     ****   return &state.ecef_pos_f;
 662:./state.h     **** }
 663:./state.h     **** 
 664:./state.h     **** /// Get position in local NED coordinates (float).
 665:./state.h     **** static inline struct NedCoor_f* stateGetPositionNed_f(void) {
 666:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_F))
 667:./state.h     ****     stateCalcPositionNed_f();
 668:./state.h     ****   return &state.ned_pos_f;
 669:./state.h     **** }
 670:./state.h     **** 
 671:./state.h     **** /// Get position in local ENU coordinates (float).
 672:./state.h     **** static inline struct EnuCoor_f* stateGetPositionEnu_f(void) {
 673:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_F))
 674:./state.h     ****     stateCalcPositionEnu_f();
 675:./state.h     ****   return &state.enu_pos_f;
 676:./state.h     **** }
 677:./state.h     **** 
 678:./state.h     **** /// Get position in LLA coordinates (float).
 679:./state.h     **** static inline struct LlaCoor_f* stateGetPositionLla_f(void) {
 680:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_F))
 681:./state.h     ****     stateCalcPositionLla_f();
 682:./state.h     ****   return &state.lla_pos_f;
 683:./state.h     **** }
 684:./state.h     **** 
 685:./state.h     **** /** @}*/
 686:./state.h     **** 
 687:./state.h     **** 
 688:./state.h     **** 
 689:./state.h     **** /******************************************************************************
 690:./state.h     ****  *                                                                            *
 691:./state.h     ****  * Set and Get functions for the SPEED representations                        *
 692:./state.h     ****  *                                                                            *
 693:./state.h     ****  *****************************************************************************/
 694:./state.h     **** /** @addtogroup state_velocity
 695:./state.h     ****  *  @{ */
 696:./state.h     **** 
 697:./state.h     **** /************* declaration of transformation functions ************/
 698:./state.h     **** extern void stateCalcSpeedNed_i(void);
 699:./state.h     **** extern void stateCalcSpeedEnu_i(void);
 700:./state.h     **** extern void stateCalcSpeedEcef_i(void);
 701:./state.h     **** extern void stateCalcHorizontalSpeedNorm_i(void);
 702:./state.h     **** extern void stateCalcHorizontalSpeedDir_i(void);
 703:./state.h     **** extern void stateCalcSpeedNed_f(void);
 704:./state.h     **** extern void stateCalcSpeedEnu_f(void);
 705:./state.h     **** extern void stateCalcSpeedEcef_f(void);
 706:./state.h     **** extern void stateCalcHorizontalSpeedNorm_f(void);
 707:./state.h     **** extern void stateCalcHorizontalSpeedDir_f(void);
 708:./state.h     **** 
 709:./state.h     **** /************************ Set functions ****************************/
 710:./state.h     **** 
 711:./state.h     **** /// Set ground speed in local NED coordinates (int).
 712:./state.h     **** static inline void stateSetSpeedNed_i(struct NedCoor_i* ned_speed) {
 713:./state.h     ****   INT32_VECT3_COPY(state.ned_speed_i, *ned_speed);
 714:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 715:./state.h     ****   state.speed_status = (1 << SPEED_NED_I);
 716:./state.h     **** }
 717:./state.h     **** 
 718:./state.h     **** /// Set ground speed in local ENU coordinates (int).
 719:./state.h     **** static inline void stateSetSpeedEnu_i(struct EnuCoor_i* enu_speed) {
 720:./state.h     ****   INT32_VECT3_COPY(state.enu_speed_i, *enu_speed);
 721:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 722:./state.h     ****   state.speed_status = (1 << SPEED_ENU_I);
 723:./state.h     **** }
 724:./state.h     **** 
 725:./state.h     **** /// Set ground speed in ECEF coordinates (int).
 726:./state.h     **** static inline void stateSetSpeedEcef_i(struct EcefCoor_i* ecef_speed) {
 727:./state.h     ****   INT32_VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 728:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 729:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_I);
 730:./state.h     **** }
 731:./state.h     **** 
 732:./state.h     **** /// Set multiple speed coordinates (int).
 733:./state.h     **** static inline void stateSetSpeed_i(
 734:./state.h     ****     struct EcefCoor_i* ecef_speed,
 735:./state.h     ****     struct NedCoor_i* ned_speed,
 736:./state.h     ****     struct EnuCoor_i* enu_speed) {
 737:./state.h     ****   /* clear all status bit */
 738:./state.h     ****   state.speed_status = 0;
 739:./state.h     ****   if (ecef_speed != NULL) {
 740:./state.h     ****     INT32_VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 741:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_I);
 742:./state.h     ****   }
 743:./state.h     ****   if (ned_speed != NULL) {
 744:./state.h     ****     INT32_VECT3_COPY(state.ned_speed_i, *ned_speed);
 745:./state.h     ****     state.speed_status |= (1 << SPEED_NED_I);
 746:./state.h     ****   }
 747:./state.h     ****   if (enu_speed != NULL) {
 748:./state.h     ****     INT32_VECT3_COPY(state.enu_speed_i, *enu_speed);
 749:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_I);
 750:./state.h     ****   }
 751:./state.h     **** }
 752:./state.h     **** 
 753:./state.h     **** /// Set ground speed in local NED coordinates (float).
 754:./state.h     **** static inline void stateSetSpeedNed_f(struct NedCoor_f* ned_speed) {
 755:./state.h     ****   VECT3_COPY(state.ned_speed_f, *ned_speed);
 756:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 757:./state.h     ****   state.speed_status = (1 << SPEED_NED_F);
 758:./state.h     **** }
 759:./state.h     **** 
 760:./state.h     **** /// Set ground speed in local ENU coordinates (float).
 761:./state.h     **** static inline void stateSetSpeedEnu_f(struct EnuCoor_f* enu_speed) {
 762:./state.h     ****   VECT3_COPY(state.enu_speed_f, *enu_speed);
 763:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 764:./state.h     ****   state.speed_status = (1 << SPEED_ENU_F);
 765:./state.h     **** }
 766:./state.h     **** 
 767:./state.h     **** /// Set ground speed in ECEF coordinates (float).
 768:./state.h     **** static inline void stateSetSpeedEcef_f(struct EcefCoor_f* ecef_speed) {
 769:./state.h     ****   VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 770:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 771:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_F);
 772:./state.h     **** }
 773:./state.h     **** 
 774:./state.h     **** /// Set multiple speed coordinates (float).
 775:./state.h     **** static inline void stateSetSpeed_f(
 776:./state.h     ****     struct EcefCoor_f* ecef_speed,
 777:./state.h     ****     struct NedCoor_f* ned_speed,
 778:./state.h     ****     struct EnuCoor_f* enu_speed) {
 779:./state.h     ****   /* clear all status bit */
 780:./state.h     ****   state.speed_status = 0;
 781:./state.h     ****   if (ecef_speed != NULL) {
 782:./state.h     ****     VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 783:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_F);
 784:./state.h     ****   }
 785:./state.h     ****   if (ned_speed != NULL) {
 786:./state.h     ****     VECT3_COPY(state.ned_speed_f, *ned_speed);
 787:./state.h     ****     state.speed_status |= (1 << SPEED_NED_F);
 788:./state.h     ****   }
 789:./state.h     ****   if (enu_speed != NULL) {
 790:./state.h     ****     VECT3_COPY(state.enu_speed_f, *enu_speed);
 791:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_F);
 792:./state.h     ****   }
 793:./state.h     **** }
 794:./state.h     **** 
 795:./state.h     **** /************************ Get functions ****************************/
 796:./state.h     **** 
 797:./state.h     **** /// Get ground speed in local NED coordinates (int).
 798:./state.h     **** static inline struct NedCoor_i* stateGetSpeedNed_i(void) {
  62              		.loc 1 798 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66 0000 08B5     		push	{r3, lr}
  67              	.LCFI1:
  68              		.cfi_def_cfa_offset 8
  69              		.cfi_offset 3, -8
  70              		.cfi_offset 14, -4
 799:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_I))
  71              		.loc 1 799 0
  72 0002 044B     		ldr	r3, .L8
  73 0004 B3F81401 		ldrh	r0, [r3, #276]
  74 0008 8207     		lsls	r2, r0, #30
  75 000a 01D4     		bmi	.L7
 800:./state.h     ****     stateCalcSpeedNed_i();
  76              		.loc 1 800 0
  77 000c FFF7FEFF 		bl	stateCalcSpeedNed_i
  78              	.LVL1:
  79              	.L7:
 801:./state.h     ****   return &state.ned_speed_i;
 802:./state.h     **** }
  80              		.loc 1 802 0
  81 0010 0148     		ldr	r0, .L8+4
  82 0012 08BD     		pop	{r3, pc}
  83              	.L9:
  84              		.align	2
  85              	.L8:
  86 0014 00000000 		.word	state
  87 0018 24010000 		.word	state+292
  88              		.cfi_endproc
  89              	.LFE69:
  91              		.section	.text.stateGetNedToBodyEulers_i,"ax",%progbits
  92              		.align	1
  93              		.thumb
  94              		.thumb_func
  96              	stateGetNedToBodyEulers_i:
  97              	.LFB97:
 803:./state.h     **** 
 804:./state.h     **** /// Get ground speed in local ENU coordinates (int).
 805:./state.h     **** static inline struct EnuCoor_i* stateGetSpeedEnu_i(void) {
 806:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_I))
 807:./state.h     ****     stateCalcSpeedEnu_i();
 808:./state.h     ****   return &state.enu_speed_i;
 809:./state.h     **** }
 810:./state.h     **** 
 811:./state.h     **** /// Get ground speed in ECEF coordinates (int).
 812:./state.h     **** static inline struct EcefCoor_i* stateGetSpeedEcef_i(void) {
 813:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_I))
 814:./state.h     ****     stateCalcSpeedEcef_i();
 815:./state.h     ****   return &state.ecef_speed_i;
 816:./state.h     **** }
 817:./state.h     **** 
 818:./state.h     **** /// Get norm of horizontal ground speed (int).
 819:./state.h     **** static inline int32_t* stateGetHorizontalSpeedNorm_i(void) {
 820:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_I))
 821:./state.h     ****     stateCalcHorizontalSpeedNorm_i();
 822:./state.h     ****   return &state.h_speed_norm_i;
 823:./state.h     **** }
 824:./state.h     **** 
 825:./state.h     **** /// Get dir of horizontal ground speed (int).
 826:./state.h     **** static inline int32_t* stateGetHorizontalSpeedDir_i(void) {
 827:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_I))
 828:./state.h     ****     stateCalcHorizontalSpeedDir_i();
 829:./state.h     ****   return &state.h_speed_dir_i;
 830:./state.h     **** }
 831:./state.h     **** 
 832:./state.h     **** /// Get ground speed in local NED coordinates (float).
 833:./state.h     **** static inline struct NedCoor_f* stateGetSpeedNed_f(void) {
 834:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_F))
 835:./state.h     ****     stateCalcSpeedNed_f();
 836:./state.h     ****   return &state.ned_speed_f;
 837:./state.h     **** }
 838:./state.h     **** 
 839:./state.h     **** /// Get ground speed in local ENU coordinates (float).
 840:./state.h     **** static inline struct EnuCoor_f* stateGetSpeedEnu_f(void) {
 841:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_F))
 842:./state.h     ****     stateCalcSpeedEnu_f();
 843:./state.h     ****   return &state.enu_speed_f;
 844:./state.h     **** }
 845:./state.h     **** 
 846:./state.h     **** /// Get ground speed in ECEF coordinates (float).
 847:./state.h     **** static inline struct EcefCoor_f* stateGetSpeedEcef_f(void) {
 848:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_F))
 849:./state.h     ****     stateCalcSpeedEcef_f();
 850:./state.h     ****   return &state.ecef_speed_f;
 851:./state.h     **** }
 852:./state.h     **** 
 853:./state.h     **** /// Get norm of horizontal ground speed (float).
 854:./state.h     **** static inline float* stateGetHorizontalSpeedNorm_f(void) {
 855:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_F))
 856:./state.h     ****     stateCalcHorizontalSpeedNorm_f();
 857:./state.h     ****   return &state.h_speed_norm_f;
 858:./state.h     **** }
 859:./state.h     **** 
 860:./state.h     **** /// Get dir of horizontal ground speed (float).
 861:./state.h     **** static inline float* stateGetHorizontalSpeedDir_f(void) {
 862:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_F))
 863:./state.h     ****     stateCalcHorizontalSpeedDir_f();
 864:./state.h     ****   return &state.h_speed_dir_f;
 865:./state.h     **** }
 866:./state.h     **** /** @}*/
 867:./state.h     **** 
 868:./state.h     **** 
 869:./state.h     **** 
 870:./state.h     **** /******************************************************************************
 871:./state.h     ****  *                                                                            *
 872:./state.h     ****  * Set and Get functions for the ACCELERATION representations                 *
 873:./state.h     ****  *                                                                            *
 874:./state.h     ****  *****************************************************************************/
 875:./state.h     **** /** @addtogroup state_acceleration
 876:./state.h     ****  *  @{ */
 877:./state.h     **** 
 878:./state.h     **** /************* declaration of transformation functions ************/
 879:./state.h     **** extern void stateCalcAccelNed_i(void);
 880:./state.h     **** extern void stateCalcAccelEcef_i(void);
 881:./state.h     **** extern void stateCalcAccelNed_f(void);
 882:./state.h     **** extern void stateCalcAccelEcef_f(void);
 883:./state.h     **** 
 884:./state.h     **** /*********************** validity test functions ******************/
 885:./state.h     **** 
 886:./state.h     **** /// Test if accelerations are valid.
 887:./state.h     **** static inline bool_t stateIsAccelValid(void) {
 888:./state.h     ****   return (state.accel_status);
 889:./state.h     **** }
 890:./state.h     **** 
 891:./state.h     **** /************************ Set functions ****************************/
 892:./state.h     **** 
 893:./state.h     **** /// Set acceleration in NED coordinates (int).
 894:./state.h     **** static inline void stateSetAccelNed_i(struct NedCoor_i* ned_accel) {
 895:./state.h     ****   INT32_VECT3_COPY(state.ned_accel_i, *ned_accel);
 896:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 897:./state.h     ****   state.accel_status = (1 << ACCEL_NED_I);
 898:./state.h     **** }
 899:./state.h     **** 
 900:./state.h     **** /// Set acceleration in ECEF coordinates (int).
 901:./state.h     **** static inline void stateSetAccelEcef_i(struct EcefCoor_i* ecef_accel) {
 902:./state.h     ****   INT32_VECT3_COPY(state.ecef_accel_i, *ecef_accel);
 903:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 904:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_I);
 905:./state.h     **** }
 906:./state.h     **** 
 907:./state.h     **** /// Set acceleration in NED coordinates (float).
 908:./state.h     **** static inline void stateSetAccelNed_f(struct NedCoor_f* ned_accel) {
 909:./state.h     ****   VECT3_COPY(state.ned_accel_f, *ned_accel);
 910:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 911:./state.h     ****   state.accel_status = (1 << ACCEL_NED_F);
 912:./state.h     **** }
 913:./state.h     **** 
 914:./state.h     **** /// Set acceleration in ECEF coordinates (float).
 915:./state.h     **** static inline void stateSetAccelEcef_f(struct EcefCoor_f* ecef_accel) {
 916:./state.h     ****   VECT3_COPY(state.ecef_accel_f, *ecef_accel);
 917:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 918:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_F);
 919:./state.h     **** }
 920:./state.h     **** 
 921:./state.h     **** /************************ Get functions ****************************/
 922:./state.h     **** 
 923:./state.h     **** /// Get acceleration in NED coordinates (int).
 924:./state.h     **** static inline struct NedCoor_i* stateGetAccelNed_i(void) {
 925:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_I))
 926:./state.h     ****     stateCalcAccelNed_i();
 927:./state.h     ****   return &state.ned_accel_i;
 928:./state.h     **** }
 929:./state.h     **** 
 930:./state.h     **** /// Get acceleration in ECEF coordinates (int).
 931:./state.h     **** static inline struct EcefCoor_i* stateGetAccelEcef_i(void) {
 932:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_I))
 933:./state.h     ****     stateCalcAccelEcef_i();
 934:./state.h     ****   return &state.ecef_accel_i;
 935:./state.h     **** }
 936:./state.h     **** 
 937:./state.h     **** /// Get acceleration in NED coordinates (float).
 938:./state.h     **** static inline struct NedCoor_f* stateGetAccelNed_f(void) {
 939:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_F))
 940:./state.h     ****     stateCalcAccelNed_f();
 941:./state.h     ****   return &state.ned_accel_f;
 942:./state.h     **** }
 943:./state.h     **** 
 944:./state.h     **** /// Get acceleration in ECEF coordinates (float).
 945:./state.h     **** static inline struct EcefCoor_f* stateGetAccelEcef_f(void) {
 946:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_F))
 947:./state.h     ****     stateCalcAccelEcef_f();
 948:./state.h     ****   return &state.ecef_accel_f;
 949:./state.h     **** }
 950:./state.h     **** /** @}*/
 951:./state.h     **** 
 952:./state.h     **** /******************************************************************************
 953:./state.h     **** *                                                                             *
 954:./state.h     **** * Set and Get functions for the ATTITUDE representations                      *
 955:./state.h     **** * (Calls the functions in math/pprz_orientation_conversion)                   *
 956:./state.h     **** *                                                                             *
 957:./state.h     **** *****************************************************************************/
 958:./state.h     **** /** @addtogroup state_attitude
 959:./state.h     **** * @{ */
 960:./state.h     **** /*********************** validity test functions ******************/
 961:./state.h     **** 
 962:./state.h     **** /// Test if attitudes are valid.
 963:./state.h     **** static inline bool_t stateIsAttitudeValid(void) {
 964:./state.h     ****   return (orienationCheckValid(&state.ned_to_body_orientation));
 965:./state.h     **** }
 966:./state.h     **** 
 967:./state.h     **** /************************ Set functions ****************************/
 968:./state.h     **** 
 969:./state.h     **** /// Set vehicle body attitude from quaternion (int).
 970:./state.h     **** static inline void stateSetNedToBodyQuat_i(struct Int32Quat* ned_to_body_quat) {
 971:./state.h     ****   orientationSetQuat_i(&state.ned_to_body_orientation,ned_to_body_quat);
 972:./state.h     **** }
 973:./state.h     **** 
 974:./state.h     **** /// Set vehicle body attitude from rotation matrix (int).
 975:./state.h     **** static inline void stateSetNedToBodyRMat_i(struct Int32RMat* ned_to_body_rmat) {
 976:./state.h     ****   orientationSetRMat_i(&state.ned_to_body_orientation,ned_to_body_rmat);
 977:./state.h     **** }
 978:./state.h     **** 
 979:./state.h     **** /// Set vehicle body attitude from euler angles (int).
 980:./state.h     **** static inline void stateSetNedToBodyEulers_i(struct Int32Eulers* ned_to_body_eulers) {
 981:./state.h     ****   orientationSetEulers_i(&state.ned_to_body_orientation,ned_to_body_eulers);
 982:./state.h     **** }
 983:./state.h     **** 
 984:./state.h     **** /// Set vehicle body attitude from quaternion (float).
 985:./state.h     **** static inline void stateSetNedToBodyQuat_f(struct FloatQuat* ned_to_body_quat) {
 986:./state.h     ****   orientationSetQuat_f(&state.ned_to_body_orientation,ned_to_body_quat);
 987:./state.h     **** }
 988:./state.h     **** 
 989:./state.h     **** /// Set vehicle body attitude from rotation matrix (float).
 990:./state.h     **** static inline void stateSetNedToBodyRMat_f(struct FloatRMat* ned_to_body_rmat) {
 991:./state.h     ****   orientationSetRMat_f(&state.ned_to_body_orientation,ned_to_body_rmat);
 992:./state.h     **** }
 993:./state.h     **** 
 994:./state.h     **** /// Set vehicle body attitude from euler angles (float).
 995:./state.h     **** static inline void stateSetNedToBodyEulers_f(struct FloatEulers* ned_to_body_eulers) {
 996:./state.h     ****   orientationSetEulers_f(&state.ned_to_body_orientation,ned_to_body_eulers);
 997:./state.h     **** }
 998:./state.h     **** 
 999:./state.h     **** /************************ Get functions ****************************/
1000:./state.h     **** 
1001:./state.h     **** /// Get vehicle body attitude quaternion (int).
1002:./state.h     **** static inline struct Int32Quat* stateGetNedToBodyQuat_i(void) {
1003:./state.h     ****   return orientationGetQuat_i(&state.ned_to_body_orientation);
1004:./state.h     **** }
1005:./state.h     **** 
1006:./state.h     **** /// Get vehicle body attitude rotation matrix (int).
1007:./state.h     **** static inline struct Int32RMat* stateGetNedToBodyRMat_i(void) {
1008:./state.h     ****   return orientationGetRMat_i(&state.ned_to_body_orientation);
1009:./state.h     **** }
1010:./state.h     **** 
1011:./state.h     **** /// Get vehicle body attitude euler angles (int).
1012:./state.h     **** static inline struct Int32Eulers* stateGetNedToBodyEulers_i(void) {
  98              		.loc 1 1012 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              	.LVL2:
 103 0000 08B5     		push	{r3, lr}
 104              	.LCFI2:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 3, -8
 107              		.cfi_offset 14, -4
 108              	.LBB24:
 109              	.LBB25:
 110              		.file 2 "./math/pprz_orientation_conversion.h"
   1:./math/pprz_orientation_conversion.h **** /*
   2:./math/pprz_orientation_conversion.h ****  * Copyright (C) 2011-2012 The Paparazzi Team
   3:./math/pprz_orientation_conversion.h ****  *
   4:./math/pprz_orientation_conversion.h ****  * This file is part of paparazzi.
   5:./math/pprz_orientation_conversion.h ****  *
   6:./math/pprz_orientation_conversion.h ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./math/pprz_orientation_conversion.h ****  * it under the terms of the GNU General Public License as published by
   8:./math/pprz_orientation_conversion.h ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./math/pprz_orientation_conversion.h ****  * any later version.
  10:./math/pprz_orientation_conversion.h ****  *
  11:./math/pprz_orientation_conversion.h ****  * paparazzi is distributed in the hope that it will be useful,
  12:./math/pprz_orientation_conversion.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./math/pprz_orientation_conversion.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./math/pprz_orientation_conversion.h ****  * GNU General Public License for more details.
  15:./math/pprz_orientation_conversion.h ****  *
  16:./math/pprz_orientation_conversion.h ****  * You should have received a copy of the GNU General Public License
  17:./math/pprz_orientation_conversion.h ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./math/pprz_orientation_conversion.h ****  * <http://www.gnu.org/licenses/>.
  19:./math/pprz_orientation_conversion.h ****  *
  20:./math/pprz_orientation_conversion.h ****  */
  21:./math/pprz_orientation_conversion.h **** 
  22:./math/pprz_orientation_conversion.h **** /**
  23:./math/pprz_orientation_conversion.h ****  * @file math/pprz_orientation_conversion.h
  24:./math/pprz_orientation_conversion.h ****  * Generic orientation representation and conversions.
  25:./math/pprz_orientation_conversion.h ****  *
  26:./math/pprz_orientation_conversion.h ****  * This file contains the functions to automatically convert between
  27:./math/pprz_orientation_conversion.h ****  * the different representations. They should normally not be used
  28:./math/pprz_orientation_conversion.h ****  * directly and instead the stateGet/Set interfaces used.
  29:./math/pprz_orientation_conversion.h ****  * Also see the @ref math_orientation_representation "Generic Orientation Representation" page.
  30:./math/pprz_orientation_conversion.h ****  *
  31:./math/pprz_orientation_conversion.h ****  * @author Felix Ruess <felix.ruess@gmail.com>
  32:./math/pprz_orientation_conversion.h ****  */
  33:./math/pprz_orientation_conversion.h **** 
  34:./math/pprz_orientation_conversion.h **** /**
  35:./math/pprz_orientation_conversion.h ****  * @addtogroup math
  36:./math/pprz_orientation_conversion.h ****  * @{
  37:./math/pprz_orientation_conversion.h ****  */
  38:./math/pprz_orientation_conversion.h **** 
  39:./math/pprz_orientation_conversion.h **** /**
  40:./math/pprz_orientation_conversion.h ****  * This generic orientation representation consists of a struct, containing the 6 orientation
  41:./math/pprz_orientation_conversion.h ****  * representations, and a status variable. The bits in the status variable indicate  which
  42:./math/pprz_orientation_conversion.h ****  * representations of the orientation are up-to-date.
  43:./math/pprz_orientation_conversion.h ****  *
  44:./math/pprz_orientation_conversion.h ****  * When a getter is used to get a certain representation, the status bit is checked to see if
  45:./math/pprz_orientation_conversion.h ****  * the current value is already available in the desired orientation representation.
  46:./math/pprz_orientation_conversion.h ****  * If the desired representation is not available, it will be calculated.
  47:./math/pprz_orientation_conversion.h ****  *
  48:./math/pprz_orientation_conversion.h ****  * When a setter is used to set a representation, all status bits are cleared, and only the
  49:./math/pprz_orientation_conversion.h ****  * status bit for the set representation is set to one.
  50:./math/pprz_orientation_conversion.h ****  */
  51:./math/pprz_orientation_conversion.h **** 
  52:./math/pprz_orientation_conversion.h **** /**
  53:./math/pprz_orientation_conversion.h ****  * @defgroup math_orientation_representation Generic Orientation Representations
  54:./math/pprz_orientation_conversion.h ****  * @{
  55:./math/pprz_orientation_conversion.h ****  */
  56:./math/pprz_orientation_conversion.h **** 
  57:./math/pprz_orientation_conversion.h **** #ifndef PPRZ_ORIENTATION_CONVERSION_H
  58:./math/pprz_orientation_conversion.h **** #define PPRZ_ORIENTATION_CONVERSION_H
  59:./math/pprz_orientation_conversion.h **** 
  60:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_int.h"
  61:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_float.h"
  62:./math/pprz_orientation_conversion.h **** 
  63:./math/pprz_orientation_conversion.h **** #include "std.h"
  64:./math/pprz_orientation_conversion.h **** 
  65:./math/pprz_orientation_conversion.h **** 
  66:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_I  0  ///< Quaternion (BFP int)
  67:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_I 1  ///< zyx Euler (BFP int)
  68:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_I  2  ///< Rotation Matrix (BFP int)
  69:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_F  3  ///< Quaternion (float)
  70:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_F 4  ///< zyx Euler (float)
  71:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_F  5  ///< Rotation Matrix (float)
  72:./math/pprz_orientation_conversion.h **** 
  73:./math/pprz_orientation_conversion.h **** /*
  74:./math/pprz_orientation_conversion.h ****  * @brief Struct with euler/rmat/quaternion orientation representations in BFP int and float
  75:./math/pprz_orientation_conversion.h ****  */
  76:./math/pprz_orientation_conversion.h **** struct OrientationReps {
  77:./math/pprz_orientation_conversion.h ****   /**
  78:./math/pprz_orientation_conversion.h ****    * Holds the status bits for all orientation representations.
  79:./math/pprz_orientation_conversion.h ****    * When the corresponding bit is set, the representation
  80:./math/pprz_orientation_conversion.h ****    * is already computed.
  81:./math/pprz_orientation_conversion.h ****    */
  82:./math/pprz_orientation_conversion.h ****   uint8_t status;
  83:./math/pprz_orientation_conversion.h **** 
  84:./math/pprz_orientation_conversion.h ****   /**
  85:./math/pprz_orientation_conversion.h ****    * Orientation quaternion.
  86:./math/pprz_orientation_conversion.h ****    * Units: #INT32_QUAT_FRAC
  87:./math/pprz_orientation_conversion.h ****    */
  88:./math/pprz_orientation_conversion.h ****   struct Int32Quat quat_i;
  89:./math/pprz_orientation_conversion.h **** 
  90:./math/pprz_orientation_conversion.h ****   /**
  91:./math/pprz_orientation_conversion.h ****    * Orientation in zyx euler angles.
  92:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_ANGLE_FRAC
  93:./math/pprz_orientation_conversion.h ****    */
  94:./math/pprz_orientation_conversion.h ****   struct Int32Eulers eulers_i;
  95:./math/pprz_orientation_conversion.h **** 
  96:./math/pprz_orientation_conversion.h ****   /**
  97:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
  98:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_TRIG_FRAC
  99:./math/pprz_orientation_conversion.h ****    */
 100:./math/pprz_orientation_conversion.h ****   struct Int32RMat rmat_i;
 101:./math/pprz_orientation_conversion.h **** 
 102:./math/pprz_orientation_conversion.h ****   /**
 103:./math/pprz_orientation_conversion.h ****    * Orientation as quaternion.
 104:./math/pprz_orientation_conversion.h ****    * Units: unit length quaternion
 105:./math/pprz_orientation_conversion.h ****    */
 106:./math/pprz_orientation_conversion.h ****   struct FloatQuat quat_f;
 107:./math/pprz_orientation_conversion.h **** 
 108:./math/pprz_orientation_conversion.h ****   /**
 109:./math/pprz_orientation_conversion.h ****    * Orienation in zyx euler angles.
 110:./math/pprz_orientation_conversion.h ****    * Units: rad
 111:./math/pprz_orientation_conversion.h ****    */
 112:./math/pprz_orientation_conversion.h ****   struct FloatEulers eulers_f;
 113:./math/pprz_orientation_conversion.h **** 
 114:./math/pprz_orientation_conversion.h ****   /**
 115:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
 116:./math/pprz_orientation_conversion.h ****    * Units: rad
 117:./math/pprz_orientation_conversion.h ****    */
 118:./math/pprz_orientation_conversion.h ****   struct FloatRMat   rmat_f;
 119:./math/pprz_orientation_conversion.h **** };
 120:./math/pprz_orientation_conversion.h **** 
 121:./math/pprz_orientation_conversion.h **** /************* declaration of transformation functions ************/
 122:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_i(struct OrientationReps* orientation);
 123:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_i(struct OrientationReps* orientation);
 124:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_i(struct OrientationReps* orientation);
 125:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_f(struct OrientationReps* orientation);
 126:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_f(struct OrientationReps* orientation);
 127:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_f(struct OrientationReps* orientation);
 128:./math/pprz_orientation_conversion.h **** 
 129:./math/pprz_orientation_conversion.h **** 
 130:./math/pprz_orientation_conversion.h **** /*********************** validity test functions ******************/
 131:./math/pprz_orientation_conversion.h **** /// Test if orientations are valid.
 132:./math/pprz_orientation_conversion.h **** static inline bool_t orienationCheckValid(struct OrientationReps* orientation) {
 133:./math/pprz_orientation_conversion.h ****   return (orientation->status);
 134:./math/pprz_orientation_conversion.h **** }
 135:./math/pprz_orientation_conversion.h **** 
 136:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (int).
 137:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_i(struct OrientationReps* orientation, struct Int32Quat* quat
 138:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 139:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 140:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_I);
 141:./math/pprz_orientation_conversion.h **** }
 142:./math/pprz_orientation_conversion.h **** 
 143:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (int).
 144:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_i(struct OrientationReps* orientation, struct Int32RMat* rmat
 145:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_i, *rmat);
 146:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 147:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_I);
 148:./math/pprz_orientation_conversion.h **** }
 149:./math/pprz_orientation_conversion.h **** 
 150:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (int).
 151:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_i(struct OrientationReps* orientation, struct Int32Eulers* 
 152:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_i, *eulers);
 153:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 154:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_I);
 155:./math/pprz_orientation_conversion.h **** }
 156:./math/pprz_orientation_conversion.h **** 
 157:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (float).
 158:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_f(struct OrientationReps* orientation, struct FloatQuat* quat
 159:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_f, *quat);
 160:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 161:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_F);
 162:./math/pprz_orientation_conversion.h **** }
 163:./math/pprz_orientation_conversion.h **** 
 164:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (float).
 165:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_f(struct OrientationReps* orientation, struct FloatRMat* rmat
 166:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_f, *rmat);
 167:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 168:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_F);
 169:./math/pprz_orientation_conversion.h **** }
 170:./math/pprz_orientation_conversion.h **** 
 171:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (float).
 172:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_f(struct OrientationReps* orientation, struct FloatEulers* 
 173:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_f, *eulers);
 174:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 175:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_F);
 176:./math/pprz_orientation_conversion.h **** }
 177:./math/pprz_orientation_conversion.h **** 
 178:./math/pprz_orientation_conversion.h **** 
 179:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude quaternion (int).
 180:./math/pprz_orientation_conversion.h **** static inline struct Int32Quat* orientationGetQuat_i(struct OrientationReps* orientation) {
 181:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_I))
 182:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_i(orientation);
 183:./math/pprz_orientation_conversion.h ****   return &orientation->quat_i;
 184:./math/pprz_orientation_conversion.h **** }
 185:./math/pprz_orientation_conversion.h **** 
 186:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude rotation matrix (int).
 187:./math/pprz_orientation_conversion.h **** static inline struct Int32RMat* orientationGetRMat_i(struct OrientationReps* orientation) {
 188:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_RMAT_I))
 189:./math/pprz_orientation_conversion.h ****     orientationCalcRMat_i(orientation);
 190:./math/pprz_orientation_conversion.h ****   return &orientation->rmat_i;
 191:./math/pprz_orientation_conversion.h **** }
 192:./math/pprz_orientation_conversion.h **** 
 193:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude euler angles (int).
 194:./math/pprz_orientation_conversion.h **** static inline struct Int32Eulers* orientationGetEulers_i(struct OrientationReps* orientation) {
 195:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_I))
 111              		.loc 2 195 0
 112 0002 0548     		ldr	r0, .L12
 113 0004 90F8A431 		ldrb	r3, [r0, #420]	@ zero_extendqisi2
 114 0008 9907     		lsls	r1, r3, #30
 115 000a 03D4     		bmi	.L11
 196:./math/pprz_orientation_conversion.h ****     orientationCalcEulers_i(orientation);
 116              		.loc 2 196 0
 117 000c 00F5D270 		add	r0, r0, #420
 118 0010 FFF7FEFF 		bl	orientationCalcEulers_i
 119              	.LVL3:
 120              	.L11:
 121              	.LBE25:
 122              	.LBE24:
1013:./state.h     ****   return orientationGetEulers_i(&state.ned_to_body_orientation);
1014:./state.h     **** }
 123              		.loc 1 1014 0
 124 0014 0148     		ldr	r0, .L12+4
 125 0016 08BD     		pop	{r3, pc}
 126              	.L13:
 127              		.align	2
 128              	.L12:
 129 0018 00000000 		.word	state
 130 001c B8010000 		.word	state+440
 131              		.cfi_endproc
 132              	.LFE97:
 134              		.section	.text.guidance_v_init,"ax",%progbits
 135              		.align	1
 136              		.global	guidance_v_init
 137              		.thumb
 138              		.thumb_func
 140              	guidance_v_init:
 141              	.LFB122:
 142              		.file 3 "firmwares/rotorcraft/guidance/guidance_v.c"
   1:firmwares/rotorcraft/guidance/guidance_v.c **** /*
   2:firmwares/rotorcraft/guidance/guidance_v.c ****  * Copyright (C) 2008-2009 Antoine Drouin <poinix@gmail.com>
   3:firmwares/rotorcraft/guidance/guidance_v.c ****  *
   4:firmwares/rotorcraft/guidance/guidance_v.c ****  * This file is part of paparazzi.
   5:firmwares/rotorcraft/guidance/guidance_v.c ****  *
   6:firmwares/rotorcraft/guidance/guidance_v.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:firmwares/rotorcraft/guidance/guidance_v.c ****  * it under the terms of the GNU General Public License as published by
   8:firmwares/rotorcraft/guidance/guidance_v.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:firmwares/rotorcraft/guidance/guidance_v.c ****  * any later version.
  10:firmwares/rotorcraft/guidance/guidance_v.c ****  *
  11:firmwares/rotorcraft/guidance/guidance_v.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:firmwares/rotorcraft/guidance/guidance_v.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:firmwares/rotorcraft/guidance/guidance_v.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:firmwares/rotorcraft/guidance/guidance_v.c ****  * GNU General Public License for more details.
  15:firmwares/rotorcraft/guidance/guidance_v.c ****  *
  16:firmwares/rotorcraft/guidance/guidance_v.c ****  * You should have received a copy of the GNU General Public License
  17:firmwares/rotorcraft/guidance/guidance_v.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:firmwares/rotorcraft/guidance/guidance_v.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:firmwares/rotorcraft/guidance/guidance_v.c ****  * Boston, MA 02111-1307, USA.
  20:firmwares/rotorcraft/guidance/guidance_v.c ****  */
  21:firmwares/rotorcraft/guidance/guidance_v.c **** 
  22:firmwares/rotorcraft/guidance/guidance_v.c **** /** @file firmwares/rotorcraft/guidance/guidance_v.c
  23:firmwares/rotorcraft/guidance/guidance_v.c ****  *  Vertical guidance for rotorcrafts.
  24:firmwares/rotorcraft/guidance/guidance_v.c ****  *
  25:firmwares/rotorcraft/guidance/guidance_v.c ****  */
  26:firmwares/rotorcraft/guidance/guidance_v.c **** 
  27:firmwares/rotorcraft/guidance/guidance_v.c **** #define GUIDANCE_V_C
  28:firmwares/rotorcraft/guidance/guidance_v.c **** #include "firmwares/rotorcraft/guidance/guidance_v.h"
  29:firmwares/rotorcraft/guidance/guidance_v.c **** 
  30:firmwares/rotorcraft/guidance/guidance_v.c **** 
  31:firmwares/rotorcraft/guidance/guidance_v.c **** #include "subsystems/radio_control.h"
  32:firmwares/rotorcraft/guidance/guidance_v.c **** #include "firmwares/rotorcraft/stabilization.h"
  33:firmwares/rotorcraft/guidance/guidance_v.c **** // #include "booz_fms.h" FIXME
  34:firmwares/rotorcraft/guidance/guidance_v.c **** #include "firmwares/rotorcraft/navigation.h"
  35:firmwares/rotorcraft/guidance/guidance_v.c **** 
  36:firmwares/rotorcraft/guidance/guidance_v.c **** #include "state.h"
  37:firmwares/rotorcraft/guidance/guidance_v.c **** 
  38:firmwares/rotorcraft/guidance/guidance_v.c **** #include "math/pprz_algebra_int.h"
  39:firmwares/rotorcraft/guidance/guidance_v.c **** 
  40:firmwares/rotorcraft/guidance/guidance_v.c **** #include "generated/airframe.h"
  41:firmwares/rotorcraft/guidance/guidance_v.c **** 
  42:firmwares/rotorcraft/guidance/guidance_v.c **** 
  43:firmwares/rotorcraft/guidance/guidance_v.c **** /* warn if some gains are still negative */
  44:firmwares/rotorcraft/guidance/guidance_v.c **** #if (GUIDANCE_V_HOVER_KP < 0) ||                   \
  45:firmwares/rotorcraft/guidance/guidance_v.c ****   (GUIDANCE_V_HOVER_KD < 0)   ||                   \
  46:firmwares/rotorcraft/guidance/guidance_v.c ****   (GUIDANCE_V_HOVER_KI < 0)
  47:firmwares/rotorcraft/guidance/guidance_v.c **** #warning "ALL control gains are now positive!!!"
  48:firmwares/rotorcraft/guidance/guidance_v.c **** #endif
  49:firmwares/rotorcraft/guidance/guidance_v.c **** 
  50:firmwares/rotorcraft/guidance/guidance_v.c **** #if defined GUIDANCE_V_INV_M
  51:firmwares/rotorcraft/guidance/guidance_v.c **** #warning "GUIDANCE_V_INV_M has been removed. If you don't want to use adaptive hover, please define
  52:firmwares/rotorcraft/guidance/guidance_v.c **** #endif
  53:firmwares/rotorcraft/guidance/guidance_v.c **** 
  54:firmwares/rotorcraft/guidance/guidance_v.c **** uint8_t guidance_v_mode;
  55:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_ff_cmd;
  56:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_fb_cmd;
  57:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_delta_t;
  58:firmwares/rotorcraft/guidance/guidance_v.c **** 
  59:firmwares/rotorcraft/guidance/guidance_v.c **** float guidance_v_nominal_throttle;
  60:firmwares/rotorcraft/guidance/guidance_v.c **** 
  61:firmwares/rotorcraft/guidance/guidance_v.c **** 
  62:firmwares/rotorcraft/guidance/guidance_v.c **** /** Direct throttle from radio control.
  63:firmwares/rotorcraft/guidance/guidance_v.c ****  *  range 0:#MAX_PPRZ
  64:firmwares/rotorcraft/guidance/guidance_v.c ****  */
  65:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_rc_delta_t;
  66:firmwares/rotorcraft/guidance/guidance_v.c **** 
  67:firmwares/rotorcraft/guidance/guidance_v.c **** /** Vertical speed setpoint from radio control.
  68:firmwares/rotorcraft/guidance/guidance_v.c ****  *  fixed point representation: Q12.19
  69:firmwares/rotorcraft/guidance/guidance_v.c ****  *  accuracy 0.0000019, range +/-4096
  70:firmwares/rotorcraft/guidance/guidance_v.c ****  */
  71:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_rc_zd_sp;
  72:firmwares/rotorcraft/guidance/guidance_v.c **** 
  73:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_z_sp;
  74:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_zd_sp;
  75:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_z_ref;
  76:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_zd_ref;
  77:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_zdd_ref;
  78:firmwares/rotorcraft/guidance/guidance_v.c **** 
  79:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_kp;
  80:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_kd;
  81:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_ki;
  82:firmwares/rotorcraft/guidance/guidance_v.c **** 
  83:firmwares/rotorcraft/guidance/guidance_v.c **** int32_t guidance_v_z_sum_err;
  84:firmwares/rotorcraft/guidance/guidance_v.c **** 
  85:firmwares/rotorcraft/guidance/guidance_v.c **** 
  86:firmwares/rotorcraft/guidance/guidance_v.c **** #define GuidanceVSetRef(_pos, _speed, _accel) { \
  87:firmwares/rotorcraft/guidance/guidance_v.c ****     gv_set_ref(_pos, _speed, _accel);	     \
  88:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_ref = _pos;		     \
  89:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_zd_ref = _speed;		     \
  90:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_zdd_ref = _accel;		     \
  91:firmwares/rotorcraft/guidance/guidance_v.c ****   }
  92:firmwares/rotorcraft/guidance/guidance_v.c **** 
  93:firmwares/rotorcraft/guidance/guidance_v.c **** 
  94:firmwares/rotorcraft/guidance/guidance_v.c **** __attribute__ ((always_inline)) static inline void run_hover_loop(bool_t in_flight);
  95:firmwares/rotorcraft/guidance/guidance_v.c **** 
  96:firmwares/rotorcraft/guidance/guidance_v.c **** 
  97:firmwares/rotorcraft/guidance/guidance_v.c **** void guidance_v_init(void) {
 143              		.loc 3 97 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
  98:firmwares/rotorcraft/guidance/guidance_v.c **** 
  99:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_mode = GUIDANCE_V_MODE_KILL;
 148              		.loc 3 99 0
 149 0000 0B4A     		ldr	r2, .L15
 150 0002 0023     		movs	r3, #0
 100:firmwares/rotorcraft/guidance/guidance_v.c **** 
 101:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_kp = GUIDANCE_V_HOVER_KP;
 151              		.loc 3 101 0
 152 0004 0B48     		ldr	r0, .L15+4
  99:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_mode = GUIDANCE_V_MODE_KILL;
 153              		.loc 3 99 0
 154 0006 1370     		strb	r3, [r2, #0]
 155              		.loc 3 101 0
 156 0008 8221     		movs	r1, #130
 102:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_kd = GUIDANCE_V_HOVER_KD;
 157              		.loc 3 102 0
 158 000a 0B4A     		ldr	r2, .L15+8
 101:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_kp = GUIDANCE_V_HOVER_KP;
 159              		.loc 3 101 0
 160 000c 0160     		str	r1, [r0, #0]
 161              		.loc 3 102 0
 162 000e 4B21     		movs	r1, #75
 163 0010 1160     		str	r1, [r2, #0]
 103:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ki = GUIDANCE_V_HOVER_KI;
 104:firmwares/rotorcraft/guidance/guidance_v.c **** 
 105:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_sum_err = 0;
 164              		.loc 3 105 0
 165 0012 0A4A     		ldr	r2, .L15+12
 103:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ki = GUIDANCE_V_HOVER_KI;
 166              		.loc 3 103 0
 167 0014 0A49     		ldr	r1, .L15+16
 168              		.loc 3 105 0
 169 0016 1360     		str	r3, [r2, #0]
 103:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ki = GUIDANCE_V_HOVER_KI;
 170              		.loc 3 103 0
 171 0018 1E20     		movs	r0, #30
 172              	.LBB28:
 173              	.LBB29:
 174              		.file 4 "./firmwares/rotorcraft/guidance/guidance_v_adpt.h"
   1:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /*
   2:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * Copyright (C) 2009-2010 The Paparazzi Team
   3:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *
   4:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * This file is part of paparazzi.
   5:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *
   6:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * it under the terms of the GNU General Public License as published by
   8:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * any later version.
  10:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *
  11:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * paparazzi is distributed in the hope that it will be useful,
  12:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * GNU General Public License for more details.
  15:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *
  16:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * You should have received a copy of the GNU General Public License
  17:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * Boston, MA 02111-1307, USA.
  20:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  */
  21:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  22:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /** @file firmwares/rotorcraft/guidance/guidance_v_adpt.h
  23:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  Adaptation bloc of the vertical guidance.
  24:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *
  25:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  This is a dimension one kalman filter estimating
  26:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  the ratio of vertical acceleration over thrust command ( ~ invert of the mass )
  27:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  needed by the invert dynamic model to produce a nominal command
  28:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  */
  29:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  30:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #ifndef GUIDANCE_V_ADPT
  31:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GUIDANCE_V_ADPT
  32:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  33:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #include "paparazzi.h"
  34:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  35:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /** Adapt noise factor.
  36:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  Smaller values will make the filter to adapter faster.
  37:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  Bigger values (slower adaptation) make the filter more robust to external perturbations.
  38:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  Factor should always be >0
  39:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  */
  40:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #ifndef GUIDANCE_V_ADAPT_NOISE_FACTOR
  41:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GUIDANCE_V_ADAPT_NOISE_FACTOR 1.0
  42:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #endif
  43:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  44:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /** Initial estimation.
  45:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  The initial value can be adapted for faster converging time.
  46:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  It is usually recommended to start with a low value (overestimation of the mass),
  47:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  as it is helping for a smooth takeoff.
  48:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  */
  49:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #ifndef GUIDANCE_V_ADAPT_X0
  50:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GUIDANCE_V_ADAPT_X0 0.003
  51:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #endif
  52:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  53:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /** Filter is not fed if accel values are more than +/- MAX_ACCEL.
  54:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  MAX_ACCEL is a positive value in m/s^2
  55:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  */
  56:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #ifndef GUIDANCE_V_ADAPT_MAX_ACCEL
  57:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GUIDANCE_V_ADAPT_MAX_ACCEL 4.0
  58:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #endif
  59:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  60:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /** Filter is not fed if command values are out of a % of 0/MAX_PPRZ.
  61:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  MAX_CMD and MIN_CMD must be between 0 and 1 with MIN_CMD < MAX_CMD
  62:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  */
  63:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #ifndef GUIDANCE_V_ADAPT_MAX_CMD
  64:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GUIDANCE_V_ADAPT_MAX_CMD 0.9
  65:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #endif
  66:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #ifndef GUIDANCE_V_ADAPT_MIN_CMD
  67:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GUIDANCE_V_ADAPT_MIN_CMD 0.1
  68:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #endif
  69:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  70:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /** State of the estimator.
  71:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  fixed point representation with #GV_ADAPT_X_FRAC
  72:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  Q13.18
  73:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  */
  74:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** extern int32_t gv_adapt_X;
  75:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_X_FRAC 24
  76:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  77:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /** Covariance.
  78:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  fixed point representation with #GV_ADAPT_P_FRAC
  79:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *  Q13.18
  80:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  */
  81:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** extern int32_t gv_adapt_P;
  82:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_P_FRAC 18
  83:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  84:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /** Measurement */
  85:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** extern int32_t gv_adapt_Xmeas;
  86:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  87:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  88:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #ifdef GUIDANCE_V_C
  89:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  90:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** int32_t gv_adapt_X;
  91:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** int32_t gv_adapt_P;
  92:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** int32_t gv_adapt_Xmeas;
  93:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  94:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
  95:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /* Initial State and Covariance    */
  96:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_X0_F GUIDANCE_V_ADAPT_X0
  97:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_X0 BFP_OF_REAL(GV_ADAPT_X0_F, GV_ADAPT_X_FRAC)
  98:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_P0_F 0.1
  99:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_P0 BFP_OF_REAL(GV_ADAPT_P0_F, GV_ADAPT_P_FRAC)
 100:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 101:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /* System  noises */
 102:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #ifndef GV_ADAPT_SYS_NOISE_F
 103:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_SYS_NOISE_F 0.00005
 104:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #endif
 105:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_SYS_NOISE  BFP_OF_REAL(GV_ADAPT_SYS_NOISE_F, GV_ADAPT_P_FRAC)
 106:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 107:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /* Measuremement noises */
 108:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_MEAS_NOISE_HOVER_F (50.0*GUIDANCE_V_ADAPT_NOISE_FACTOR)
 109:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_MEAS_NOISE_HOVER BFP_OF_REAL(GV_ADAPT_MEAS_NOISE_HOVER_F, GV_ADAPT_P_FRAC)
 110:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_MEAS_NOISE_OF_ZD (100.0*GUIDANCE_V_ADAPT_NOISE_FACTOR)
 111:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 112:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /* Max accel */
 113:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_MAX_ACCEL ACCEL_BFP_OF_REAL(GUIDANCE_V_ADAPT_MAX_ACCEL)
 114:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 115:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /* Command bounds */
 116:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_MAX_CMD ((int32_t)(GUIDANCE_V_ADAPT_MAX_CMD*MAX_PPRZ))
 117:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_MIN_CMD ((int32_t)(GUIDANCE_V_ADAPT_MIN_CMD*MAX_PPRZ))
 118:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 119:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /* Output bounds.
 120:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * Don't let it climb over a value that would
 121:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * give less than zero throttle and don't let it down to zero.
 122:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * Worst cases:
 123:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *   MIN_ACCEL / MAX_THROTTLE
 124:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *   MAX_ACCEL / MIN_THROTTLE
 125:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * ex:
 126:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *   9.81*2^18/255 = 10084
 127:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  *   9.81*2^18/1 = 2571632
 128:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  */
 129:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** // TODO Check this properly
 130:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_MAX_OUT (BFP_OF_REAL(9.81, GV_ADAPT_X_FRAC))
 131:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define GV_ADAPT_MIN_OUT (BFP_OF_REAL(9.81, GV_ADAPT_X_FRAC) / MAX_PPRZ)
 132:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 133:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 134:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** static inline void gv_adapt_init(void) {
 135:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_X = GV_ADAPT_X0;
 175              		.loc 4 135 0
 176 001a 0A4B     		ldr	r3, .L15+20
 136:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_P = GV_ADAPT_P0;
 177              		.loc 4 136 0
 178 001c 0A4A     		ldr	r2, .L15+24
 179              	.LBE29:
 180              	.LBE28:
 103:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ki = GUIDANCE_V_HOVER_KI;
 181              		.loc 3 103 0
 182 001e 0860     		str	r0, [r1, #0]
 183              	.LBB31:
 184              	.LBB30:
 135:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_X = GV_ADAPT_X0;
 185              		.loc 4 135 0
 186 0020 4CF29B40 		movw	r0, #50331
 187              		.loc 4 136 0
 188 0024 46F26661 		movw	r1, #26214
 135:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_X = GV_ADAPT_X0;
 189              		.loc 4 135 0
 190 0028 1860     		str	r0, [r3, #0]
 191              		.loc 4 136 0
 192 002a 1160     		str	r1, [r2, #0]
 193 002c 7047     		bx	lr
 194              	.L16:
 195 002e 00BF     		.align	2
 196              	.L15:
 197 0030 00000000 		.word	.LANCHOR0
 198 0034 00000000 		.word	.LANCHOR1
 199 0038 00000000 		.word	.LANCHOR2
 200 003c 00000000 		.word	.LANCHOR4
 201 0040 00000000 		.word	.LANCHOR3
 202 0044 00000000 		.word	.LANCHOR5
 203 0048 00000000 		.word	.LANCHOR6
 204              	.LBE30:
 205              	.LBE31:
 206              		.cfi_endproc
 207              	.LFE122:
 209              		.section	.text.guidance_v_read_rc,"ax",%progbits
 210              		.align	1
 211              		.global	guidance_v_read_rc
 212              		.thumb
 213              		.thumb_func
 215              	guidance_v_read_rc:
 216              	.LFB123:
 106:firmwares/rotorcraft/guidance/guidance_v.c **** 
 107:firmwares/rotorcraft/guidance/guidance_v.c **** #ifdef GUIDANCE_V_NOMINAL_HOVER_THROTTLE
 108:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_nominal_throttle = GUIDANCE_V_NOMINAL_HOVER_THROTTLE;
 109:firmwares/rotorcraft/guidance/guidance_v.c **** #endif
 110:firmwares/rotorcraft/guidance/guidance_v.c **** 
 111:firmwares/rotorcraft/guidance/guidance_v.c ****   gv_adapt_init();
 112:firmwares/rotorcraft/guidance/guidance_v.c **** }
 113:firmwares/rotorcraft/guidance/guidance_v.c **** 
 114:firmwares/rotorcraft/guidance/guidance_v.c **** 
 115:firmwares/rotorcraft/guidance/guidance_v.c **** void guidance_v_read_rc(void) {
 217              		.loc 3 115 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 116:firmwares/rotorcraft/guidance/guidance_v.c **** 
 117:firmwares/rotorcraft/guidance/guidance_v.c ****   /* used in RC_DIRECT directly and as saturation in CLIMB and HOVER */
 118:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_rc_delta_t = (int32_t)radio_control.values[RADIO_THROTTLE];
 222              		.loc 3 118 0
 223 0000 0E4B     		ldr	r3, .L22
 224 0002 0F4A     		ldr	r2, .L22+4
 225 0004 B3F90600 		ldrsh	r0, [r3, #6]
 119:firmwares/rotorcraft/guidance/guidance_v.c **** 
 120:firmwares/rotorcraft/guidance/guidance_v.c ****   /* used in RC_CLIMB */
 121:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_rc_zd_sp = ((MAX_PPRZ/2) - (int32_t)radio_control.values[RADIO_THROTTLE]) * GUIDANCE_V
 226              		.loc 3 121 0
 227 0008 0E4B     		ldr	r3, .L22+8
 118:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_rc_delta_t = (int32_t)radio_control.values[RADIO_THROTTLE];
 228              		.loc 3 118 0
 229 000a 1060     		str	r0, [r2, #0]
 230              		.loc 3 121 0
 231 000c 6FF0A202 		mvn	r2, #162
 232 0010 4243     		muls	r2, r0, r2
 122:firmwares/rotorcraft/guidance/guidance_v.c ****   DeadBand(guidance_v_rc_zd_sp, GUIDANCE_V_RC_CLIMB_DEAD_BAND);
 233              		.loc 3 122 0
 234 0012 0D48     		ldr	r0, .L22+12
 121:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_rc_zd_sp = ((MAX_PPRZ/2) - (int32_t)radio_control.values[RADIO_THROTTLE]) * GUIDANCE_V
 235              		.loc 3 121 0
 236 0014 02F53F21 		add	r1, r2, #782336
 237 0018 4031     		adds	r1, r1, #64
 238              		.loc 3 122 0
 239 001a 8142     		cmp	r1, r0
 240 001c 04DD     		ble	.L18
 241              		.loc 3 122 0 is_stmt 0 discriminator 1
 242 001e 02F51722 		add	r2, r2, #618496
 243 0022 02F57462 		add	r2, r2, #3904
 244 0026 07E0     		b	.L21
 245              	.L18:
 246              		.loc 3 122 0 discriminator 2
 247 0028 0848     		ldr	r0, .L22+16
 248 002a 8142     		cmp	r1, r0
 249 002c BABF     		itte	lt
 250 002e 02F56622 		addlt	r2, r2, #942080
 251 0032 02F5A072 		addlt	r2, r2, #320
 252 0036 0022     		movge	r2, #0
 253              	.L21:
 254              		.loc 3 122 0 discriminator 4
 255 0038 1A60     		str	r2, [r3, #0]
 256 003a 7047     		bx	lr
 257              	.L23:
 258              		.align	2
 259              	.L22:
 260 003c 00000000 		.word	radio_control
 261 0040 00000000 		.word	.LANCHOR7
 262 0044 00000000 		.word	.LANCHOR8
 263 0048 00710200 		.word	160000
 264 004c 008FFDFF 		.word	-160000
 265              		.cfi_endproc
 266              	.LFE123:
 268              		.section	.text.guidance_v_mode_changed,"ax",%progbits
 269              		.align	1
 270              		.global	guidance_v_mode_changed
 271              		.thumb
 272              		.thumb_func
 274              	guidance_v_mode_changed:
 275              	.LFB124:
 123:firmwares/rotorcraft/guidance/guidance_v.c **** 
 124:firmwares/rotorcraft/guidance/guidance_v.c **** }
 125:firmwares/rotorcraft/guidance/guidance_v.c **** 
 126:firmwares/rotorcraft/guidance/guidance_v.c **** void guidance_v_mode_changed(uint8_t new_mode) {
 276              		.loc 3 126 0 is_stmt 1
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              	.LVL4:
 281 0000 70B5     		push	{r4, r5, r6, lr}
 282              	.LCFI3:
 283              		.cfi_def_cfa_offset 16
 284              		.cfi_offset 4, -16
 285              		.cfi_offset 5, -12
 286              		.cfi_offset 6, -8
 287              		.cfi_offset 14, -4
 127:firmwares/rotorcraft/guidance/guidance_v.c **** 
 128:firmwares/rotorcraft/guidance/guidance_v.c ****   if (new_mode == guidance_v_mode)
 288              		.loc 3 128 0
 289 0002 214B     		ldr	r3, .L32
 126:firmwares/rotorcraft/guidance/guidance_v.c **** void guidance_v_mode_changed(uint8_t new_mode) {
 290              		.loc 3 126 0
 291 0004 0546     		mov	r5, r0
 292              		.loc 3 128 0
 293 0006 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 294              	.LVL5:
 295 0008 A842     		cmp	r0, r5
 296 000a 3CD0     		beq	.L24
 129:firmwares/rotorcraft/guidance/guidance_v.c ****     return;
 130:firmwares/rotorcraft/guidance/guidance_v.c **** 
 131:firmwares/rotorcraft/guidance/guidance_v.c ****   switch (new_mode) {
 297              		.loc 3 131 0
 298 000c A91E     		subs	r1, r5, #2
 299 000e 0329     		cmp	r1, #3
 300 0010 37D8     		bhi	.L26
 301 0012 DFE801F0 		tbb	[pc, r1]
 302              	.L30:
 303 0016 19       		.byte	(.L27-.L30)/2
 304 0017 19       		.byte	(.L27-.L30)/2
 305 0018 02       		.byte	(.L28-.L30)/2
 306 0019 1C       		.byte	(.L29-.L30)/2
 307              		.align	1
 308              	.L28:
 132:firmwares/rotorcraft/guidance/guidance_v.c ****   case GUIDANCE_V_MODE_HOVER:
 133:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sp = stateGetPositionNed_i()->z; // set current altitude as setpoint
 309              		.loc 3 133 0
 310 001a FFF7FEFF 		bl	stateGetPositionNed_i
 311              	.LVL6:
 312 001e 1B4C     		ldr	r4, .L32+4
 313 0020 8268     		ldr	r2, [r0, #8]
 134:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err = 0;
 314              		.loc 3 134 0
 315 0022 1B4B     		ldr	r3, .L32+8
 133:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sp = stateGetPositionNed_i()->z; // set current altitude as setpoint
 316              		.loc 3 133 0
 317 0024 2260     		str	r2, [r4, #0]
 318              		.loc 3 134 0
 319 0026 0024     		movs	r4, #0
 320 0028 1C60     		str	r4, [r3, #0]
 135:firmwares/rotorcraft/guidance/guidance_v.c ****     GuidanceVSetRef(stateGetPositionNed_i()->z, 0, 0);
 321              		.loc 3 135 0
 322 002a FFF7FEFF 		bl	stateGetPositionNed_i
 323              	.LVL7:
 324 002e 2146     		mov	r1, r4
 325 0030 2246     		mov	r2, r4
 326 0032 8068     		ldr	r0, [r0, #8]
 327 0034 FFF7FEFF 		bl	gv_set_ref
 328              	.LVL8:
 329 0038 FFF7FEFF 		bl	stateGetPositionNed_i
 330              	.LVL9:
 331 003c 1549     		ldr	r1, .L32+12
 332 003e 8068     		ldr	r0, [r0, #8]
 333 0040 154A     		ldr	r2, .L32+16
 334 0042 0860     		str	r0, [r1, #0]
 335 0044 1460     		str	r4, [r2, #0]
 336 0046 1AE0     		b	.L31
 337              	.L27:
 136:firmwares/rotorcraft/guidance/guidance_v.c ****     break;
 137:firmwares/rotorcraft/guidance/guidance_v.c **** 
 138:firmwares/rotorcraft/guidance/guidance_v.c ****   case GUIDANCE_V_MODE_RC_CLIMB:
 139:firmwares/rotorcraft/guidance/guidance_v.c ****   case GUIDANCE_V_MODE_CLIMB:
 140:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_zd_sp = 0;
 338              		.loc 3 140 0
 339 0048 144C     		ldr	r4, .L32+20
 340 004a 0026     		movs	r6, #0
 341 004c 2660     		str	r6, [r4, #0]
 342              	.L29:
 141:firmwares/rotorcraft/guidance/guidance_v.c ****   case GUIDANCE_V_MODE_NAV:
 142:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err = 0;
 343              		.loc 3 142 0
 344 004e 104B     		ldr	r3, .L32+8
 345 0050 0024     		movs	r4, #0
 346 0052 1C60     		str	r4, [r3, #0]
 143:firmwares/rotorcraft/guidance/guidance_v.c ****     GuidanceVSetRef(stateGetPositionNed_i()->z, stateGetSpeedNed_i()->z, 0);
 347              		.loc 3 143 0
 348 0054 FFF7FEFF 		bl	stateGetPositionNed_i
 349              	.LVL10:
 350 0058 8668     		ldr	r6, [r0, #8]
 351 005a FFF7FEFF 		bl	stateGetSpeedNed_i
 352              	.LVL11:
 353 005e 0146     		mov	r1, r0
 354 0060 8968     		ldr	r1, [r1, #8]
 355 0062 2246     		mov	r2, r4
 356 0064 3046     		mov	r0, r6
 357 0066 FFF7FEFF 		bl	gv_set_ref
 358              	.LVL12:
 359 006a FFF7FEFF 		bl	stateGetPositionNed_i
 360              	.LVL13:
 361 006e 094A     		ldr	r2, .L32+12
 362 0070 8068     		ldr	r0, [r0, #8]
 363 0072 1060     		str	r0, [r2, #0]
 364 0074 FFF7FEFF 		bl	stateGetSpeedNed_i
 365              	.LVL14:
 366 0078 074B     		ldr	r3, .L32+16
 367 007a 8168     		ldr	r1, [r0, #8]
 368 007c 1960     		str	r1, [r3, #0]
 369              	.L31:
 370 007e 0848     		ldr	r0, .L32+24
 371 0080 0460     		str	r4, [r0, #0]
 372              	.L26:
 144:firmwares/rotorcraft/guidance/guidance_v.c ****     break;
 145:firmwares/rotorcraft/guidance/guidance_v.c **** 
 146:firmwares/rotorcraft/guidance/guidance_v.c ****   default:
 147:firmwares/rotorcraft/guidance/guidance_v.c ****     break;
 148:firmwares/rotorcraft/guidance/guidance_v.c **** 
 149:firmwares/rotorcraft/guidance/guidance_v.c ****   }
 150:firmwares/rotorcraft/guidance/guidance_v.c **** 
 151:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_mode = new_mode;
 373              		.loc 3 151 0
 374 0082 014A     		ldr	r2, .L32
 375 0084 1570     		strb	r5, [r2, #0]
 376              	.L24:
 377 0086 70BD     		pop	{r4, r5, r6, pc}
 378              	.L33:
 379              		.align	2
 380              	.L32:
 381 0088 00000000 		.word	.LANCHOR0
 382 008c 00000000 		.word	.LANCHOR9
 383 0090 00000000 		.word	.LANCHOR4
 384 0094 00000000 		.word	.LANCHOR10
 385 0098 00000000 		.word	.LANCHOR11
 386 009c 00000000 		.word	.LANCHOR13
 387 00a0 00000000 		.word	.LANCHOR12
 388              		.cfi_endproc
 389              	.LFE124:
 391              		.section	.text.guidance_v_notify_in_flight,"ax",%progbits
 392              		.align	1
 393              		.global	guidance_v_notify_in_flight
 394              		.thumb
 395              		.thumb_func
 397              	guidance_v_notify_in_flight:
 398              	.LFB125:
 152:firmwares/rotorcraft/guidance/guidance_v.c **** 
 153:firmwares/rotorcraft/guidance/guidance_v.c **** }
 154:firmwares/rotorcraft/guidance/guidance_v.c **** 
 155:firmwares/rotorcraft/guidance/guidance_v.c **** void guidance_v_notify_in_flight( bool_t in_flight) {
 399              		.loc 3 155 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403              		@ link register save eliminated.
 404              	.LVL15:
 156:firmwares/rotorcraft/guidance/guidance_v.c ****   if (in_flight) {
 405              		.loc 3 156 0
 406 0000 38B1     		cbz	r0, .L34
 407              	.LBB34:
 408              	.LBB35:
 135:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_X = GV_ADAPT_X0;
 409              		.loc 4 135 0
 410 0002 044B     		ldr	r3, .L39
 411              		.loc 4 136 0
 412 0004 0449     		ldr	r1, .L39+4
 135:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_X = GV_ADAPT_X0;
 413              		.loc 4 135 0
 414 0006 4CF29B42 		movw	r2, #50331
 415              		.loc 4 136 0
 416 000a 46F26660 		movw	r0, #26214
 417              	.LVL16:
 135:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_X = GV_ADAPT_X0;
 418              		.loc 4 135 0
 419 000e 1A60     		str	r2, [r3, #0]
 420              		.loc 4 136 0
 421 0010 0860     		str	r0, [r1, #0]
 422              	.L34:
 423 0012 7047     		bx	lr
 424              	.L40:
 425              		.align	2
 426              	.L39:
 427 0014 00000000 		.word	.LANCHOR5
 428 0018 00000000 		.word	.LANCHOR6
 429              	.LBE35:
 430              	.LBE34:
 431              		.cfi_endproc
 432              	.LFE125:
 434              		.global	__aeabi_i2d
 435              		.global	__aeabi_dcmplt
 436              		.global	__aeabi_dcmpgt
 437              		.global	__aeabi_dadd
 438              		.global	__aeabi_d2iz
 439              		.global	__aeabi_dmul
 440              		.section	.text.guidance_v_run,"ax",%progbits
 441              		.align	1
 442              		.global	guidance_v_run
 443              		.thumb
 444              		.thumb_func
 446              	guidance_v_run:
 447              	.LFB126:
 157:firmwares/rotorcraft/guidance/guidance_v.c ****     gv_adapt_init();
 158:firmwares/rotorcraft/guidance/guidance_v.c ****   }
 159:firmwares/rotorcraft/guidance/guidance_v.c **** }
 160:firmwares/rotorcraft/guidance/guidance_v.c **** 
 161:firmwares/rotorcraft/guidance/guidance_v.c **** 
 162:firmwares/rotorcraft/guidance/guidance_v.c **** void guidance_v_run(bool_t in_flight) {
 448              		.loc 3 162 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              	.LVL17:
 453 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 454              	.LCFI4:
 455              		.cfi_def_cfa_offset 40
 456              		.cfi_offset 3, -40
 457              		.cfi_offset 4, -36
 458              		.cfi_offset 5, -32
 459              		.cfi_offset 6, -28
 460              		.cfi_offset 7, -24
 461              		.cfi_offset 8, -20
 462              		.cfi_offset 9, -16
 463              		.cfi_offset 10, -12
 464              		.cfi_offset 11, -8
 465              		.cfi_offset 14, -4
 163:firmwares/rotorcraft/guidance/guidance_v.c **** 
 164:firmwares/rotorcraft/guidance/guidance_v.c ****   // FIXME... SATURATIONS NOT TAKEN INTO ACCOUNT
 165:firmwares/rotorcraft/guidance/guidance_v.c ****   // AKA SUPERVISION and co
 166:firmwares/rotorcraft/guidance/guidance_v.c ****   if (in_flight) {
 466              		.loc 3 166 0
 467 0004 0646     		mov	r6, r0
 468 0006 0028     		cmp	r0, #0
 469 0008 00F09E80 		beq	.L43
 470              	.LBB60:
 471              	.LBB61:
 925:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_I))
 472              		.loc 1 925 0
 473 000c A84B     		ldr	r3, .L299+32
 474 000e 93F87021 		ldrb	r2, [r3, #368]	@ zero_extendqisi2
 475 0012 1C46     		mov	r4, r3
 476 0014 12F0020F 		tst	r2, #2
 477 0018 01D1     		bne	.L44
 926:./state.h     ****     stateCalcAccelNed_i();
 478              		.loc 1 926 0
 479 001a FFF7FEFF 		bl	stateCalcAccelNed_i
 480              	.LVL18:
 481              	.L44:
 482              	.LBE61:
 483              	.LBE60:
 167:firmwares/rotorcraft/guidance/guidance_v.c ****     gv_adapt_run(stateGetAccelNed_i()->z, stabilization_cmd[COMMAND_THRUST], guidance_v_zd_ref);
 484              		.loc 3 167 0
 485 001e A548     		ldr	r0, .L299+36
 486 0020 A549     		ldr	r1, .L299+40
 487 0022 C768     		ldr	r7, [r0, #12]
 488 0024 D4F87CA1 		ldr	sl, [r4, #380]
 489              	.LBB62:
 490              	.LBB63:
 137:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** }
 138:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 139:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** #define K_FRAC 12
 140:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 141:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** /** Adaptation function.
 142:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * @param zdd_meas        vert accel measurement in m/s^2 with #INT32_ACCEL_FRAC
 143:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * @param thrust_applied  controller input [0 : MAX_PPRZ]
 144:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  * @param zd_ref          vertical speed reference in m/s with #INT32_SPEED_FRAC
 145:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****  */
 146:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** static inline void gv_adapt_run(int32_t zdd_meas, int32_t thrust_applied, int32_t zd_ref) {
 147:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 148:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* Update only if accel and commands are in a valid range */
 149:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* This also ensures we don't divide by zero */
 150:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   if (thrust_applied < GV_ADAPT_MIN_CMD || thrust_applied > GV_ADAPT_MAX_CMD
 491              		.loc 4 150 0
 492 0028 A7F57073 		sub	r3, r7, #960
 493 002c B3F5F05F 		cmp	r3, #7680
 494              	.LBE63:
 495              	.LBE62:
 496              		.loc 3 167 0
 497 0030 D1F80090 		ldr	r9, [r1, #0]
 498              	.LVL19:
 499              	.LBB65:
 500              	.LBB64:
 501              		.loc 4 150 0
 502 0034 00F28880 		bhi	.L43
 151:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****       || zdd_meas < -GV_ADAPT_MAX_ACCEL || zdd_meas > GV_ADAPT_MAX_ACCEL) {
 503              		.loc 4 151 0
 504 0038 5046     		mov	r0, sl
 505 003a FFF7FEFF 		bl	__aeabi_i2d
 506              	.LVL20:
 507 003e 0022     		movs	r2, #0
 508 0040 9E4B     		ldr	r3, .L299+44
 509 0042 0446     		mov	r4, r0
 510 0044 0D46     		mov	r5, r1
 511 0046 FFF7FEFF 		bl	__aeabi_dcmplt
 512              	.LVL21:
 513 004a 0028     		cmp	r0, #0
 514 004c 7CD1     		bne	.L43
 515 004e 2046     		mov	r0, r4
 516 0050 2946     		mov	r1, r5
 517 0052 0022     		movs	r2, #0
 518 0054 9A4B     		ldr	r3, .L299+48
 519 0056 FFF7FEFF 		bl	__aeabi_dcmpgt
 520              	.LVL22:
 521 005a 0028     		cmp	r0, #0
 522 005c 74D1     		bne	.L43
 152:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****     return;
 153:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   }
 154:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 155:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* We don't propagate state, it's constant !       */
 156:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* We propagate our covariance                     */
 157:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_P =  gv_adapt_P + GV_ADAPT_SYS_NOISE;
 523              		.loc 4 157 0
 524 005e 994C     		ldr	r4, .L299+52
 158:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 159:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* Compute our measurement. If zdd_meas is in the range +/-5g, meas is less than 30 bits */
 160:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   const int32_t g_m_zdd = ((int32_t)BFP_OF_REAL(9.81, INT32_ACCEL_FRAC) - zdd_meas)<<(GV_ADAPT_X_FR
 525              		.loc 4 160 0
 526 0060 CAF51C55 		rsb	r5, sl, #9984
 157:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_P =  gv_adapt_P + GV_ADAPT_SYS_NOISE;
 527              		.loc 4 157 0
 528 0064 2068     		ldr	r0, [r4, #0]
 529 0066 FFF7FEFF 		bl	__aeabi_i2d
 530              	.LVL23:
 531 006a 89A3     		adr	r3, .L299
 532 006c D3E90023 		ldrd	r2, [r3]
 533 0070 FFF7FEFF 		bl	__aeabi_dadd
 534              	.LVL24:
 535 0074 FFF7FEFF 		bl	__aeabi_d2iz
 536              	.LVL25:
 537              		.loc 4 160 0
 538 0078 3D35     		adds	r5, r5, #61
 539 007a AA03     		lsls	r2, r5, #14
 540              	.LVL26:
 161:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   if ( g_m_zdd > 0) {
 541              		.loc 4 161 0
 542 007c 002A     		cmp	r2, #0
 543 007e 4FEA6701 		asr	r1, r7, #1
 157:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_P =  gv_adapt_P + GV_ADAPT_SYS_NOISE;
 544              		.loc 4 157 0
 545 0082 8046     		mov	r8, r0
 162:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****     gv_adapt_Xmeas = (g_m_zdd + (thrust_applied>>1)) / thrust_applied;
 546              		.loc 4 162 0
 547 0084 CCBF     		ite	gt
 548 0086 5218     		addgt	r2, r2, r1
 549              	.LVL27:
 163:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   } else {
 164:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****     gv_adapt_Xmeas = (g_m_zdd - (thrust_applied>>1)) / thrust_applied;
 550              		.loc 4 164 0
 551 0088 C1EB0202 		rsble	r2, r1, r2
 552 008c 8E48     		ldr	r0, .L299+56
 553 008e 92FBF7F7 		sdiv	r7, r2, r7
 554              	.LVL28:
 555 0092 0760     		str	r7, [r0, #0]
 165:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   }
 166:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 167:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* Compute a residual */
 168:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   int32_t residual = gv_adapt_Xmeas - gv_adapt_X;
 556              		.loc 4 168 0
 557 0094 8D4B     		ldr	r3, .L299+60
 169:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 170:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* Covariance Error  E = P + R  */
 171:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   int32_t ref = zd_ref >> (INT32_SPEED_FRAC - GV_ADAPT_P_FRAC);
 172:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   if (zd_ref < 0) ref = -ref;
 558              		.loc 4 172 0
 559 0096 B9F1000F 		cmp	r9, #0
 168:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   int32_t residual = gv_adapt_Xmeas - gv_adapt_X;
 560              		.loc 4 168 0
 561 009a 0468     		ldr	r4, [r0, #0]
 171:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   int32_t ref = zd_ref >> (INT32_SPEED_FRAC - GV_ADAPT_P_FRAC);
 562              		.loc 4 171 0
 563 009c 4FEA690B 		asr	fp, r9, #1
 173:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   int32_t E = gv_adapt_P + GV_ADAPT_MEAS_NOISE_HOVER + ref * GV_ADAPT_MEAS_NOISE_OF_ZD;
 564              		.loc 4 173 0
 565 00a0 4046     		mov	r0, r8
 172:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   if (zd_ref < 0) ref = -ref;
 566              		.loc 4 172 0
 567 00a2 B8BF     		it	lt
 568 00a4 CBF1000B 		rsblt	fp, fp, #0
 168:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   int32_t residual = gv_adapt_Xmeas - gv_adapt_X;
 569              		.loc 4 168 0
 570 00a8 1F68     		ldr	r7, [r3, #0]
 571              		.loc 4 173 0
 572 00aa FFF7FEFF 		bl	__aeabi_i2d
 573              	.LVL29:
 574 00ae 0022     		movs	r2, #0
 575 00b0 874B     		ldr	r3, .L299+64
 576 00b2 FFF7FEFF 		bl	__aeabi_dadd
 577              	.LVL30:
 168:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   int32_t residual = gv_adapt_Xmeas - gv_adapt_X;
 578              		.loc 4 168 0
 579 00b6 C7EB040A 		rsb	sl, r7, r4
 580              	.LVL31:
 581              		.loc 4 173 0
 582 00ba 0446     		mov	r4, r0
 583 00bc 5846     		mov	r0, fp
 584 00be 0D46     		mov	r5, r1
 585              	.LVL32:
 586 00c0 FFF7FEFF 		bl	__aeabi_i2d
 587              	.LVL33:
 588 00c4 0022     		movs	r2, #0
 589 00c6 834B     		ldr	r3, .L299+68
 590 00c8 FFF7FEFF 		bl	__aeabi_dmul
 591              	.LVL34:
 592 00cc 0B46     		mov	r3, r1
 593 00ce 0246     		mov	r2, r0
 594 00d0 2946     		mov	r1, r5
 595 00d2 2046     		mov	r0, r4
 596 00d4 FFF7FEFF 		bl	__aeabi_dadd
 597              	.LVL35:
 598 00d8 FFF7FEFF 		bl	__aeabi_d2iz
 599              	.LVL36:
 174:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 175:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* Kalman gain  K = P / (P + R) = P / E  */
 176:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   int32_t K = (gv_adapt_P<<K_FRAC) / E;
 600              		.loc 4 176 0
 601 00dc 4FEA0839 		lsl	r9, r8, #12
 602              	.LVL37:
 603 00e0 99FBF0F9 		sdiv	r9, r9, r0
 604              	.LVL38:
 177:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 178:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* Update Covariance  Pnew = P - K * P   */
 179:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_P = gv_adapt_P - ((K * gv_adapt_P)>>K_FRAC);
 605              		.loc 4 179 0
 606 00e4 08FB09F2 		mul	r2, r8, r9
 607 00e8 A8EB2234 		sub	r4, r8, r2, asr #12
 180:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* Don't let covariance climb over initial value */
 181:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   if (gv_adapt_P > GV_ADAPT_P0) gv_adapt_P = GV_ADAPT_P0;
 608              		.loc 4 181 0
 609 00ec 2046     		mov	r0, r4
 610 00ee FFF7FEFF 		bl	__aeabi_i2d
 611              	.LVL39:
 612 00f2 69A3     		adr	r3, .L299+8
 613 00f4 D3E90023 		ldrd	r2, [r3]
 614 00f8 FFF7FEFF 		bl	__aeabi_dcmpgt
 615              	.LVL40:
 616 00fc 7149     		ldr	r1, .L299+52
 617 00fe 08B9     		cbnz	r0, .L49
 179:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_P = gv_adapt_P - ((K * gv_adapt_P)>>K_FRAC);
 618              		.loc 4 179 0
 619 0100 0C60     		str	r4, [r1, #0]
 620 0102 02E0     		b	.L50
 621              	.L49:
 622              		.loc 4 181 0
 623 0104 46F26660 		movw	r0, #26214
 624 0108 0860     		str	r0, [r1, #0]
 625              	.L50:
 182:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 183:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* Update State */
 184:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_X = gv_adapt_X + (((int64_t)(K * residual))>>K_FRAC);
 626              		.loc 4 184 0
 627 010a 0AFB09F3 		mul	r3, sl, r9
 628 010e 07EB233A 		add	sl, r7, r3, asr #12
 629              	.LVL41:
 185:./firmwares/rotorcraft/guidance/guidance_v_adpt.h **** 
 186:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   /* Again don't let it climb over a value that would
 187:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****    * give less than zero throttle and don't let it down to zero.
 188:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****    */
 189:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   Bound(gv_adapt_X, GV_ADAPT_MIN_OUT, GV_ADAPT_MAX_OUT);
 630              		.loc 4 189 0
 631 0112 5046     		mov	r0, sl
 632 0114 FFF7FEFF 		bl	__aeabi_i2d
 633              	.LVL42:
 634 0118 61A3     		adr	r3, .L299+16
 635 011a D3E90023 		ldrd	r2, [r3]
 636 011e 0446     		mov	r4, r0
 637 0120 0D46     		mov	r5, r1
 638 0122 FFF7FEFF 		bl	__aeabi_dcmpgt
 639              	.LVL43:
 640 0126 694F     		ldr	r7, .L299+60
 641 0128 08B1     		cbz	r0, .L245
 642 012a 6B4A     		ldr	r2, .L299+72
 643 012c 0BE0     		b	.L257
 644              	.L245:
 184:./firmwares/rotorcraft/guidance/guidance_v_adpt.h ****   gv_adapt_X = gv_adapt_X + (((int64_t)(K * residual))>>K_FRAC);
 645              		.loc 4 184 0
 646 012e C7F800A0 		str	sl, [r7, #0]
 647              		.loc 4 189 0
 648 0132 2046     		mov	r0, r4
 649 0134 2946     		mov	r1, r5
 650 0136 5CA3     		adr	r3, .L299+24
 651 0138 D3E90023 		ldrd	r2, [r3]
 652 013c FFF7FEFF 		bl	__aeabi_dcmplt
 653              	.LVL44:
 654 0140 10B1     		cbz	r0, .L43
 655 0142 44F2F822 		movw	r2, #17144
 656              	.L257:
 657 0146 3A60     		str	r2, [r7, #0]
 658              	.LVL45:
 659              	.L43:
 660              	.LBE64:
 661              	.LBE65:
 168:firmwares/rotorcraft/guidance/guidance_v.c ****   }
 169:firmwares/rotorcraft/guidance/guidance_v.c **** 
 170:firmwares/rotorcraft/guidance/guidance_v.c ****   switch (guidance_v_mode) {
 662              		.loc 3 170 0
 663 0148 6449     		ldr	r1, .L299+76
 664 014a 0878     		ldrb	r0, [r1, #0]	@ zero_extendqisi2
 665 014c 431E     		subs	r3, r0, #1
 666 014e 042B     		cmp	r3, #4
 667 0150 00F2F085 		bhi	.L41
 668 0154 DFE813F0 		tbh	[pc, r3, lsl #1]
 669              	.L60:
 670 0158 0500     		.2byte	(.L55-.L60)/2
 671 015a 0C00     		.2byte	(.L56-.L60)/2
 672 015c 7C01     		.2byte	(.L57-.L60)/2
 673 015e 2F02     		.2byte	(.L58-.L60)/2
 674 0160 8703     		.2byte	(.L59-.L60)/2
 675              	.L55:
 171:firmwares/rotorcraft/guidance/guidance_v.c **** 
 172:firmwares/rotorcraft/guidance/guidance_v.c ****   case GUIDANCE_V_MODE_RC_DIRECT:
 173:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sp = stateGetPositionNed_i()->z; // for display only
 676              		.loc 3 173 0
 677 0162 FFF7FEFF 		bl	stateGetPositionNed_i
 678              	.LVL46:
 679 0166 8268     		ldr	r2, [r0, #8]
 680 0168 5D48     		ldr	r0, .L299+80
 174:firmwares/rotorcraft/guidance/guidance_v.c ****     stabilization_cmd[COMMAND_THRUST] = guidance_v_rc_delta_t;
 681              		.loc 3 174 0
 682 016a 5E49     		ldr	r1, .L299+84
 173:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sp = stateGetPositionNed_i()->z; // for display only
 683              		.loc 3 173 0
 684 016c 0260     		str	r2, [r0, #0]
 685 016e 6BE1     		b	.L90
 686              	.L56:
 175:firmwares/rotorcraft/guidance/guidance_v.c ****     break;
 176:firmwares/rotorcraft/guidance/guidance_v.c **** 
 177:firmwares/rotorcraft/guidance/guidance_v.c ****   case GUIDANCE_V_MODE_RC_CLIMB:
 178:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_zd_sp = guidance_v_rc_zd_sp;
 687              		.loc 3 178 0
 688 0170 5D4C     		ldr	r4, .L299+88
 689 0172 5E4F     		ldr	r7, .L299+92
 690 0174 2068     		ldr	r0, [r4, #0]
 691              	.LBB66:
 692              	.LBB67:
 179:firmwares/rotorcraft/guidance/guidance_v.c ****     gv_update_ref_from_zd_sp(guidance_v_zd_sp);
 180:firmwares/rotorcraft/guidance/guidance_v.c ****     run_hover_loop(in_flight);
 181:firmwares/rotorcraft/guidance/guidance_v.c ****     stabilization_cmd[COMMAND_THRUST] = guidance_v_delta_t;
 182:firmwares/rotorcraft/guidance/guidance_v.c ****     break;
 183:firmwares/rotorcraft/guidance/guidance_v.c **** 
 184:firmwares/rotorcraft/guidance/guidance_v.c ****   case GUIDANCE_V_MODE_CLIMB:
 185:firmwares/rotorcraft/guidance/guidance_v.c **** #if USE_FMS
 186:firmwares/rotorcraft/guidance/guidance_v.c ****     if (fms.enabled && fms.input.v_mode == GUIDANCE_V_MODE_CLIMB) {
 187:firmwares/rotorcraft/guidance/guidance_v.c ****       guidance_v_zd_sp = fms.input.v_sp.climb;
 188:firmwares/rotorcraft/guidance/guidance_v.c ****     }
 189:firmwares/rotorcraft/guidance/guidance_v.c **** #endif
 190:firmwares/rotorcraft/guidance/guidance_v.c ****     gv_update_ref_from_zd_sp(guidance_v_zd_sp);
 191:firmwares/rotorcraft/guidance/guidance_v.c ****     run_hover_loop(in_flight);
 192:firmwares/rotorcraft/guidance/guidance_v.c **** #if NO_RC_THRUST_LIMIT
 193:firmwares/rotorcraft/guidance/guidance_v.c ****     stabilization_cmd[COMMAND_THRUST] = guidance_v_delta_t;
 194:firmwares/rotorcraft/guidance/guidance_v.c **** #else
 195:firmwares/rotorcraft/guidance/guidance_v.c ****     // saturate max authority with RC stick
 196:firmwares/rotorcraft/guidance/guidance_v.c ****     stabilization_cmd[COMMAND_THRUST] = Min(guidance_v_rc_delta_t, guidance_v_delta_t);
 197:firmwares/rotorcraft/guidance/guidance_v.c **** #endif
 198:firmwares/rotorcraft/guidance/guidance_v.c ****     break;
 199:firmwares/rotorcraft/guidance/guidance_v.c **** 
 200:firmwares/rotorcraft/guidance/guidance_v.c ****   case GUIDANCE_V_MODE_HOVER:
 201:firmwares/rotorcraft/guidance/guidance_v.c **** #if USE_FMS
 202:firmwares/rotorcraft/guidance/guidance_v.c ****     if (fms.enabled && fms.input.v_mode == GUIDANCE_V_MODE_HOVER)
 203:firmwares/rotorcraft/guidance/guidance_v.c ****       guidance_v_z_sp = fms.input.v_sp.height;
 204:firmwares/rotorcraft/guidance/guidance_v.c **** #endif
 205:firmwares/rotorcraft/guidance/guidance_v.c ****     gv_update_ref_from_z_sp(guidance_v_z_sp);
 206:firmwares/rotorcraft/guidance/guidance_v.c ****     run_hover_loop(in_flight);
 207:firmwares/rotorcraft/guidance/guidance_v.c **** #if NO_RC_THRUST_LIMIT
 208:firmwares/rotorcraft/guidance/guidance_v.c ****     stabilization_cmd[COMMAND_THRUST] = guidance_v_delta_t;
 209:firmwares/rotorcraft/guidance/guidance_v.c **** #else
 210:firmwares/rotorcraft/guidance/guidance_v.c ****     // saturate max authority with RC stick
 211:firmwares/rotorcraft/guidance/guidance_v.c ****     stabilization_cmd[COMMAND_THRUST] = Min(guidance_v_rc_delta_t, guidance_v_delta_t);
 212:firmwares/rotorcraft/guidance/guidance_v.c **** #endif
 213:firmwares/rotorcraft/guidance/guidance_v.c ****     break;
 214:firmwares/rotorcraft/guidance/guidance_v.c **** 
 215:firmwares/rotorcraft/guidance/guidance_v.c ****   case GUIDANCE_V_MODE_NAV:
 216:firmwares/rotorcraft/guidance/guidance_v.c ****     {
 217:firmwares/rotorcraft/guidance/guidance_v.c ****       if (vertical_mode == VERTICAL_MODE_ALT) {
 218:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_z_sp = -nav_flight_altitude;
 219:firmwares/rotorcraft/guidance/guidance_v.c ****         gv_update_ref_from_z_sp(guidance_v_z_sp);
 220:firmwares/rotorcraft/guidance/guidance_v.c ****         run_hover_loop(in_flight);
 221:firmwares/rotorcraft/guidance/guidance_v.c ****       }
 222:firmwares/rotorcraft/guidance/guidance_v.c ****       else if (vertical_mode == VERTICAL_MODE_CLIMB) {
 223:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_zd_sp = -nav_climb;
 224:firmwares/rotorcraft/guidance/guidance_v.c ****         gv_update_ref_from_zd_sp(guidance_v_zd_sp);
 225:firmwares/rotorcraft/guidance/guidance_v.c ****         nav_flight_altitude = -guidance_v_z_sp;
 226:firmwares/rotorcraft/guidance/guidance_v.c ****         run_hover_loop(in_flight);
 227:firmwares/rotorcraft/guidance/guidance_v.c ****       }
 228:firmwares/rotorcraft/guidance/guidance_v.c ****       else if (vertical_mode == VERTICAL_MODE_MANUAL) {
 229:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_z_sp = -nav_flight_altitude; // For display only
 230:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_delta_t = nav_throttle;
 231:firmwares/rotorcraft/guidance/guidance_v.c ****       }
 232:firmwares/rotorcraft/guidance/guidance_v.c **** #if NO_RC_THRUST_LIMIT
 233:firmwares/rotorcraft/guidance/guidance_v.c ****       stabilization_cmd[COMMAND_THRUST] = guidance_v_delta_t;
 234:firmwares/rotorcraft/guidance/guidance_v.c **** #else
 235:firmwares/rotorcraft/guidance/guidance_v.c ****       /* use rc limitation if available */
 236:firmwares/rotorcraft/guidance/guidance_v.c ****       if (radio_control.status == RC_OK)
 237:firmwares/rotorcraft/guidance/guidance_v.c ****         stabilization_cmd[COMMAND_THRUST] = Min(guidance_v_rc_delta_t, guidance_v_delta_t);
 238:firmwares/rotorcraft/guidance/guidance_v.c ****       else
 239:firmwares/rotorcraft/guidance/guidance_v.c ****         stabilization_cmd[COMMAND_THRUST] = guidance_v_delta_t;
 240:firmwares/rotorcraft/guidance/guidance_v.c **** #endif
 241:firmwares/rotorcraft/guidance/guidance_v.c ****       break;
 242:firmwares/rotorcraft/guidance/guidance_v.c ****     }
 243:firmwares/rotorcraft/guidance/guidance_v.c ****   default:
 244:firmwares/rotorcraft/guidance/guidance_v.c ****     break;
 245:firmwares/rotorcraft/guidance/guidance_v.c ****   }
 246:firmwares/rotorcraft/guidance/guidance_v.c **** }
 247:firmwares/rotorcraft/guidance/guidance_v.c **** 
 248:firmwares/rotorcraft/guidance/guidance_v.c **** 
 249:firmwares/rotorcraft/guidance/guidance_v.c **** #define FF_CMD_FRAC 18
 250:firmwares/rotorcraft/guidance/guidance_v.c **** 
 251:firmwares/rotorcraft/guidance/guidance_v.c **** #define MAX_BANK_COEF (BFP_OF_REAL(RadOfDeg(30.),INT32_TRIG_FRAC))
 252:firmwares/rotorcraft/guidance/guidance_v.c **** 
 253:firmwares/rotorcraft/guidance/guidance_v.c **** __attribute__ ((always_inline)) static inline void run_hover_loop(bool_t in_flight) {
 254:firmwares/rotorcraft/guidance/guidance_v.c **** 
 255:firmwares/rotorcraft/guidance/guidance_v.c ****   /* convert our reference to generic representation */
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 257:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_ref = (int32_t)tmp;
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 693              		.loc 3 258 0
 694 0176 DFF84081 		ldr	r8, .L299+40
 695              	.LBE67:
 696              	.LBE66:
 178:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_zd_sp = guidance_v_rc_zd_sp;
 697              		.loc 3 178 0
 698 017a 3860     		str	r0, [r7, #0]
 179:firmwares/rotorcraft/guidance/guidance_v.c ****     gv_update_ref_from_zd_sp(guidance_v_zd_sp);
 699              		.loc 3 179 0
 700 017c FFF7FEFF 		bl	gv_update_ref_from_zd_sp
 701              	.LVL47:
 702              	.LBB71:
 703              	.LBB70:
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 704              		.loc 3 256 0
 705 0180 5B48     		ldr	r0, .L299+96
 706              	.LVL48:
 707              		.loc 3 258 0
 708 0182 5C4F     		ldr	r7, .L299+100
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 709              		.loc 3 256 0
 710 0184 0368     		ldr	r3, [r0, #0]
 711 0186 4568     		ldr	r5, [r0, #4]
 712 0188 990C     		lsrs	r1, r3, #18
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 713              		.loc 3 259 0
 714 018a 5B4B     		ldr	r3, .L299+104
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 715              		.loc 3 256 0
 716 018c 41EA8534 		orr	r4, r1, r5, lsl #14
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 717              		.loc 3 258 0
 718 0190 3868     		ldr	r0, [r7, #0]
 719              	.LVL49:
 720              		.loc 3 259 0
 721 0192 1968     		ldr	r1, [r3, #0]
 257:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_ref = (int32_t)tmp;
 722              		.loc 3 257 0
 723 0194 594A     		ldr	r2, .L299+108
 724              		.loc 3 259 0
 725 0196 5A4F     		ldr	r7, .L299+112
 257:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_ref = (int32_t)tmp;
 726              		.loc 3 257 0
 727 0198 1460     		str	r4, [r2, #0]
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 728              		.loc 3 258 0
 729 019a 8500     		lsls	r5, r0, #2
 730              		.loc 3 259 0
 731 019c 8A00     		lsls	r2, r1, #2
 732 019e 3A60     		str	r2, [r7, #0]
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 733              		.loc 3 258 0
 734 01a0 C8F80050 		str	r5, [r8, #0]
 260:firmwares/rotorcraft/guidance/guidance_v.c ****   /* compute the error to our reference */
 261:firmwares/rotorcraft/guidance/guidance_v.c ****   int32_t err_z  = guidance_v_z_ref - stateGetPositionNed_i()->z;
 735              		.loc 3 261 0
 736 01a4 FFF7FEFF 		bl	stateGetPositionNed_i
 737              	.LVL50:
 738 01a8 8068     		ldr	r0, [r0, #8]
 739 01aa 271A     		subs	r7, r4, r0
 740              	.LVL51:
 262:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(err_z, GUIDANCE_V_MIN_ERR_Z, GUIDANCE_V_MAX_ERR_Z);
 741              		.loc 3 262 0
 742 01ac 3846     		mov	r0, r7
 743 01ae FFF7FEFF 		bl	__aeabi_i2d
 744              	.LVL52:
 745 01b2 0022     		movs	r2, #0
 746 01b4 534B     		ldr	r3, .L299+116
 747 01b6 0446     		mov	r4, r0
 748 01b8 0D46     		mov	r5, r1
 749 01ba FFF7FEFF 		bl	__aeabi_dcmpgt
 750              	.LVL53:
 751 01be 50B9     		cbnz	r0, .L218
 752 01c0 514B     		ldr	r3, .L299+120
 753 01c2 2046     		mov	r0, r4
 754 01c4 2946     		mov	r1, r5
 755 01c6 0022     		movs	r2, #0
 756 01c8 FFF7FEFF 		bl	__aeabi_dcmplt
 757              	.LVL54:
 758 01cc 4F4B     		ldr	r3, .L299+124
 759 01ce 0028     		cmp	r0, #0
 760 01d0 18BF     		it	ne
 761 01d2 1F46     		movne	r7, r3
 762              	.LVL55:
 763 01d4 01E0     		b	.L61
 764              	.LVL56:
 765              	.L218:
 766 01d6 4FF42067 		mov	r7, #2560
 767              	.LVL57:
 768              	.L61:
 263:firmwares/rotorcraft/guidance/guidance_v.c ****   int32_t err_zd = guidance_v_zd_ref - stateGetSpeedNed_i()->z;
 769              		.loc 3 263 0
 770 01da D8F80040 		ldr	r4, [r8, #0]
 771 01de FFF7FEFF 		bl	stateGetSpeedNed_i
 772              	.LVL58:
 773 01e2 8168     		ldr	r1, [r0, #8]
 774 01e4 C1EB0408 		rsb	r8, r1, r4
 775              	.LVL59:
 264:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(err_zd, GUIDANCE_V_MIN_ERR_ZD, GUIDANCE_V_MAX_ERR_ZD);
 776              		.loc 3 264 0
 777 01e8 4046     		mov	r0, r8
 778 01ea FFF7FEFF 		bl	__aeabi_i2d
 779              	.LVL60:
 780 01ee 0022     		movs	r2, #0
 781 01f0 474B     		ldr	r3, .L299+128
 782 01f2 0446     		mov	r4, r0
 783 01f4 0D46     		mov	r5, r1
 784 01f6 FFF7FEFF 		bl	__aeabi_dcmpgt
 785              	.LVL61:
 786 01fa 50B9     		cbnz	r0, .L220
 787 01fc 2046     		mov	r0, r4
 788 01fe 2946     		mov	r1, r5
 789 0200 0022     		movs	r2, #0
 790 0202 444B     		ldr	r3, .L299+132
 791 0204 FFF7FEFF 		bl	__aeabi_dcmplt
 792              	.LVL62:
 793 0208 434C     		ldr	r4, .L299+136
 794 020a 0028     		cmp	r0, #0
 795 020c 08BF     		it	eq
 796 020e 4446     		moveq	r4, r8
 797 0210 01E0     		b	.L62
 798              	.L220:
 799 0212 4FF4A004 		mov	r4, #5242880
 800              	.L62:
 801              	.LVL63:
 802 0216 4148     		ldr	r0, .L299+140
 265:firmwares/rotorcraft/guidance/guidance_v.c **** 
 266:firmwares/rotorcraft/guidance/guidance_v.c ****   if (in_flight) {
 803              		.loc 3 266 0
 804 0218 66B1     		cbz	r6, .L63
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 805              		.loc 3 267 0
 806 021a 0268     		ldr	r2, [r0, #0]
 268:firmwares/rotorcraft/guidance/guidance_v.c ****     Bound(guidance_v_z_sum_err, -GUIDANCE_V_MAX_SUM_ERR, GUIDANCE_V_MAX_SUM_ERR);
 807              		.loc 3 268 0
 808 021c 4049     		ldr	r1, .L299+144
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 809              		.loc 3 267 0
 810 021e BB18     		adds	r3, r7, r2
 811              		.loc 3 268 0
 812 0220 8B42     		cmp	r3, r1
 813 0222 01DD     		ble	.L64
 814 0224 0160     		str	r1, [r0, #0]
 815 0226 06E0     		b	.L65
 816              	.L64:
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 817              		.loc 3 267 0
 818 0228 3E4D     		ldr	r5, .L299+148
 819 022a AB42     		cmp	r3, r5
 820 022c ACBF     		ite	ge
 821 022e 0360     		strge	r3, [r0, #0]
 822 0230 0560     		strlt	r5, [r0, #0]
 823 0232 00E0     		b	.L65
 824              	.L63:
 269:firmwares/rotorcraft/guidance/guidance_v.c ****   }
 270:firmwares/rotorcraft/guidance/guidance_v.c ****   else
 271:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err = 0;
 825              		.loc 3 271 0
 826 0234 0660     		str	r6, [r0, #0]
 827              	.L65:
 828              	.LVL64:
 272:firmwares/rotorcraft/guidance/guidance_v.c **** 
 273:firmwares/rotorcraft/guidance/guidance_v.c ****   /* our nominal command : (g + zdd)*m   */
 274:firmwares/rotorcraft/guidance/guidance_v.c **** #ifdef GUIDANCE_V_NOMINAL_HOVER_THROTTLE
 275:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m = BFP_OF_REAL(9.81/(guidance_v_nominal_throttle*MAX_PPRZ), FF_CMD_FRAC);
 276:firmwares/rotorcraft/guidance/guidance_v.c **** #else
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 278:firmwares/rotorcraft/guidance/guidance_v.c **** #endif
 279:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t g_m_zdd = (int32_t)BFP_OF_REAL(9.81, FF_CMD_FRAC) -
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 829              		.loc 3 280 0
 830 0236 3248     		ldr	r0, .L299+112
 279:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t g_m_zdd = (int32_t)BFP_OF_REAL(9.81, FF_CMD_FRAC) -
 831              		.loc 3 279 0
 832 0238 3B4B     		ldr	r3, .L299+152
 833              		.loc 3 280 0
 834 023a 0268     		ldr	r2, [r0, #0]
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 835              		.loc 3 277 0
 836 023c 2348     		ldr	r0, .L299+60
 837              		.loc 3 280 0
 838 023e 1102     		lsls	r1, r2, #8
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 839              		.loc 3 277 0
 840 0240 0268     		ldr	r2, [r0, #0]
 279:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t g_m_zdd = (int32_t)BFP_OF_REAL(9.81, FF_CMD_FRAC) -
 841              		.loc 3 279 0
 842 0242 5D1A     		subs	r5, r3, r1
 843              	.LVL65:
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 844              		.loc 3 277 0
 845 0244 9111     		asrs	r1, r2, #6
 846              	.LVL66:
 281:firmwares/rotorcraft/guidance/guidance_v.c **** 
 282:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = g_m_zdd / inv_m;
 847              		.loc 3 282 0
 848 0246 95FBF1F3 		sdiv	r3, r5, r1
 849 024a 384D     		ldr	r5, .L299+156
 850              	.LVL67:
 851 024c 2B60     		str	r3, [r5, #0]
 283:firmwares/rotorcraft/guidance/guidance_v.c ****   int32_t cphi,ctheta,cphitheta;
 284:firmwares/rotorcraft/guidance/guidance_v.c ****   struct Int32Eulers* att_euler = stateGetNedToBodyEulers_i();
 852              		.loc 3 284 0
 853 024e FFF7FEFF 		bl	stateGetNedToBodyEulers_i
 854              	.LVL68:
 855              	.LBB68:
 285:firmwares/rotorcraft/guidance/guidance_v.c ****   PPRZ_ITRIG_COS(cphi, att_euler->phi);
 856              		.loc 3 285 0
 857 0252 0268     		ldr	r2, [r0, #0]
 858 0254 02F5C951 		add	r1, r2, #6432
 859 0258 4B1C     		adds	r3, r1, #1
 860              	.LVL69:
 861              	.L67:
 862 025a 43F24325 		movw	r5, #12867
 863 025e AB42     		cmp	r3, r5
 864 0260 03DD     		ble	.L246
 865              	.L68:
 866 0262 A3F5C941 		sub	r1, r3, #25728
 867 0266 CB1F     		subs	r3, r1, #7
 868              	.LVL70:
 869 0268 F7E7     		b	.L67
 870              	.LVL71:
 871              	.L246:
 872 026a 314A     		ldr	r2, .L299+160
 873 026c 9342     		cmp	r3, r2
 874 026e 03DA     		bge	.L293
 875              	.L70:
 876 0270 03F5C943 		add	r3, r3, #25728
 877              	.LVL72:
 878 0274 0733     		adds	r3, r3, #7
 879              	.LVL73:
 880 0276 F8E7     		b	.L246
 881              	.LVL74:
 882              	.L293:
 883 0278 41F62111 		movw	r1, #6433
 884 027c 8B42     		cmp	r3, r1
 885 027e 2D4D     		ldr	r5, .L299+164
 886 0280 5ADD     		ble	.L71
 887 0282 C3F54951 		rsb	r1, r3, #12864
 888 0286 CB1C     		adds	r3, r1, #3
 889              	.LVL75:
 890 0288 63E0     		b	.L72
 891              	.L300:
 892 028a 00BFAFF3 		.align	3
 892      0080
 893              	.L299:
 894 0290 2D431CEB 		.word	3944497965
 895 0294 E2362A40 		.word	1076508386
 896 0298 9A999999 		.word	2576980378
 897 029c 9999D940 		.word	1088002457
 898 02a0 1F85EB51 		.word	1374389535
 899 02a4 B89EA341 		.word	1101242040
 900 02a8 E78C28ED 		.word	3978857703
 901 02ac 0DBED040 		.word	1087421965
 902 02b0 00000000 		.word	state
 903 02b4 00000000 		.word	stabilization_cmd
 904 02b8 00000000 		.word	.LANCHOR11
 905 02bc 0000B0C0 		.word	-1062207488
 906 02c0 0000B040 		.word	1085276160
 907 02c4 00000000 		.word	.LANCHOR6
 908 02c8 00000000 		.word	.LANCHOR14
 909 02cc 00000000 		.word	.LANCHOR5
 910 02d0 00006941 		.word	1097400320
 911 02d4 00005940 		.word	1079574528
 912 02d8 285CCF09 		.word	164584488
 913 02dc 00000000 		.word	.LANCHOR0
 914 02e0 00000000 		.word	.LANCHOR9
 915 02e4 00000000 		.word	.LANCHOR7
 916 02e8 00000000 		.word	.LANCHOR8
 917 02ec 00000000 		.word	.LANCHOR13
 918 02f0 00000000 		.word	gv_z_ref
 919 02f4 00000000 		.word	gv_zd_ref
 920 02f8 00000000 		.word	gv_zdd_ref
 921 02fc 00000000 		.word	.LANCHOR10
 922 0300 00000000 		.word	.LANCHOR12
 923 0304 0000A440 		.word	1084489728
 924 0308 0000A4C0 		.word	-1062993920
 925 030c 00F6FFFF 		.word	-2560
 926 0310 00005441 		.word	1096024064
 927 0314 000054C1 		.word	-1051459584
 928 0318 0000B0FF 		.word	-5242880
 929 031c 00000000 		.word	.LANCHOR4
 930 0320 80841E00 		.word	2000000
 931 0324 807BE1FF 		.word	-2000000
 932 0328 703D2700 		.word	2571632
 933 032c 00000000 		.word	.LANCHOR15
 934 0330 BDCDFFFF 		.word	-12867
 935 0334 00000000 		.word	pprz_trig_int
 936              	.L71:
 937 0338 6FF4C952 		mvn	r2, #6432
 938 033c 9342     		cmp	r3, r2
 939 033e 06DA     		bge	.L73
 940 0340 C3F17F43 		rsb	r3, r3, #-16777216
 941              	.LVL76:
 942 0344 03F57F01 		add	r1, r3, #16711680
 943 0348 01F54D43 		add	r3, r1, #52480
 944 034c BD33     		adds	r3, r3, #189
 945              	.LVL77:
 946              	.L73:
 947 034e 002B     		cmp	r3, #0
 948 0350 02DB     		blt	.L74
 949              	.L72:
 950 0352 35F91320 		ldrsh	r2, [r5, r3, lsl #1]
 951              	.LVL78:
 952 0356 03E0     		b	.L75
 953              	.LVL79:
 954              	.L74:
 955 0358 5A42     		negs	r2, r3
 956 035a 35F91250 		ldrsh	r5, [r5, r2, lsl #1]
 957 035e 6A42     		negs	r2, r5
 958              	.LVL80:
 959              	.L75:
 960              	.LBE68:
 961              	.LBB69:
 286:firmwares/rotorcraft/guidance/guidance_v.c ****   PPRZ_ITRIG_COS(ctheta, att_euler->theta);
 962              		.loc 3 286 0
 963 0360 4068     		ldr	r0, [r0, #4]
 964              	.LVL81:
 965 0362 00F5C953 		add	r3, r0, #6432
 966              	.LVL82:
 967 0366 0133     		adds	r3, r3, #1
 968              	.LVL83:
 969              	.L76:
 970 0368 43F24325 		movw	r5, #12867
 971 036c AB42     		cmp	r3, r5
 972 036e 03DD     		ble	.L247
 973              	.L77:
 974 0370 A3F5C940 		sub	r0, r3, #25728
 975 0374 C31F     		subs	r3, r0, #7
 976              	.LVL84:
 977 0376 F7E7     		b	.L76
 978              	.LVL85:
 979              	.L247:
 980 0378 AB49     		ldr	r1, .L301+8
 981 037a 8B42     		cmp	r3, r1
 982 037c 03DA     		bge	.L294
 983              	.L79:
 984 037e 03F5C945 		add	r5, r3, #25728
 985 0382 EB1D     		adds	r3, r5, #7
 986              	.LVL86:
 987 0384 F8E7     		b	.L247
 988              	.LVL87:
 989              	.L294:
 990 0386 41F62110 		movw	r0, #6433
 991 038a 8342     		cmp	r3, r0
 992 038c A74D     		ldr	r5, .L301+12
 993 038e 03DD     		ble	.L80
 994 0390 C3F54953 		rsb	r3, r3, #12864
 995              	.LVL88:
 996 0394 0333     		adds	r3, r3, #3
 997              	.LVL89:
 998 0396 0CE0     		b	.L81
 999              	.L80:
 1000 0398 6FF4C951 		mvn	r1, #6432
 1001 039c 8B42     		cmp	r3, r1
 1002 039e 06DA     		bge	.L82
 1003 03a0 C3F17F43 		rsb	r3, r3, #-16777216
 1004              	.LVL90:
 1005 03a4 03F57F00 		add	r0, r3, #16711680
 1006 03a8 00F54D43 		add	r3, r0, #52480
 1007 03ac BD33     		adds	r3, r3, #189
 1008              	.LVL91:
 1009              	.L82:
 1010 03ae 002B     		cmp	r3, #0
 1011 03b0 02DB     		blt	.L83
 1012              	.L81:
 1013 03b2 35F91300 		ldrsh	r0, [r5, r3, lsl #1]
 1014              	.LVL92:
 1015 03b6 03E0     		b	.L84
 1016              	.LVL93:
 1017              	.L83:
 1018 03b8 5942     		negs	r1, r3
 1019 03ba 35F91150 		ldrsh	r5, [r5, r1, lsl #1]
 1020 03be 6842     		negs	r0, r5
 1021              	.LVL94:
 1022              	.L84:
 1023              	.LBE69:
 287:firmwares/rotorcraft/guidance/guidance_v.c ****   cphitheta = (cphi * ctheta) >> INT32_TRIG_FRAC;
 1024              		.loc 3 287 0
 1025 03c0 5043     		muls	r0, r2, r0
 1026              	.LVL95:
 1027 03c2 8513     		asrs	r5, r0, #14
 1028              	.LVL96:
 288:firmwares/rotorcraft/guidance/guidance_v.c ****   if (cphitheta < MAX_BANK_COEF) cphitheta = MAX_BANK_COEF;
 1029              		.loc 3 288 0
 1030 03c4 2846     		mov	r0, r5
 1031 03c6 FFF7FEFF 		bl	__aeabi_i2d
 1032              	.LVL97:
 1033 03ca 95A3     		adr	r3, .L301
 1034 03cc D3E90023 		ldrd	r2, [r3]
 1035 03d0 FFF7FEFF 		bl	__aeabi_dcmplt
 1036              	.LVL98:
 289:firmwares/rotorcraft/guidance/guidance_v.c ****   /* feed forward command */
 290:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = (guidance_v_ff_cmd << INT32_TRIG_FRAC) / cphitheta;
 1037              		.loc 3 290 0
 1038 03d4 964B     		ldr	r3, .L301+16
 288:firmwares/rotorcraft/guidance/guidance_v.c ****   if (cphitheta < MAX_BANK_COEF) cphitheta = MAX_BANK_COEF;
 1039              		.loc 3 288 0
 1040 03d6 42F28212 		movw	r2, #8578
 1041              		.loc 3 290 0
 1042 03da 1968     		ldr	r1, [r3, #0]
 288:firmwares/rotorcraft/guidance/guidance_v.c ****   if (cphitheta < MAX_BANK_COEF) cphitheta = MAX_BANK_COEF;
 1043              		.loc 3 288 0
 1044 03dc 0028     		cmp	r0, #0
 1045 03de 0CBF     		ite	eq
 1046 03e0 2846     		moveq	r0, r5
 1047 03e2 1046     		movne	r0, r2
 1048              		.loc 3 290 0
 1049 03e4 8A03     		lsls	r2, r1, #14
 1050 03e6 92FBF0F0 		sdiv	r0, r2, r0
 291:firmwares/rotorcraft/guidance/guidance_v.c **** 
 292:firmwares/rotorcraft/guidance/guidance_v.c ****   /* bound the nominal command to 0.9*MAX_PPRZ */
 293:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(guidance_v_ff_cmd, 0, 8640);
 1051              		.loc 3 293 0
 1052 03ea B0F5075F 		cmp	r0, #8640
 1053 03ee 02DD     		ble	.L86
 1054 03f0 4FF40750 		mov	r0, #8640
 1055 03f4 02E0     		b	.L258
 1056              	.L86:
 1057 03f6 0028     		cmp	r0, #0
 1058 03f8 B8BF     		it	lt
 1059 03fa 0020     		movlt	r0, #0
 1060              	.L258:
 1061 03fc 1860     		str	r0, [r3, #0]
 294:firmwares/rotorcraft/guidance/guidance_v.c **** 
 295:firmwares/rotorcraft/guidance/guidance_v.c **** 
 296:firmwares/rotorcraft/guidance/guidance_v.c ****   /* our error feed back command                   */
 297:firmwares/rotorcraft/guidance/guidance_v.c ****   /* z-axis pointing down -> positive error means we need less thrust */
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1062              		.loc 3 298 0
 1063 03fe 8D4B     		ldr	r3, .L301+20
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 1064              		.loc 3 299 0
 1065 0400 8D48     		ldr	r0, .L301+24
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1066              		.loc 3 298 0
 1067 0402 1968     		ldr	r1, [r3, #0]
 1068              		.loc 3 299 0
 1069 0404 0368     		ldr	r3, [r0, #0]
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1070              		.loc 3 298 0
 1071 0406 4A42     		negs	r2, r1
 1072              		.loc 3 299 0
 1073 0408 5942     		negs	r1, r3
 1074 040a 4C43     		muls	r4, r1, r4
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1075              		.loc 3 298 0
 1076 040c 5743     		muls	r7, r2, r7
 1077              		.loc 3 299 0
 1078 040e 2414     		asrs	r4, r4, #16
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1079              		.loc 3 298 0
 1080 0410 04EBE714 		add	r4, r4, r7, asr #7
 300:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_ki * guidance_v_z_sum_err) >> 16);
 1081              		.loc 3 300 0
 1082 0414 894F     		ldr	r7, .L301+28
 1083 0416 8A4B     		ldr	r3, .L301+32
 1084 0418 3A68     		ldr	r2, [r7, #0]
 1085 041a 1968     		ldr	r1, [r3, #0]
 1086 041c 5042     		negs	r0, r2
 1087 041e 4843     		muls	r0, r1, r0
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 1088              		.loc 3 299 0
 1089 0420 04EB2047 		add	r7, r4, r0, asr #16
 301:firmwares/rotorcraft/guidance/guidance_v.c **** 
 302:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_delta_t = guidance_v_ff_cmd + guidance_v_fb_cmd;
 1090              		.loc 3 302 0
 1091 0424 8248     		ldr	r0, .L301+16
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1092              		.loc 3 298 0
 1093 0426 874A     		ldr	r2, .L301+36
 1094              		.loc 3 302 0
 1095 0428 0368     		ldr	r3, [r0, #0]
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1096              		.loc 3 298 0
 1097 042a 1760     		str	r7, [r2, #0]
 1098              		.loc 3 302 0
 1099 042c FF18     		adds	r7, r7, r3
 303:firmwares/rotorcraft/guidance/guidance_v.c **** 
 304:firmwares/rotorcraft/guidance/guidance_v.c ****   /* bound the result */
 305:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(guidance_v_delta_t, 0, MAX_PPRZ);
 1100              		.loc 3 305 0
 1101 042e B7F5165F 		cmp	r7, #9600
 1102 0432 8549     		ldr	r1, .L301+40
 1103 0434 02DD     		ble	.L89
 1104 0436 4FF41652 		mov	r2, #9600
 1105 043a 04E0     		b	.L259
 1106              	.L89:
 1107 043c 002F     		cmp	r7, #0
 1108 043e 01DB     		blt	.L91
 302:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_delta_t = guidance_v_ff_cmd + guidance_v_fb_cmd;
 1109              		.loc 3 302 0
 1110 0440 0F60     		str	r7, [r1, #0]
 1111 0442 01E0     		b	.L90
 1112              	.L91:
 1113              		.loc 3 305 0
 1114 0444 0022     		movs	r2, #0
 1115              	.L259:
 1116 0446 0A60     		str	r2, [r1, #0]
 1117              	.LVL99:
 1118              	.L90:
 1119              	.LBE70:
 1120              	.LBE71:
 181:firmwares/rotorcraft/guidance/guidance_v.c ****     stabilization_cmd[COMMAND_THRUST] = guidance_v_delta_t;
 1121              		.loc 3 181 0
 1122 0448 0968     		ldr	r1, [r1, #0]
 1123 044a 804B     		ldr	r3, .L301+44
 1124 044c 00F071BC 		b	.L268
 1125              	.L57:
 190:firmwares/rotorcraft/guidance/guidance_v.c ****     gv_update_ref_from_zd_sp(guidance_v_zd_sp);
 1126              		.loc 3 190 0
 1127 0450 7F4A     		ldr	r2, .L301+48
 1128              	.LBB72:
 1129              	.LBB73:
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 1130              		.loc 3 256 0
 1131 0452 804C     		ldr	r4, .L301+52
 1132              	.LBE73:
 1133              	.LBE72:
 190:firmwares/rotorcraft/guidance/guidance_v.c ****     gv_update_ref_from_zd_sp(guidance_v_zd_sp);
 1134              		.loc 3 190 0
 1135 0454 1068     		ldr	r0, [r2, #0]
 1136 0456 FFF7FEFF 		bl	gv_update_ref_from_zd_sp
 1137              	.LVL100:
 1138              	.LBB77:
 1139              	.LBB76:
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 1140              		.loc 3 256 0
 1141 045a 2768     		ldr	r7, [r4, #0]
 1142 045c 6068     		ldr	r0, [r4, #4]
 1143 045e BB0C     		lsrs	r3, r7, #18
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1144              		.loc 3 258 0
 1145 0460 7D4A     		ldr	r2, .L301+56
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1146              		.loc 3 259 0
 1147 0462 7E4F     		ldr	r7, .L301+60
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 1148              		.loc 3 256 0
 1149 0464 43EA8035 		orr	r5, r3, r0, lsl #14
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1150              		.loc 3 258 0
 1151 0468 1468     		ldr	r4, [r2, #0]
 1152              	.LVL101:
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1153              		.loc 3 259 0
 1154 046a 3B68     		ldr	r3, [r7, #0]
 257:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_ref = (int32_t)tmp;
 1155              		.loc 3 257 0
 1156 046c 7C49     		ldr	r1, .L301+64
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1157              		.loc 3 259 0
 1158 046e 7D4A     		ldr	r2, .L301+68
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1159              		.loc 3 258 0
 1160 0470 DFF82082 		ldr	r8, .L301+116
 257:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_ref = (int32_t)tmp;
 1161              		.loc 3 257 0
 1162 0474 0D60     		str	r5, [r1, #0]
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1163              		.loc 3 258 0
 1164 0476 A000     		lsls	r0, r4, #2
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1165              		.loc 3 259 0
 1166 0478 9900     		lsls	r1, r3, #2
 1167 047a 1160     		str	r1, [r2, #0]
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1168              		.loc 3 258 0
 1169 047c C8F80000 		str	r0, [r8, #0]
 261:firmwares/rotorcraft/guidance/guidance_v.c ****   int32_t err_z  = guidance_v_z_ref - stateGetPositionNed_i()->z;
 1170              		.loc 3 261 0
 1171 0480 FFF7FEFF 		bl	stateGetPositionNed_i
 1172              	.LVL102:
 1173 0484 8468     		ldr	r4, [r0, #8]
 1174 0486 2F1B     		subs	r7, r5, r4
 1175              	.LVL103:
 262:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(err_z, GUIDANCE_V_MIN_ERR_Z, GUIDANCE_V_MAX_ERR_Z);
 1176              		.loc 3 262 0
 1177 0488 3846     		mov	r0, r7
 1178 048a FFF7FEFF 		bl	__aeabi_i2d
 1179              	.LVL104:
 1180 048e 0022     		movs	r2, #0
 1181 0490 754B     		ldr	r3, .L301+72
 1182 0492 0446     		mov	r4, r0
 1183 0494 0D46     		mov	r5, r1
 1184 0496 FFF7FEFF 		bl	__aeabi_dcmpgt
 1185              	.LVL105:
 1186 049a 50B9     		cbnz	r0, .L223
 1187 049c 734B     		ldr	r3, .L301+76
 1188 049e 2046     		mov	r0, r4
 1189 04a0 2946     		mov	r1, r5
 1190 04a2 0022     		movs	r2, #0
 1191 04a4 FFF7FEFF 		bl	__aeabi_dcmplt
 1192              	.LVL106:
 1193 04a8 714B     		ldr	r3, .L301+80
 1194 04aa 0028     		cmp	r0, #0
 1195 04ac 18BF     		it	ne
 1196 04ae 1F46     		movne	r7, r3
 1197              	.LVL107:
 1198 04b0 01E0     		b	.L92
 1199              	.LVL108:
 1200              	.L223:
 1201 04b2 4FF42067 		mov	r7, #2560
 1202              	.LVL109:
 1203              	.L92:
 263:firmwares/rotorcraft/guidance/guidance_v.c ****   int32_t err_zd = guidance_v_zd_ref - stateGetSpeedNed_i()->z;
 1204              		.loc 3 263 0
 1205 04b6 D8F80040 		ldr	r4, [r8, #0]
 1206 04ba FFF7FEFF 		bl	stateGetSpeedNed_i
 1207              	.LVL110:
 1208 04be 8068     		ldr	r0, [r0, #8]
 1209 04c0 C0EB0408 		rsb	r8, r0, r4
 1210              	.LVL111:
 264:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(err_zd, GUIDANCE_V_MIN_ERR_ZD, GUIDANCE_V_MAX_ERR_ZD);
 1211              		.loc 3 264 0
 1212 04c4 4046     		mov	r0, r8
 1213 04c6 FFF7FEFF 		bl	__aeabi_i2d
 1214              	.LVL112:
 1215 04ca 0022     		movs	r2, #0
 1216 04cc 694B     		ldr	r3, .L301+84
 1217 04ce 0446     		mov	r4, r0
 1218 04d0 0D46     		mov	r5, r1
 1219 04d2 FFF7FEFF 		bl	__aeabi_dcmpgt
 1220              	.LVL113:
 1221 04d6 50B9     		cbnz	r0, .L225
 1222 04d8 2046     		mov	r0, r4
 1223 04da 2946     		mov	r1, r5
 1224 04dc 0022     		movs	r2, #0
 1225 04de 664B     		ldr	r3, .L301+88
 1226 04e0 FFF7FEFF 		bl	__aeabi_dcmplt
 1227              	.LVL114:
 1228 04e4 654C     		ldr	r4, .L301+92
 1229 04e6 0028     		cmp	r0, #0
 1230 04e8 08BF     		it	eq
 1231 04ea 4446     		moveq	r4, r8
 1232 04ec 01E0     		b	.L93
 1233              	.L225:
 1234 04ee 4FF4A004 		mov	r4, #5242880
 1235              	.L93:
 1236              	.LVL115:
 1237 04f2 534B     		ldr	r3, .L301+32
 266:firmwares/rotorcraft/guidance/guidance_v.c ****   if (in_flight) {
 1238              		.loc 3 266 0
 1239 04f4 66B1     		cbz	r6, .L94
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 1240              		.loc 3 267 0
 1241 04f6 1968     		ldr	r1, [r3, #0]
 268:firmwares/rotorcraft/guidance/guidance_v.c ****     Bound(guidance_v_z_sum_err, -GUIDANCE_V_MAX_SUM_ERR, GUIDANCE_V_MAX_SUM_ERR);
 1242              		.loc 3 268 0
 1243 04f8 6148     		ldr	r0, .L301+96
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 1244              		.loc 3 267 0
 1245 04fa 7A18     		adds	r2, r7, r1
 268:firmwares/rotorcraft/guidance/guidance_v.c ****     Bound(guidance_v_z_sum_err, -GUIDANCE_V_MAX_SUM_ERR, GUIDANCE_V_MAX_SUM_ERR);
 1246              		.loc 3 268 0
 1247 04fc 8242     		cmp	r2, r0
 1248 04fe 01DD     		ble	.L95
 1249 0500 1860     		str	r0, [r3, #0]
 1250 0502 06E0     		b	.L96
 1251              	.L95:
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 1252              		.loc 3 267 0
 1253 0504 5F4D     		ldr	r5, .L301+100
 1254 0506 AA42     		cmp	r2, r5
 1255 0508 ACBF     		ite	ge
 1256 050a 1A60     		strge	r2, [r3, #0]
 1257 050c 1D60     		strlt	r5, [r3, #0]
 1258 050e 00E0     		b	.L96
 1259              	.L94:
 271:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err = 0;
 1260              		.loc 3 271 0
 1261 0510 1E60     		str	r6, [r3, #0]
 1262              	.L96:
 1263              	.LVL116:
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 1264              		.loc 3 280 0
 1265 0512 544B     		ldr	r3, .L301+68
 279:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t g_m_zdd = (int32_t)BFP_OF_REAL(9.81, FF_CMD_FRAC) -
 1266              		.loc 3 279 0
 1267 0514 5C48     		ldr	r0, .L301+104
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 1268              		.loc 3 280 0
 1269 0516 1968     		ldr	r1, [r3, #0]
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 1270              		.loc 3 277 0
 1271 0518 5C4B     		ldr	r3, .L301+108
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 1272              		.loc 3 280 0
 1273 051a 0A02     		lsls	r2, r1, #8
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 1274              		.loc 3 277 0
 1275 051c 1968     		ldr	r1, [r3, #0]
 279:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t g_m_zdd = (int32_t)BFP_OF_REAL(9.81, FF_CMD_FRAC) -
 1276              		.loc 3 279 0
 1277 051e 851A     		subs	r5, r0, r2
 1278              	.LVL117:
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 1279              		.loc 3 277 0
 1280 0520 8A11     		asrs	r2, r1, #6
 1281              	.LVL118:
 282:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = g_m_zdd / inv_m;
 1282              		.loc 3 282 0
 1283 0522 95FBF2F0 		sdiv	r0, r5, r2
 1284 0526 424D     		ldr	r5, .L301+16
 1285              	.LVL119:
 1286 0528 2860     		str	r0, [r5, #0]
 284:firmwares/rotorcraft/guidance/guidance_v.c ****   struct Int32Eulers* att_euler = stateGetNedToBodyEulers_i();
 1287              		.loc 3 284 0
 1288 052a FFF7FEFF 		bl	stateGetNedToBodyEulers_i
 1289              	.LVL120:
 1290              	.LBB74:
 285:firmwares/rotorcraft/guidance/guidance_v.c ****   PPRZ_ITRIG_COS(cphi, att_euler->phi);
 1291              		.loc 3 285 0
 1292 052e 0368     		ldr	r3, [r0, #0]
 1293 0530 03F5C951 		add	r1, r3, #6432
 1294 0534 4B1C     		adds	r3, r1, #1
 1295              	.LVL121:
 1296              	.L98:
 1297 0536 43F24322 		movw	r2, #12867
 1298 053a 9342     		cmp	r3, r2
 1299 053c 03DD     		ble	.L248
 1300              	.L99:
 1301 053e A3F5C942 		sub	r2, r3, #25728
 1302 0542 D31F     		subs	r3, r2, #7
 1303              	.LVL122:
 1304 0544 F7E7     		b	.L98
 1305              	.LVL123:
 1306              	.L248:
 1307 0546 384D     		ldr	r5, .L301+8
 1308 0548 AB42     		cmp	r3, r5
 1309 054a 03DA     		bge	.L295
 1310              	.L101:
 1311 054c 03F5C941 		add	r1, r3, #25728
 1312 0550 CB1D     		adds	r3, r1, #7
 1313              	.LVL124:
 1314 0552 F8E7     		b	.L248
 1315              	.LVL125:
 1316              	.L295:
 1317 0554 41F62111 		movw	r1, #6433
 1318 0558 8B42     		cmp	r3, r1
 1319 055a 344A     		ldr	r2, .L301+12
 1320 055c 03DD     		ble	.L102
 1321 055e C3F54951 		rsb	r1, r3, #12864
 1322 0562 CB1C     		adds	r3, r1, #3
 1323              	.LVL126:
 1324 0564 0CE0     		b	.L103
 1325              	.L102:
 1326 0566 6FF4C955 		mvn	r5, #6432
 1327 056a AB42     		cmp	r3, r5
 1328 056c 06DA     		bge	.L104
 1329 056e C3F17F43 		rsb	r3, r3, #-16777216
 1330              	.LVL127:
 1331 0572 03F57F01 		add	r1, r3, #16711680
 1332 0576 01F54D43 		add	r3, r1, #52480
 1333 057a BD33     		adds	r3, r3, #189
 1334              	.LVL128:
 1335              	.L104:
 1336 057c 002B     		cmp	r3, #0
 1337 057e 02DB     		blt	.L105
 1338              	.L103:
 1339 0580 32F91320 		ldrsh	r2, [r2, r3, lsl #1]
 1340              	.LVL129:
 1341 0584 03E0     		b	.L106
 1342              	.LVL130:
 1343              	.L105:
 1344 0586 5D42     		negs	r5, r3
 1345 0588 32F91520 		ldrsh	r2, [r2, r5, lsl #1]
 1346 058c 5242     		negs	r2, r2
 1347              	.LVL131:
 1348              	.L106:
 1349              	.LBE74:
 1350              	.LBB75:
 286:firmwares/rotorcraft/guidance/guidance_v.c ****   PPRZ_ITRIG_COS(ctheta, att_euler->theta);
 1351              		.loc 3 286 0
 1352 058e 4068     		ldr	r0, [r0, #4]
 1353              	.LVL132:
 1354 0590 00F5C953 		add	r3, r0, #6432
 1355              	.LVL133:
 1356 0594 0133     		adds	r3, r3, #1
 1357              	.LVL134:
 1358              	.L107:
 1359 0596 43F24325 		movw	r5, #12867
 1360 059a AB42     		cmp	r3, r5
 1361 059c 03DD     		ble	.L249
 1362              	.L108:
 1363 059e A3F5C943 		sub	r3, r3, #25728
 1364              	.LVL135:
 1365 05a2 073B     		subs	r3, r3, #7
 1366              	.LVL136:
 1367 05a4 F7E7     		b	.L107
 1368              	.LVL137:
 1369              	.L249:
 1370 05a6 2049     		ldr	r1, .L301+8
 1371 05a8 8B42     		cmp	r3, r1
 1372 05aa 80F2F680 		bge	.L292
 1373              	.L110:
 1374 05ae 03F5C945 		add	r5, r3, #25728
 1375 05b2 EB1D     		adds	r3, r5, #7
 1376              	.LVL138:
 1377 05b4 F7E7     		b	.L249
 1378              	.LVL139:
 1379              	.L58:
 1380              	.LBE75:
 1381              	.LBE76:
 1382              	.LBE77:
 205:firmwares/rotorcraft/guidance/guidance_v.c ****     gv_update_ref_from_z_sp(guidance_v_z_sp);
 1383              		.loc 3 205 0
 1384 05b6 364C     		ldr	r4, .L301+112
 1385              	.LBB78:
 1386              	.LBB79:
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 1387              		.loc 3 256 0
 1388 05b8 264F     		ldr	r7, .L301+52
 1389              	.LBE79:
 1390              	.LBE78:
 205:firmwares/rotorcraft/guidance/guidance_v.c ****     gv_update_ref_from_z_sp(guidance_v_z_sp);
 1391              		.loc 3 205 0
 1392 05ba 2068     		ldr	r0, [r4, #0]
 1393 05bc FFF7FEFF 		bl	gv_update_ref_from_z_sp
 1394              	.LVL140:
 1395              	.LBB83:
 1396              	.LBB82:
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 1397              		.loc 3 256 0
 1398 05c0 3D68     		ldr	r5, [r7, #0]
 1399 05c2 7868     		ldr	r0, [r7, #4]
 1400 05c4 AB0C     		lsrs	r3, r5, #18
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1401              		.loc 3 258 0
 1402 05c6 244A     		ldr	r2, .L301+56
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1403              		.loc 3 259 0
 1404 05c8 244D     		ldr	r5, .L301+60
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 1405              		.loc 3 256 0
 1406 05ca 43EA8034 		orr	r4, r3, r0, lsl #14
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1407              		.loc 3 258 0
 1408 05ce 1768     		ldr	r7, [r2, #0]
 1409              	.LVL141:
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1410              		.loc 3 259 0
 1411 05d0 2B68     		ldr	r3, [r5, #0]
 257:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_ref = (int32_t)tmp;
 1412              		.loc 3 257 0
 1413 05d2 2349     		ldr	r1, .L301+64
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1414              		.loc 3 259 0
 1415 05d4 234A     		ldr	r2, .L301+68
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1416              		.loc 3 258 0
 1417 05d6 DFF8BC80 		ldr	r8, .L301+116
 257:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_ref = (int32_t)tmp;
 1418              		.loc 3 257 0
 1419 05da 0C60     		str	r4, [r1, #0]
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1420              		.loc 3 258 0
 1421 05dc B800     		lsls	r0, r7, #2
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1422              		.loc 3 259 0
 1423 05de 9900     		lsls	r1, r3, #2
 1424 05e0 1160     		str	r1, [r2, #0]
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1425              		.loc 3 258 0
 1426 05e2 C8F80000 		str	r0, [r8, #0]
 261:firmwares/rotorcraft/guidance/guidance_v.c ****   int32_t err_z  = guidance_v_z_ref - stateGetPositionNed_i()->z;
 1427              		.loc 3 261 0
 1428 05e6 FFF7FEFF 		bl	stateGetPositionNed_i
 1429              	.LVL142:
 1430 05ea 8768     		ldr	r7, [r0, #8]
 1431 05ec E71B     		subs	r7, r4, r7
 1432              	.LVL143:
 262:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(err_z, GUIDANCE_V_MIN_ERR_Z, GUIDANCE_V_MAX_ERR_Z);
 1433              		.loc 3 262 0
 1434 05ee 3846     		mov	r0, r7
 1435 05f0 FFF7FEFF 		bl	__aeabi_i2d
 1436              	.LVL144:
 1437 05f4 0022     		movs	r2, #0
 1438 05f6 1C4B     		ldr	r3, .L301+72
 1439 05f8 0446     		mov	r4, r0
 1440 05fa 0D46     		mov	r5, r1
 1441 05fc FFF7FEFF 		bl	__aeabi_dcmpgt
 1442              	.LVL145:
 1443 0600 0028     		cmp	r0, #0
 1444 0602 49D1     		bne	.L228
 1445 0604 194B     		ldr	r3, .L301+76
 1446 0606 2046     		mov	r0, r4
 1447 0608 2946     		mov	r1, r5
 1448 060a 0022     		movs	r2, #0
 1449 060c FFF7FEFF 		bl	__aeabi_dcmplt
 1450              	.LVL146:
 1451 0610 174B     		ldr	r3, .L301+80
 1452 0612 0028     		cmp	r0, #0
 1453 0614 18BF     		it	ne
 1454 0616 1F46     		movne	r7, r3
 1455              	.LVL147:
 1456 0618 40E0     		b	.L123
 1457              	.L302:
 1458 061a 00BFAFF3 		.align	3
 1458      0080
 1459              	.L301:
 1460 0620 65732D38 		.word	942502757
 1461 0624 52C1C040 		.word	1086374226
 1462 0628 BDCDFFFF 		.word	-12867
 1463 062c 00000000 		.word	pprz_trig_int
 1464 0630 00000000 		.word	.LANCHOR15
 1465 0634 00000000 		.word	.LANCHOR1
 1466 0638 00000000 		.word	.LANCHOR2
 1467 063c 00000000 		.word	.LANCHOR3
 1468 0640 00000000 		.word	.LANCHOR4
 1469 0644 00000000 		.word	.LANCHOR16
 1470 0648 00000000 		.word	.LANCHOR17
 1471 064c 00000000 		.word	stabilization_cmd
 1472 0650 00000000 		.word	.LANCHOR13
 1473 0654 00000000 		.word	gv_z_ref
 1474 0658 00000000 		.word	gv_zd_ref
 1475 065c 00000000 		.word	gv_zdd_ref
 1476 0660 00000000 		.word	.LANCHOR10
 1477 0664 00000000 		.word	.LANCHOR12
 1478 0668 0000A440 		.word	1084489728
 1479 066c 0000A4C0 		.word	-1062993920
 1480 0670 00F6FFFF 		.word	-2560
 1481 0674 00005441 		.word	1096024064
 1482 0678 000054C1 		.word	-1051459584
 1483 067c 0000B0FF 		.word	-5242880
 1484 0680 80841E00 		.word	2000000
 1485 0684 807BE1FF 		.word	-2000000
 1486 0688 703D2700 		.word	2571632
 1487 068c 00000000 		.word	.LANCHOR5
 1488 0690 00000000 		.word	.LANCHOR9
 1489 0694 00000000 		.word	.LANCHOR11
 1490              	.LVL148:
 1491              	.L228:
 1492 0698 4FF42067 		mov	r7, #2560
 1493              	.LVL149:
 1494              	.L123:
 263:firmwares/rotorcraft/guidance/guidance_v.c ****   int32_t err_zd = guidance_v_zd_ref - stateGetSpeedNed_i()->z;
 1495              		.loc 3 263 0
 1496 069c D8F80040 		ldr	r4, [r8, #0]
 1497 06a0 FFF7FEFF 		bl	stateGetSpeedNed_i
 1498              	.LVL150:
 1499 06a4 8068     		ldr	r0, [r0, #8]
 1500 06a6 C0EB0408 		rsb	r8, r0, r4
 1501              	.LVL151:
 264:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(err_zd, GUIDANCE_V_MIN_ERR_ZD, GUIDANCE_V_MAX_ERR_ZD);
 1502              		.loc 3 264 0
 1503 06aa 4046     		mov	r0, r8
 1504 06ac FFF7FEFF 		bl	__aeabi_i2d
 1505              	.LVL152:
 1506 06b0 0022     		movs	r2, #0
 1507 06b2 A34B     		ldr	r3, .L303+8
 1508 06b4 0446     		mov	r4, r0
 1509 06b6 0D46     		mov	r5, r1
 1510 06b8 FFF7FEFF 		bl	__aeabi_dcmpgt
 1511              	.LVL153:
 1512 06bc 50B9     		cbnz	r0, .L230
 1513 06be 2046     		mov	r0, r4
 1514 06c0 2946     		mov	r1, r5
 1515 06c2 0022     		movs	r2, #0
 1516 06c4 9F4B     		ldr	r3, .L303+12
 1517 06c6 FFF7FEFF 		bl	__aeabi_dcmplt
 1518              	.LVL154:
 1519 06ca 9F4C     		ldr	r4, .L303+16
 1520 06cc 0028     		cmp	r0, #0
 1521 06ce 08BF     		it	eq
 1522 06d0 4446     		moveq	r4, r8
 1523 06d2 01E0     		b	.L124
 1524              	.L230:
 1525 06d4 4FF4A004 		mov	r4, #5242880
 1526              	.L124:
 1527              	.LVL155:
 1528 06d8 9C4B     		ldr	r3, .L303+20
 266:firmwares/rotorcraft/guidance/guidance_v.c ****   if (in_flight) {
 1529              		.loc 3 266 0
 1530 06da 66B1     		cbz	r6, .L125
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 1531              		.loc 3 267 0
 1532 06dc 1968     		ldr	r1, [r3, #0]
 268:firmwares/rotorcraft/guidance/guidance_v.c ****     Bound(guidance_v_z_sum_err, -GUIDANCE_V_MAX_SUM_ERR, GUIDANCE_V_MAX_SUM_ERR);
 1533              		.loc 3 268 0
 1534 06de 9C48     		ldr	r0, .L303+24
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 1535              		.loc 3 267 0
 1536 06e0 7A18     		adds	r2, r7, r1
 268:firmwares/rotorcraft/guidance/guidance_v.c ****     Bound(guidance_v_z_sum_err, -GUIDANCE_V_MAX_SUM_ERR, GUIDANCE_V_MAX_SUM_ERR);
 1537              		.loc 3 268 0
 1538 06e2 8242     		cmp	r2, r0
 1539 06e4 01DD     		ble	.L126
 1540 06e6 1860     		str	r0, [r3, #0]
 1541 06e8 06E0     		b	.L127
 1542              	.L126:
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 1543              		.loc 3 267 0
 1544 06ea 9A4D     		ldr	r5, .L303+28
 1545 06ec AA42     		cmp	r2, r5
 1546 06ee ACBF     		ite	ge
 1547 06f0 1A60     		strge	r2, [r3, #0]
 1548 06f2 1D60     		strlt	r5, [r3, #0]
 1549 06f4 00E0     		b	.L127
 1550              	.L125:
 271:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err = 0;
 1551              		.loc 3 271 0
 1552 06f6 1E60     		str	r6, [r3, #0]
 1553              	.L127:
 1554              	.LVL156:
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 1555              		.loc 3 280 0
 1556 06f8 974B     		ldr	r3, .L303+32
 279:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t g_m_zdd = (int32_t)BFP_OF_REAL(9.81, FF_CMD_FRAC) -
 1557              		.loc 3 279 0
 1558 06fa 9848     		ldr	r0, .L303+36
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 1559              		.loc 3 280 0
 1560 06fc 1968     		ldr	r1, [r3, #0]
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 1561              		.loc 3 277 0
 1562 06fe 984B     		ldr	r3, .L303+40
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 1563              		.loc 3 280 0
 1564 0700 0A02     		lsls	r2, r1, #8
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 1565              		.loc 3 277 0
 1566 0702 1968     		ldr	r1, [r3, #0]
 279:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t g_m_zdd = (int32_t)BFP_OF_REAL(9.81, FF_CMD_FRAC) -
 1567              		.loc 3 279 0
 1568 0704 851A     		subs	r5, r0, r2
 1569              	.LVL157:
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 1570              		.loc 3 277 0
 1571 0706 8A11     		asrs	r2, r1, #6
 1572              	.LVL158:
 282:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = g_m_zdd / inv_m;
 1573              		.loc 3 282 0
 1574 0708 95FBF2F0 		sdiv	r0, r5, r2
 1575 070c 954D     		ldr	r5, .L303+44
 1576              	.LVL159:
 1577 070e 2860     		str	r0, [r5, #0]
 284:firmwares/rotorcraft/guidance/guidance_v.c ****   struct Int32Eulers* att_euler = stateGetNedToBodyEulers_i();
 1578              		.loc 3 284 0
 1579 0710 FFF7FEFF 		bl	stateGetNedToBodyEulers_i
 1580              	.LVL160:
 1581              	.LBB80:
 285:firmwares/rotorcraft/guidance/guidance_v.c ****   PPRZ_ITRIG_COS(cphi, att_euler->phi);
 1582              		.loc 3 285 0
 1583 0714 0368     		ldr	r3, [r0, #0]
 1584 0716 03F5C951 		add	r1, r3, #6432
 1585 071a 4B1C     		adds	r3, r1, #1
 1586              	.LVL161:
 1587              	.L129:
 1588 071c 43F24322 		movw	r2, #12867
 1589 0720 9342     		cmp	r3, r2
 1590 0722 03DD     		ble	.L250
 1591              	.L130:
 1592 0724 A3F5C941 		sub	r1, r3, #25728
 1593 0728 CB1F     		subs	r3, r1, #7
 1594              	.LVL162:
 1595 072a F7E7     		b	.L129
 1596              	.LVL163:
 1597              	.L250:
 1598 072c 8E4D     		ldr	r5, .L303+48
 1599 072e AB42     		cmp	r3, r5
 1600 0730 03DA     		bge	.L296
 1601              	.L132:
 1602 0732 03F5C945 		add	r5, r3, #25728
 1603 0736 EB1D     		adds	r3, r5, #7
 1604              	.LVL164:
 1605 0738 F8E7     		b	.L250
 1606              	.LVL165:
 1607              	.L296:
 1608 073a 41F62111 		movw	r1, #6433
 1609 073e 8B42     		cmp	r3, r1
 1610 0740 8A4A     		ldr	r2, .L303+52
 1611 0742 03DD     		ble	.L133
 1612 0744 C3F54951 		rsb	r1, r3, #12864
 1613 0748 CB1C     		adds	r3, r1, #3
 1614              	.LVL166:
 1615 074a 0CE0     		b	.L134
 1616              	.L133:
 1617 074c 6FF4C955 		mvn	r5, #6432
 1618 0750 AB42     		cmp	r3, r5
 1619 0752 06DA     		bge	.L135
 1620 0754 C3F17F43 		rsb	r3, r3, #-16777216
 1621              	.LVL167:
 1622 0758 03F57F01 		add	r1, r3, #16711680
 1623 075c 01F54D43 		add	r3, r1, #52480
 1624 0760 BD33     		adds	r3, r3, #189
 1625              	.LVL168:
 1626              	.L135:
 1627 0762 002B     		cmp	r3, #0
 1628 0764 02DB     		blt	.L136
 1629              	.L134:
 1630 0766 32F91320 		ldrsh	r2, [r2, r3, lsl #1]
 1631              	.LVL169:
 1632 076a 03E0     		b	.L137
 1633              	.LVL170:
 1634              	.L136:
 1635 076c 5D42     		negs	r5, r3
 1636 076e 32F91520 		ldrsh	r2, [r2, r5, lsl #1]
 1637 0772 5242     		negs	r2, r2
 1638              	.LVL171:
 1639              	.L137:
 1640              	.LBE80:
 1641              	.LBB81:
 286:firmwares/rotorcraft/guidance/guidance_v.c ****   PPRZ_ITRIG_COS(ctheta, att_euler->theta);
 1642              		.loc 3 286 0
 1643 0774 4068     		ldr	r0, [r0, #4]
 1644              	.LVL172:
 1645 0776 00F5C953 		add	r3, r0, #6432
 1646              	.LVL173:
 1647 077a 0133     		adds	r3, r3, #1
 1648              	.LVL174:
 1649              	.L138:
 1650 077c 43F24325 		movw	r5, #12867
 1651 0780 AB42     		cmp	r3, r5
 1652 0782 03DD     		ble	.L251
 1653              	.L139:
 1654 0784 A3F5C943 		sub	r3, r3, #25728
 1655              	.LVL175:
 1656 0788 073B     		subs	r3, r3, #7
 1657              	.LVL176:
 1658 078a F7E7     		b	.L138
 1659              	.LVL177:
 1660              	.L251:
 1661 078c 7649     		ldr	r1, .L303+48
 1662 078e 8B42     		cmp	r3, r1
 1663 0790 03DA     		bge	.L292
 1664              	.L141:
 1665 0792 03F5C940 		add	r0, r3, #25728
 1666 0796 C31D     		adds	r3, r0, #7
 1667              	.LVL178:
 1668 0798 F8E7     		b	.L251
 1669              	.LVL179:
 1670              	.L292:
 1671 079a 41F62110 		movw	r0, #6433
 1672 079e 8342     		cmp	r3, r0
 1673 07a0 724D     		ldr	r5, .L303+52
 1674 07a2 03DD     		ble	.L142
 1675 07a4 C3F54953 		rsb	r3, r3, #12864
 1676 07a8 0333     		adds	r3, r3, #3
 1677              	.LVL180:
 1678 07aa 0CE0     		b	.L143
 1679              	.LVL181:
 1680              	.L142:
 1681 07ac 6FF4C951 		mvn	r1, #6432
 1682 07b0 8B42     		cmp	r3, r1
 1683 07b2 06DA     		bge	.L144
 1684 07b4 C3F17F43 		rsb	r3, r3, #-16777216
 1685 07b8 03F57F00 		add	r0, r3, #16711680
 1686 07bc 00F54D43 		add	r3, r0, #52480
 1687 07c0 BD33     		adds	r3, r3, #189
 1688              	.LVL182:
 1689              	.L144:
 1690 07c2 002B     		cmp	r3, #0
 1691 07c4 02DB     		blt	.L145
 1692              	.L143:
 1693 07c6 35F91300 		ldrsh	r0, [r5, r3, lsl #1]
 1694              	.LVL183:
 1695 07ca 03E0     		b	.L146
 1696              	.LVL184:
 1697              	.L145:
 1698 07cc 5942     		negs	r1, r3
 1699 07ce 35F91150 		ldrsh	r5, [r5, r1, lsl #1]
 1700 07d2 6842     		negs	r0, r5
 1701              	.LVL185:
 1702              	.L146:
 1703              	.LBE81:
 287:firmwares/rotorcraft/guidance/guidance_v.c ****   cphitheta = (cphi * ctheta) >> INT32_TRIG_FRAC;
 1704              		.loc 3 287 0
 1705 07d4 5043     		muls	r0, r2, r0
 1706              	.LVL186:
 1707 07d6 8513     		asrs	r5, r0, #14
 1708              	.LVL187:
 288:firmwares/rotorcraft/guidance/guidance_v.c ****   if (cphitheta < MAX_BANK_COEF) cphitheta = MAX_BANK_COEF;
 1709              		.loc 3 288 0
 1710 07d8 2846     		mov	r0, r5
 1711 07da FFF7FEFF 		bl	__aeabi_i2d
 1712              	.LVL188:
 1713 07de 56A3     		adr	r3, .L303
 1714 07e0 D3E90023 		ldrd	r2, [r3]
 1715 07e4 FFF7FEFF 		bl	__aeabi_dcmplt
 1716              	.LVL189:
 290:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = (guidance_v_ff_cmd << INT32_TRIG_FRAC) / cphitheta;
 1717              		.loc 3 290 0
 1718 07e8 5E4B     		ldr	r3, .L303+44
 288:firmwares/rotorcraft/guidance/guidance_v.c ****   if (cphitheta < MAX_BANK_COEF) cphitheta = MAX_BANK_COEF;
 1719              		.loc 3 288 0
 1720 07ea 42F28212 		movw	r2, #8578
 290:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = (guidance_v_ff_cmd << INT32_TRIG_FRAC) / cphitheta;
 1721              		.loc 3 290 0
 1722 07ee 1968     		ldr	r1, [r3, #0]
 288:firmwares/rotorcraft/guidance/guidance_v.c ****   if (cphitheta < MAX_BANK_COEF) cphitheta = MAX_BANK_COEF;
 1723              		.loc 3 288 0
 1724 07f0 0028     		cmp	r0, #0
 1725 07f2 0CBF     		ite	eq
 1726 07f4 2846     		moveq	r0, r5
 1727 07f6 1046     		movne	r0, r2
 290:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = (guidance_v_ff_cmd << INT32_TRIG_FRAC) / cphitheta;
 1728              		.loc 3 290 0
 1729 07f8 8A03     		lsls	r2, r1, #14
 1730 07fa 92FBF0F0 		sdiv	r0, r2, r0
 293:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(guidance_v_ff_cmd, 0, 8640);
 1731              		.loc 3 293 0
 1732 07fe B0F5075F 		cmp	r0, #8640
 1733 0802 02DD     		ble	.L148
 1734 0804 4FF40750 		mov	r0, #8640
 1735 0808 02E0     		b	.L262
 1736              	.L148:
 1737 080a 0028     		cmp	r0, #0
 1738 080c B8BF     		it	lt
 1739 080e 0020     		movlt	r0, #0
 1740              	.L262:
 1741 0810 1860     		str	r0, [r3, #0]
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1742              		.loc 3 298 0
 1743 0812 574B     		ldr	r3, .L303+56
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 1744              		.loc 3 299 0
 1745 0814 5748     		ldr	r0, .L303+60
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1746              		.loc 3 298 0
 1747 0816 1968     		ldr	r1, [r3, #0]
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 1748              		.loc 3 299 0
 1749 0818 0368     		ldr	r3, [r0, #0]
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1750              		.loc 3 298 0
 1751 081a 4A42     		negs	r2, r1
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 1752              		.loc 3 299 0
 1753 081c 5942     		negs	r1, r3
 1754 081e 4C43     		muls	r4, r1, r4
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1755              		.loc 3 298 0
 1756 0820 5743     		muls	r7, r2, r7
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 1757              		.loc 3 299 0
 1758 0822 2414     		asrs	r4, r4, #16
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1759              		.loc 3 298 0
 1760 0824 04EBE714 		add	r4, r4, r7, asr #7
 300:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_ki * guidance_v_z_sum_err) >> 16);
 1761              		.loc 3 300 0
 1762 0828 534F     		ldr	r7, .L303+64
 1763 082a 484B     		ldr	r3, .L303+20
 1764 082c 3A68     		ldr	r2, [r7, #0]
 1765 082e 1968     		ldr	r1, [r3, #0]
 1766 0830 5042     		negs	r0, r2
 1767 0832 4843     		muls	r0, r1, r0
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 1768              		.loc 3 299 0
 1769 0834 04EB2047 		add	r7, r4, r0, asr #16
 302:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_delta_t = guidance_v_ff_cmd + guidance_v_fb_cmd;
 1770              		.loc 3 302 0
 1771 0838 4A48     		ldr	r0, .L303+44
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1772              		.loc 3 298 0
 1773 083a 504A     		ldr	r2, .L303+68
 302:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_delta_t = guidance_v_ff_cmd + guidance_v_fb_cmd;
 1774              		.loc 3 302 0
 1775 083c 0368     		ldr	r3, [r0, #0]
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 1776              		.loc 3 298 0
 1777 083e 1760     		str	r7, [r2, #0]
 302:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_delta_t = guidance_v_ff_cmd + guidance_v_fb_cmd;
 1778              		.loc 3 302 0
 1779 0840 FF18     		adds	r7, r7, r3
 1780              		.loc 3 305 0
 1781 0842 B7F5165F 		cmp	r7, #9600
 1782 0846 4E48     		ldr	r0, .L303+72
 1783 0848 02DD     		ble	.L151
 1784 084a 4FF41651 		mov	r1, #9600
 1785 084e 04E0     		b	.L263
 1786              	.L151:
 1787 0850 002F     		cmp	r7, #0
 1788 0852 01DB     		blt	.L153
 302:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_delta_t = guidance_v_ff_cmd + guidance_v_fb_cmd;
 1789              		.loc 3 302 0
 1790 0854 0760     		str	r7, [r0, #0]
 1791 0856 01E0     		b	.L152
 1792              	.L153:
 1793              		.loc 3 305 0
 1794 0858 0021     		movs	r1, #0
 1795              	.L263:
 1796 085a 0160     		str	r1, [r0, #0]
 1797              	.L152:
 1798              	.LBE82:
 1799              	.LBE83:
 211:firmwares/rotorcraft/guidance/guidance_v.c ****     stabilization_cmd[COMMAND_THRUST] = Min(guidance_v_rc_delta_t, guidance_v_delta_t);
 1800              		.loc 3 211 0
 1801 085c 494A     		ldr	r2, .L303+76
 1802 085e 4A4B     		ldr	r3, .L303+80
 1803 0860 1168     		ldr	r1, [r2, #0]
 1804 0862 0268     		ldr	r2, [r0, #0]
 1805 0864 5EE2     		b	.L267
 1806              	.LVL190:
 1807              	.L59:
 217:firmwares/rotorcraft/guidance/guidance_v.c ****       if (vertical_mode == VERTICAL_MODE_ALT) {
 1808              		.loc 3 217 0
 1809 0866 494A     		ldr	r2, .L303+84
 1810 0868 1178     		ldrb	r1, [r2, #0]	@ zero_extendqisi2
 1811 086a 0229     		cmp	r1, #2
 1812 086c 40F0F780 		bne	.L154
 218:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_z_sp = -nav_flight_altitude;
 1813              		.loc 3 218 0
 1814 0870 474A     		ldr	r2, .L303+88
 1815 0872 484F     		ldr	r7, .L303+92
 1816 0874 1468     		ldr	r4, [r2, #0]
 1817              	.LBB84:
 1818              	.LBB85:
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1819              		.loc 3 258 0
 1820 0876 DFF83C81 		ldr	r8, .L303+124
 1821              	.LBE85:
 1822              	.LBE84:
 218:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_z_sp = -nav_flight_altitude;
 1823              		.loc 3 218 0
 1824 087a 6042     		negs	r0, r4
 1825 087c 3860     		str	r0, [r7, #0]
 219:firmwares/rotorcraft/guidance/guidance_v.c ****         gv_update_ref_from_z_sp(guidance_v_z_sp);
 1826              		.loc 3 219 0
 1827 087e FFF7FEFF 		bl	gv_update_ref_from_z_sp
 1828              	.LVL191:
 1829              	.LBB89:
 1830              	.LBB88:
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 1831              		.loc 3 256 0
 1832 0882 4548     		ldr	r0, .L303+96
 1833              	.LVL192:
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1834              		.loc 3 258 0
 1835 0884 454F     		ldr	r7, .L303+100
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 1836              		.loc 3 256 0
 1837 0886 0168     		ldr	r1, [r0, #0]
 1838 0888 4368     		ldr	r3, [r0, #4]
 1839 088a 8D0C     		lsrs	r5, r1, #18
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1840              		.loc 3 259 0
 1841 088c 4449     		ldr	r1, .L303+104
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 1842              		.loc 3 256 0
 1843 088e 45EA8334 		orr	r4, r5, r3, lsl #14
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1844              		.loc 3 258 0
 1845 0892 3868     		ldr	r0, [r7, #0]
 1846              	.LVL193:
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1847              		.loc 3 259 0
 1848 0894 0D68     		ldr	r5, [r1, #0]
 257:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_ref = (int32_t)tmp;
 1849              		.loc 3 257 0
 1850 0896 434A     		ldr	r2, .L303+108
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1851              		.loc 3 259 0
 1852 0898 2F4F     		ldr	r7, .L303+32
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1853              		.loc 3 258 0
 1854 089a 8300     		lsls	r3, r0, #2
 257:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_ref = (int32_t)tmp;
 1855              		.loc 3 257 0
 1856 089c 1460     		str	r4, [r2, #0]
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 1857              		.loc 3 259 0
 1858 089e AA00     		lsls	r2, r5, #2
 1859 08a0 3A60     		str	r2, [r7, #0]
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 1860              		.loc 3 258 0
 1861 08a2 C8F80030 		str	r3, [r8, #0]
 261:firmwares/rotorcraft/guidance/guidance_v.c ****   int32_t err_z  = guidance_v_z_ref - stateGetPositionNed_i()->z;
 1862              		.loc 3 261 0
 1863 08a6 FFF7FEFF 		bl	stateGetPositionNed_i
 1864              	.LVL194:
 1865 08aa 8068     		ldr	r0, [r0, #8]
 1866 08ac 271A     		subs	r7, r4, r0
 1867              	.LVL195:
 262:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(err_z, GUIDANCE_V_MIN_ERR_Z, GUIDANCE_V_MAX_ERR_Z);
 1868              		.loc 3 262 0
 1869 08ae 3846     		mov	r0, r7
 1870 08b0 FFF7FEFF 		bl	__aeabi_i2d
 1871              	.LVL196:
 1872 08b4 0022     		movs	r2, #0
 1873 08b6 3C4B     		ldr	r3, .L303+112
 1874 08b8 0446     		mov	r4, r0
 1875 08ba 0D46     		mov	r5, r1
 1876 08bc FFF7FEFF 		bl	__aeabi_dcmpgt
 1877              	.LVL197:
 1878 08c0 50B9     		cbnz	r0, .L233
 1879 08c2 3A4B     		ldr	r3, .L303+116
 1880 08c4 2046     		mov	r0, r4
 1881 08c6 2946     		mov	r1, r5
 1882 08c8 0022     		movs	r2, #0
 1883 08ca FFF7FEFF 		bl	__aeabi_dcmplt
 1884              	.LVL198:
 1885 08ce 384B     		ldr	r3, .L303+120
 1886 08d0 0028     		cmp	r0, #0
 1887 08d2 18BF     		it	ne
 1888 08d4 1F46     		movne	r7, r3
 1889              	.LVL199:
 1890 08d6 01E0     		b	.L155
 1891              	.LVL200:
 1892              	.L233:
 1893 08d8 4FF42067 		mov	r7, #2560
 1894              	.LVL201:
 1895              	.L155:
 263:firmwares/rotorcraft/guidance/guidance_v.c ****   int32_t err_zd = guidance_v_zd_ref - stateGetSpeedNed_i()->z;
 1896              		.loc 3 263 0
 1897 08dc D8F80040 		ldr	r4, [r8, #0]
 1898 08e0 FFF7FEFF 		bl	stateGetSpeedNed_i
 1899              	.LVL202:
 1900 08e4 8168     		ldr	r1, [r0, #8]
 1901 08e6 C1EB0408 		rsb	r8, r1, r4
 1902              	.LVL203:
 264:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(err_zd, GUIDANCE_V_MIN_ERR_ZD, GUIDANCE_V_MAX_ERR_ZD);
 1903              		.loc 3 264 0
 1904 08ea 4046     		mov	r0, r8
 1905 08ec FFF7FEFF 		bl	__aeabi_i2d
 1906              	.LVL204:
 1907 08f0 0022     		movs	r2, #0
 1908 08f2 134B     		ldr	r3, .L303+8
 1909 08f4 0446     		mov	r4, r0
 1910 08f6 0D46     		mov	r5, r1
 1911 08f8 FFF7FEFF 		bl	__aeabi_dcmpgt
 1912              	.LVL205:
 1913 08fc 50B9     		cbnz	r0, .L235
 1914 08fe 2046     		mov	r0, r4
 1915 0900 2946     		mov	r1, r5
 1916 0902 0022     		movs	r2, #0
 1917 0904 0F4B     		ldr	r3, .L303+12
 1918 0906 FFF7FEFF 		bl	__aeabi_dcmplt
 1919              	.LVL206:
 1920 090a 0F4C     		ldr	r4, .L303+16
 1921 090c 0028     		cmp	r0, #0
 1922 090e 08BF     		it	eq
 1923 0910 4446     		moveq	r4, r8
 1924 0912 01E0     		b	.L156
 1925              	.L235:
 1926 0914 4FF4A004 		mov	r4, #5242880
 1927              	.L156:
 1928              	.LVL207:
 1929 0918 0C48     		ldr	r0, .L303+20
 266:firmwares/rotorcraft/guidance/guidance_v.c ****   if (in_flight) {
 1930              		.loc 3 266 0
 1931 091a 002E     		cmp	r6, #0
 1932 091c 4CD0     		beq	.L157
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 1933              		.loc 3 267 0
 1934 091e 0268     		ldr	r2, [r0, #0]
 268:firmwares/rotorcraft/guidance/guidance_v.c ****     Bound(guidance_v_z_sum_err, -GUIDANCE_V_MAX_SUM_ERR, GUIDANCE_V_MAX_SUM_ERR);
 1935              		.loc 3 268 0
 1936 0920 0B49     		ldr	r1, .L303+24
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 1937              		.loc 3 267 0
 1938 0922 BB18     		adds	r3, r7, r2
 268:firmwares/rotorcraft/guidance/guidance_v.c ****     Bound(guidance_v_z_sum_err, -GUIDANCE_V_MAX_SUM_ERR, GUIDANCE_V_MAX_SUM_ERR);
 1939              		.loc 3 268 0
 1940 0924 8B42     		cmp	r3, r1
 1941 0926 01DD     		ble	.L158
 1942 0928 0160     		str	r1, [r0, #0]
 1943 092a 46E0     		b	.L159
 1944              	.L158:
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 1945              		.loc 3 267 0
 1946 092c 094D     		ldr	r5, .L303+28
 1947 092e AB42     		cmp	r3, r5
 1948 0930 ACBF     		ite	ge
 1949 0932 0360     		strge	r3, [r0, #0]
 1950 0934 0560     		strlt	r5, [r0, #0]
 1951 0936 40E0     		b	.L159
 1952              	.L304:
 1953              		.align	3
 1954              	.L303:
 1955 0938 65732D38 		.word	942502757
 1956 093c 52C1C040 		.word	1086374226
 1957 0940 00005441 		.word	1096024064
 1958 0944 000054C1 		.word	-1051459584
 1959 0948 0000B0FF 		.word	-5242880
 1960 094c 00000000 		.word	.LANCHOR4
 1961 0950 80841E00 		.word	2000000
 1962 0954 807BE1FF 		.word	-2000000
 1963 0958 00000000 		.word	.LANCHOR12
 1964 095c 703D2700 		.word	2571632
 1965 0960 00000000 		.word	.LANCHOR5
 1966 0964 00000000 		.word	.LANCHOR15
 1967 0968 BDCDFFFF 		.word	-12867
 1968 096c 00000000 		.word	pprz_trig_int
 1969 0970 00000000 		.word	.LANCHOR1
 1970 0974 00000000 		.word	.LANCHOR2
 1971 0978 00000000 		.word	.LANCHOR3
 1972 097c 00000000 		.word	.LANCHOR16
 1973 0980 00000000 		.word	.LANCHOR17
 1974 0984 00000000 		.word	.LANCHOR7
 1975 0988 00000000 		.word	stabilization_cmd
 1976 098c 00000000 		.word	vertical_mode
 1977 0990 00000000 		.word	nav_flight_altitude
 1978 0994 00000000 		.word	.LANCHOR9
 1979 0998 00000000 		.word	gv_z_ref
 1980 099c 00000000 		.word	gv_zd_ref
 1981 09a0 00000000 		.word	gv_zdd_ref
 1982 09a4 00000000 		.word	.LANCHOR10
 1983 09a8 0000A440 		.word	1084489728
 1984 09ac 0000A4C0 		.word	-1062993920
 1985 09b0 00F6FFFF 		.word	-2560
 1986 09b4 00000000 		.word	.LANCHOR11
 1987              	.L157:
 271:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err = 0;
 1988              		.loc 3 271 0
 1989 09b8 0660     		str	r6, [r0, #0]
 1990              	.L159:
 1991              	.LVL208:
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 1992              		.loc 3 280 0
 1993 09ba A548     		ldr	r0, .L305+8
 279:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t g_m_zdd = (int32_t)BFP_OF_REAL(9.81, FF_CMD_FRAC) -
 1994              		.loc 3 279 0
 1995 09bc A54B     		ldr	r3, .L305+12
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 1996              		.loc 3 280 0
 1997 09be 0268     		ldr	r2, [r0, #0]
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 1998              		.loc 3 277 0
 1999 09c0 A548     		ldr	r0, .L305+16
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 2000              		.loc 3 280 0
 2001 09c2 1102     		lsls	r1, r2, #8
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 2002              		.loc 3 277 0
 2003 09c4 0268     		ldr	r2, [r0, #0]
 279:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t g_m_zdd = (int32_t)BFP_OF_REAL(9.81, FF_CMD_FRAC) -
 2004              		.loc 3 279 0
 2005 09c6 5D1A     		subs	r5, r3, r1
 2006              	.LVL209:
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 2007              		.loc 3 277 0
 2008 09c8 9111     		asrs	r1, r2, #6
 2009              	.LVL210:
 282:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = g_m_zdd / inv_m;
 2010              		.loc 3 282 0
 2011 09ca 95FBF1F3 		sdiv	r3, r5, r1
 2012 09ce A34D     		ldr	r5, .L305+20
 2013              	.LVL211:
 2014 09d0 2B60     		str	r3, [r5, #0]
 284:firmwares/rotorcraft/guidance/guidance_v.c ****   struct Int32Eulers* att_euler = stateGetNedToBodyEulers_i();
 2015              		.loc 3 284 0
 2016 09d2 FFF7FEFF 		bl	stateGetNedToBodyEulers_i
 2017              	.LVL212:
 2018              	.LBB86:
 285:firmwares/rotorcraft/guidance/guidance_v.c ****   PPRZ_ITRIG_COS(cphi, att_euler->phi);
 2019              		.loc 3 285 0
 2020 09d6 0268     		ldr	r2, [r0, #0]
 2021 09d8 02F5C951 		add	r1, r2, #6432
 2022 09dc 4B1C     		adds	r3, r1, #1
 2023              	.LVL213:
 2024              	.L161:
 2025 09de 43F24325 		movw	r5, #12867
 2026 09e2 AB42     		cmp	r3, r5
 2027 09e4 03DD     		ble	.L252
 2028              	.L162:
 2029 09e6 A3F5C942 		sub	r2, r3, #25728
 2030 09ea D31F     		subs	r3, r2, #7
 2031              	.LVL214:
 2032 09ec F7E7     		b	.L161
 2033              	.LVL215:
 2034              	.L252:
 2035 09ee 9C4A     		ldr	r2, .L305+24
 2036 09f0 9342     		cmp	r3, r2
 2037 09f2 03DA     		bge	.L297
 2038              	.L164:
 2039 09f4 03F5C941 		add	r1, r3, #25728
 2040 09f8 CB1D     		adds	r3, r1, #7
 2041              	.LVL216:
 2042 09fa F8E7     		b	.L252
 2043              	.LVL217:
 2044              	.L297:
 2045 09fc 41F62111 		movw	r1, #6433
 2046 0a00 8B42     		cmp	r3, r1
 2047 0a02 984D     		ldr	r5, .L305+28
 2048 0a04 03DD     		ble	.L165
 2049 0a06 C3F54951 		rsb	r1, r3, #12864
 2050 0a0a CB1C     		adds	r3, r1, #3
 2051              	.LVL218:
 2052 0a0c 0CE0     		b	.L166
 2053              	.L165:
 2054 0a0e 6FF4C952 		mvn	r2, #6432
 2055 0a12 9342     		cmp	r3, r2
 2056 0a14 06DA     		bge	.L167
 2057 0a16 C3F17F43 		rsb	r3, r3, #-16777216
 2058              	.LVL219:
 2059 0a1a 03F57F01 		add	r1, r3, #16711680
 2060 0a1e 01F54D43 		add	r3, r1, #52480
 2061 0a22 BD33     		adds	r3, r3, #189
 2062              	.LVL220:
 2063              	.L167:
 2064 0a24 002B     		cmp	r3, #0
 2065 0a26 02DB     		blt	.L168
 2066              	.L166:
 2067 0a28 35F91320 		ldrsh	r2, [r5, r3, lsl #1]
 2068              	.LVL221:
 2069 0a2c 03E0     		b	.L169
 2070              	.LVL222:
 2071              	.L168:
 2072 0a2e 5A42     		negs	r2, r3
 2073 0a30 35F91250 		ldrsh	r5, [r5, r2, lsl #1]
 2074 0a34 6A42     		negs	r2, r5
 2075              	.LVL223:
 2076              	.L169:
 2077              	.LBE86:
 2078              	.LBB87:
 286:firmwares/rotorcraft/guidance/guidance_v.c ****   PPRZ_ITRIG_COS(ctheta, att_euler->theta);
 2079              		.loc 3 286 0
 2080 0a36 4068     		ldr	r0, [r0, #4]
 2081              	.LVL224:
 2082 0a38 00F5C953 		add	r3, r0, #6432
 2083              	.LVL225:
 2084 0a3c 0133     		adds	r3, r3, #1
 2085              	.LVL226:
 2086              	.L170:
 2087 0a3e 43F24325 		movw	r5, #12867
 2088 0a42 AB42     		cmp	r3, r5
 2089 0a44 03DD     		ble	.L253
 2090              	.L171:
 2091 0a46 A3F5C943 		sub	r3, r3, #25728
 2092              	.LVL227:
 2093 0a4a 073B     		subs	r3, r3, #7
 2094              	.LVL228:
 2095 0a4c F7E7     		b	.L170
 2096              	.LVL229:
 2097              	.L253:
 2098 0a4e 8449     		ldr	r1, .L305+24
 2099 0a50 8B42     		cmp	r3, r1
 2100 0a52 80F2C180 		bge	.L289
 2101              	.L173:
 2102 0a56 03F5C945 		add	r5, r3, #25728
 2103 0a5a EB1D     		adds	r3, r5, #7
 2104              	.LVL230:
 2105 0a5c F7E7     		b	.L253
 2106              	.LVL231:
 2107              	.L154:
 2108              	.LBE87:
 2109              	.LBE88:
 2110              	.LBE89:
 222:firmwares/rotorcraft/guidance/guidance_v.c ****       else if (vertical_mode == VERTICAL_MODE_CLIMB) {
 2111              		.loc 3 222 0
 2112 0a5e 0129     		cmp	r1, #1
 2113 0a60 40F04E81 		bne	.L186
 223:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_zd_sp = -nav_climb;
 2114              		.loc 3 223 0
 2115 0a64 804F     		ldr	r7, .L305+32
 2116 0a66 814C     		ldr	r4, .L305+36
 2117 0a68 3D68     		ldr	r5, [r7, #0]
 2118              	.LBB90:
 2119              	.LBB91:
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 2120              		.loc 3 256 0
 2121 0a6a 814F     		ldr	r7, .L305+40
 2122              	.LBE91:
 2123              	.LBE90:
 223:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_zd_sp = -nav_climb;
 2124              		.loc 3 223 0
 2125 0a6c 6842     		negs	r0, r5
 2126 0a6e 2060     		str	r0, [r4, #0]
 224:firmwares/rotorcraft/guidance/guidance_v.c ****         gv_update_ref_from_zd_sp(guidance_v_zd_sp);
 2127              		.loc 3 224 0
 2128 0a70 FFF7FEFF 		bl	gv_update_ref_from_zd_sp
 2129              	.LVL232:
 225:firmwares/rotorcraft/guidance/guidance_v.c ****         nav_flight_altitude = -guidance_v_z_sp;
 2130              		.loc 3 225 0
 2131 0a74 7F49     		ldr	r1, .L305+44
 2132              	.LBB96:
 2133              	.LBB94:
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 2134              		.loc 3 256 0
 2135 0a76 3C68     		ldr	r4, [r7, #0]
 2136              	.LBE94:
 2137              	.LBE96:
 225:firmwares/rotorcraft/guidance/guidance_v.c ****         nav_flight_altitude = -guidance_v_z_sp;
 2138              		.loc 3 225 0
 2139 0a78 0868     		ldr	r0, [r1, #0]
 2140 0a7a 7F4B     		ldr	r3, .L305+48
 2141 0a7c 4242     		negs	r2, r0
 2142 0a7e 1A60     		str	r2, [r3, #0]
 2143              	.LVL233:
 2144              	.LBB97:
 2145              	.LBB95:
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 2146              		.loc 3 256 0
 2147 0a80 7D68     		ldr	r5, [r7, #4]
 2148 0a82 A10C     		lsrs	r1, r4, #18
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 2149              		.loc 3 258 0
 2150 0a84 7D4A     		ldr	r2, .L305+52
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 2151              		.loc 3 259 0
 2152 0a86 7E4C     		ldr	r4, .L305+56
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 2153              		.loc 3 258 0
 2154 0a88 1368     		ldr	r3, [r2, #0]
 256:firmwares/rotorcraft/guidance/guidance_v.c ****   int64_t tmp  = gv_z_ref>>(GV_Z_REF_FRAC - INT32_POS_FRAC);
 2155              		.loc 3 256 0
 2156 0a8a 41EA8537 		orr	r7, r1, r5, lsl #14
 2157              	.LVL234:
 257:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_ref = (int32_t)tmp;
 2158              		.loc 3 257 0
 2159 0a8e 7D48     		ldr	r0, .L305+60
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 2160              		.loc 3 259 0
 2161 0a90 2168     		ldr	r1, [r4, #0]
 2162 0a92 6F4A     		ldr	r2, .L305+8
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 2163              		.loc 3 258 0
 2164 0a94 DFF81482 		ldr	r8, .L305+100
 2165 0a98 9D00     		lsls	r5, r3, #2
 257:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_z_ref = (int32_t)tmp;
 2166              		.loc 3 257 0
 2167 0a9a 0760     		str	r7, [r0, #0]
 259:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zdd_ref = gv_zdd_ref<<(INT32_ACCEL_FRAC - GV_ZDD_REF_FRAC);
 2168              		.loc 3 259 0
 2169 0a9c 8800     		lsls	r0, r1, #2
 2170 0a9e 1060     		str	r0, [r2, #0]
 258:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_zd_ref = gv_zd_ref<<(INT32_SPEED_FRAC - GV_ZD_REF_FRAC);
 2171              		.loc 3 258 0
 2172 0aa0 C8F80050 		str	r5, [r8, #0]
 261:firmwares/rotorcraft/guidance/guidance_v.c ****   int32_t err_z  = guidance_v_z_ref - stateGetPositionNed_i()->z;
 2173              		.loc 3 261 0
 2174 0aa4 FFF7FEFF 		bl	stateGetPositionNed_i
 2175              	.LVL235:
 2176 0aa8 8368     		ldr	r3, [r0, #8]
 2177 0aaa FF1A     		subs	r7, r7, r3
 2178              	.LVL236:
 262:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(err_z, GUIDANCE_V_MIN_ERR_Z, GUIDANCE_V_MAX_ERR_Z);
 2179              		.loc 3 262 0
 2180 0aac 3846     		mov	r0, r7
 2181 0aae FFF7FEFF 		bl	__aeabi_i2d
 2182              	.LVL237:
 2183 0ab2 0022     		movs	r2, #0
 2184 0ab4 744B     		ldr	r3, .L305+64
 2185 0ab6 0446     		mov	r4, r0
 2186 0ab8 0D46     		mov	r5, r1
 2187 0aba FFF7FEFF 		bl	__aeabi_dcmpgt
 2188              	.LVL238:
 2189 0abe 50B9     		cbnz	r0, .L238
 2190 0ac0 2946     		mov	r1, r5
 2191 0ac2 2046     		mov	r0, r4
 2192 0ac4 0022     		movs	r2, #0
 2193 0ac6 714B     		ldr	r3, .L305+68
 2194 0ac8 FFF7FEFF 		bl	__aeabi_dcmplt
 2195              	.LVL239:
 2196 0acc 7049     		ldr	r1, .L305+72
 2197 0ace 0028     		cmp	r0, #0
 2198 0ad0 18BF     		it	ne
 2199 0ad2 0F46     		movne	r7, r1
 2200              	.LVL240:
 2201 0ad4 01E0     		b	.L187
 2202              	.LVL241:
 2203              	.L238:
 2204 0ad6 4FF42067 		mov	r7, #2560
 2205              	.LVL242:
 2206              	.L187:
 263:firmwares/rotorcraft/guidance/guidance_v.c ****   int32_t err_zd = guidance_v_zd_ref - stateGetSpeedNed_i()->z;
 2207              		.loc 3 263 0
 2208 0ada D8F80040 		ldr	r4, [r8, #0]
 2209 0ade FFF7FEFF 		bl	stateGetSpeedNed_i
 2210              	.LVL243:
 2211 0ae2 8068     		ldr	r0, [r0, #8]
 2212 0ae4 C0EB0408 		rsb	r8, r0, r4
 2213              	.LVL244:
 264:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(err_zd, GUIDANCE_V_MIN_ERR_ZD, GUIDANCE_V_MAX_ERR_ZD);
 2214              		.loc 3 264 0
 2215 0ae8 4046     		mov	r0, r8
 2216 0aea FFF7FEFF 		bl	__aeabi_i2d
 2217              	.LVL245:
 2218 0aee 0022     		movs	r2, #0
 2219 0af0 684B     		ldr	r3, .L305+76
 2220 0af2 0446     		mov	r4, r0
 2221 0af4 0D46     		mov	r5, r1
 2222 0af6 FFF7FEFF 		bl	__aeabi_dcmpgt
 2223              	.LVL246:
 2224 0afa 50B9     		cbnz	r0, .L240
 2225 0afc 2046     		mov	r0, r4
 2226 0afe 2946     		mov	r1, r5
 2227 0b00 0022     		movs	r2, #0
 2228 0b02 654B     		ldr	r3, .L305+80
 2229 0b04 FFF7FEFF 		bl	__aeabi_dcmplt
 2230              	.LVL247:
 2231 0b08 644C     		ldr	r4, .L305+84
 2232 0b0a 0028     		cmp	r0, #0
 2233 0b0c 08BF     		it	eq
 2234 0b0e 4446     		moveq	r4, r8
 2235 0b10 01E0     		b	.L188
 2236              	.L240:
 2237 0b12 4FF4A004 		mov	r4, #5242880
 2238              	.L188:
 2239              	.LVL248:
 2240 0b16 624B     		ldr	r3, .L305+88
 266:firmwares/rotorcraft/guidance/guidance_v.c ****   if (in_flight) {
 2241              		.loc 3 266 0
 2242 0b18 66B1     		cbz	r6, .L189
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 2243              		.loc 3 267 0
 2244 0b1a 1A68     		ldr	r2, [r3, #0]
 268:firmwares/rotorcraft/guidance/guidance_v.c ****     Bound(guidance_v_z_sum_err, -GUIDANCE_V_MAX_SUM_ERR, GUIDANCE_V_MAX_SUM_ERR);
 2245              		.loc 3 268 0
 2246 0b1c 6149     		ldr	r1, .L305+92
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 2247              		.loc 3 267 0
 2248 0b1e B818     		adds	r0, r7, r2
 268:firmwares/rotorcraft/guidance/guidance_v.c ****     Bound(guidance_v_z_sum_err, -GUIDANCE_V_MAX_SUM_ERR, GUIDANCE_V_MAX_SUM_ERR);
 2249              		.loc 3 268 0
 2250 0b20 8842     		cmp	r0, r1
 2251 0b22 01DD     		ble	.L190
 2252 0b24 1960     		str	r1, [r3, #0]
 2253 0b26 06E0     		b	.L191
 2254              	.L190:
 267:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err += err_z;
 2255              		.loc 3 267 0
 2256 0b28 5F4D     		ldr	r5, .L305+96
 2257 0b2a A842     		cmp	r0, r5
 2258 0b2c ACBF     		ite	ge
 2259 0b2e 1860     		strge	r0, [r3, #0]
 2260 0b30 1D60     		strlt	r5, [r3, #0]
 2261 0b32 00E0     		b	.L191
 2262              	.L189:
 271:firmwares/rotorcraft/guidance/guidance_v.c ****     guidance_v_z_sum_err = 0;
 2263              		.loc 3 271 0
 2264 0b34 1E60     		str	r6, [r3, #0]
 2265              	.L191:
 2266              	.LVL249:
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 2267              		.loc 3 280 0
 2268 0b36 464B     		ldr	r3, .L305+8
 279:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t g_m_zdd = (int32_t)BFP_OF_REAL(9.81, FF_CMD_FRAC) -
 2269              		.loc 3 279 0
 2270 0b38 4649     		ldr	r1, .L305+12
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 2271              		.loc 3 280 0
 2272 0b3a 1A68     		ldr	r2, [r3, #0]
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 2273              		.loc 3 277 0
 2274 0b3c 464B     		ldr	r3, .L305+16
 280:firmwares/rotorcraft/guidance/guidance_v.c ****                           (guidance_v_zdd_ref<<(FF_CMD_FRAC - INT32_ACCEL_FRAC));
 2275              		.loc 3 280 0
 2276 0b3e 1002     		lsls	r0, r2, #8
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 2277              		.loc 3 277 0
 2278 0b40 1A68     		ldr	r2, [r3, #0]
 279:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t g_m_zdd = (int32_t)BFP_OF_REAL(9.81, FF_CMD_FRAC) -
 2279              		.loc 3 279 0
 2280 0b42 0D1A     		subs	r5, r1, r0
 2281              	.LVL250:
 277:firmwares/rotorcraft/guidance/guidance_v.c ****   const int32_t inv_m =  gv_adapt_X>>(GV_ADAPT_X_FRAC - FF_CMD_FRAC);
 2282              		.loc 3 277 0
 2283 0b44 9011     		asrs	r0, r2, #6
 2284              	.LVL251:
 282:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = g_m_zdd / inv_m;
 2285              		.loc 3 282 0
 2286 0b46 95FBF0F1 		sdiv	r1, r5, r0
 2287 0b4a 444D     		ldr	r5, .L305+20
 2288              	.LVL252:
 2289 0b4c 2960     		str	r1, [r5, #0]
 284:firmwares/rotorcraft/guidance/guidance_v.c ****   struct Int32Eulers* att_euler = stateGetNedToBodyEulers_i();
 2290              		.loc 3 284 0
 2291 0b4e FFF7FEFF 		bl	stateGetNedToBodyEulers_i
 2292              	.LVL253:
 2293              	.LBB92:
 285:firmwares/rotorcraft/guidance/guidance_v.c ****   PPRZ_ITRIG_COS(cphi, att_euler->phi);
 2294              		.loc 3 285 0
 2295 0b52 0368     		ldr	r3, [r0, #0]
 2296 0b54 03F5C952 		add	r2, r3, #6432
 2297 0b58 531C     		adds	r3, r2, #1
 2298              	.LVL254:
 2299              	.L193:
 2300 0b5a 43F24321 		movw	r1, #12867
 2301 0b5e 8B42     		cmp	r3, r1
 2302 0b60 03DD     		ble	.L254
 2303              	.L194:
 2304 0b62 A3F5C945 		sub	r5, r3, #25728
 2305 0b66 EB1F     		subs	r3, r5, #7
 2306              	.LVL255:
 2307 0b68 F7E7     		b	.L193
 2308              	.LVL256:
 2309              	.L254:
 2310 0b6a 3D4D     		ldr	r5, .L305+24
 2311 0b6c AB42     		cmp	r3, r5
 2312 0b6e 03DA     		bge	.L298
 2313              	.L196:
 2314 0b70 03F5C941 		add	r1, r3, #25728
 2315 0b74 CB1D     		adds	r3, r1, #7
 2316              	.LVL257:
 2317 0b76 F8E7     		b	.L254
 2318              	.LVL258:
 2319              	.L298:
 2320 0b78 41F62112 		movw	r2, #6433
 2321 0b7c 9342     		cmp	r3, r2
 2322 0b7e 394D     		ldr	r5, .L305+28
 2323 0b80 03DD     		ble	.L197
 2324 0b82 C3F54952 		rsb	r2, r3, #12864
 2325 0b86 D31C     		adds	r3, r2, #3
 2326              	.LVL259:
 2327 0b88 0CE0     		b	.L198
 2328              	.L197:
 2329 0b8a 6FF4C951 		mvn	r1, #6432
 2330 0b8e 8B42     		cmp	r3, r1
 2331 0b90 06DA     		bge	.L199
 2332 0b92 C3F17F43 		rsb	r3, r3, #-16777216
 2333              	.LVL260:
 2334 0b96 03F57F02 		add	r2, r3, #16711680
 2335 0b9a 02F54D43 		add	r3, r2, #52480
 2336 0b9e BD33     		adds	r3, r3, #189
 2337              	.LVL261:
 2338              	.L199:
 2339 0ba0 002B     		cmp	r3, #0
 2340 0ba2 02DB     		blt	.L200
 2341              	.L198:
 2342 0ba4 35F91320 		ldrsh	r2, [r5, r3, lsl #1]
 2343              	.LVL262:
 2344 0ba8 03E0     		b	.L201
 2345              	.LVL263:
 2346              	.L200:
 2347 0baa 5942     		negs	r1, r3
 2348 0bac 35F91150 		ldrsh	r5, [r5, r1, lsl #1]
 2349 0bb0 6A42     		negs	r2, r5
 2350              	.LVL264:
 2351              	.L201:
 2352              	.LBE92:
 2353              	.LBB93:
 286:firmwares/rotorcraft/guidance/guidance_v.c ****   PPRZ_ITRIG_COS(ctheta, att_euler->theta);
 2354              		.loc 3 286 0
 2355 0bb2 4068     		ldr	r0, [r0, #4]
 2356              	.LVL265:
 2357 0bb4 00F5C953 		add	r3, r0, #6432
 2358              	.LVL266:
 2359 0bb8 0133     		adds	r3, r3, #1
 2360              	.LVL267:
 2361              	.L202:
 2362 0bba 43F24321 		movw	r1, #12867
 2363 0bbe 8B42     		cmp	r3, r1
 2364 0bc0 03DD     		ble	.L255
 2365              	.L203:
 2366 0bc2 A3F5C943 		sub	r3, r3, #25728
 2367              	.LVL268:
 2368 0bc6 073B     		subs	r3, r3, #7
 2369              	.LVL269:
 2370 0bc8 F7E7     		b	.L202
 2371              	.LVL270:
 2372              	.L255:
 2373 0bca 254D     		ldr	r5, .L305+24
 2374 0bcc AB42     		cmp	r3, r5
 2375 0bce 03DA     		bge	.L289
 2376              	.L205:
 2377 0bd0 03F5C940 		add	r0, r3, #25728
 2378 0bd4 C31D     		adds	r3, r0, #7
 2379              	.LVL271:
 2380 0bd6 F8E7     		b	.L255
 2381              	.LVL272:
 2382              	.L289:
 2383 0bd8 41F62110 		movw	r0, #6433
 2384 0bdc 8342     		cmp	r3, r0
 2385 0bde 214D     		ldr	r5, .L305+28
 2386 0be0 03DD     		ble	.L206
 2387 0be2 C3F54953 		rsb	r3, r3, #12864
 2388 0be6 0333     		adds	r3, r3, #3
 2389              	.LVL273:
 2390 0be8 0CE0     		b	.L207
 2391              	.LVL274:
 2392              	.L206:
 2393 0bea 6FF4C951 		mvn	r1, #6432
 2394 0bee 8B42     		cmp	r3, r1
 2395 0bf0 06DA     		bge	.L208
 2396 0bf2 C3F17F43 		rsb	r3, r3, #-16777216
 2397 0bf6 03F57F00 		add	r0, r3, #16711680
 2398 0bfa 00F54D43 		add	r3, r0, #52480
 2399 0bfe BD33     		adds	r3, r3, #189
 2400              	.LVL275:
 2401              	.L208:
 2402 0c00 002B     		cmp	r3, #0
 2403 0c02 02DB     		blt	.L209
 2404              	.L207:
 2405 0c04 35F91300 		ldrsh	r0, [r5, r3, lsl #1]
 2406              	.LVL276:
 2407 0c08 03E0     		b	.L210
 2408              	.LVL277:
 2409              	.L209:
 2410 0c0a 5942     		negs	r1, r3
 2411 0c0c 35F91150 		ldrsh	r5, [r5, r1, lsl #1]
 2412 0c10 6842     		negs	r0, r5
 2413              	.LVL278:
 2414              	.L210:
 2415              	.LBE93:
 287:firmwares/rotorcraft/guidance/guidance_v.c ****   cphitheta = (cphi * ctheta) >> INT32_TRIG_FRAC;
 2416              		.loc 3 287 0
 2417 0c12 5043     		muls	r0, r2, r0
 2418              	.LVL279:
 2419 0c14 8513     		asrs	r5, r0, #14
 2420              	.LVL280:
 288:firmwares/rotorcraft/guidance/guidance_v.c ****   if (cphitheta < MAX_BANK_COEF) cphitheta = MAX_BANK_COEF;
 2421              		.loc 3 288 0
 2422 0c16 2846     		mov	r0, r5
 2423 0c18 FFF7FEFF 		bl	__aeabi_i2d
 2424              	.LVL281:
 2425 0c1c 0AA3     		adr	r3, .L305
 2426 0c1e D3E90023 		ldrd	r2, [r3]
 2427 0c22 FFF7FEFF 		bl	__aeabi_dcmplt
 2428              	.LVL282:
 290:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = (guidance_v_ff_cmd << INT32_TRIG_FRAC) / cphitheta;
 2429              		.loc 3 290 0
 2430 0c26 0D4B     		ldr	r3, .L305+20
 288:firmwares/rotorcraft/guidance/guidance_v.c ****   if (cphitheta < MAX_BANK_COEF) cphitheta = MAX_BANK_COEF;
 2431              		.loc 3 288 0
 2432 0c28 42F28212 		movw	r2, #8578
 290:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = (guidance_v_ff_cmd << INT32_TRIG_FRAC) / cphitheta;
 2433              		.loc 3 290 0
 2434 0c2c 1968     		ldr	r1, [r3, #0]
 288:firmwares/rotorcraft/guidance/guidance_v.c ****   if (cphitheta < MAX_BANK_COEF) cphitheta = MAX_BANK_COEF;
 2435              		.loc 3 288 0
 2436 0c2e 0028     		cmp	r0, #0
 2437 0c30 0CBF     		ite	eq
 2438 0c32 2846     		moveq	r0, r5
 2439 0c34 1046     		movne	r0, r2
 290:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_ff_cmd = (guidance_v_ff_cmd << INT32_TRIG_FRAC) / cphitheta;
 2440              		.loc 3 290 0
 2441 0c36 8A03     		lsls	r2, r1, #14
 2442 0c38 92FBF0F0 		sdiv	r0, r2, r0
 293:firmwares/rotorcraft/guidance/guidance_v.c ****   Bound(guidance_v_ff_cmd, 0, 8640);
 2443              		.loc 3 293 0
 2444 0c3c B0F5075F 		cmp	r0, #8640
 2445 0c40 36DD     		ble	.L212
 2446 0c42 4FF40750 		mov	r0, #8640
 2447 0c46 36E0     		b	.L265
 2448              	.L306:
 2449              		.align	3
 2450              	.L305:
 2451 0c48 65732D38 		.word	942502757
 2452 0c4c 52C1C040 		.word	1086374226
 2453 0c50 00000000 		.word	.LANCHOR12
 2454 0c54 703D2700 		.word	2571632
 2455 0c58 00000000 		.word	.LANCHOR5
 2456 0c5c 00000000 		.word	.LANCHOR15
 2457 0c60 BDCDFFFF 		.word	-12867
 2458 0c64 00000000 		.word	pprz_trig_int
 2459 0c68 00000000 		.word	nav_climb
 2460 0c6c 00000000 		.word	.LANCHOR13
 2461 0c70 00000000 		.word	gv_z_ref
 2462 0c74 00000000 		.word	.LANCHOR9
 2463 0c78 00000000 		.word	nav_flight_altitude
 2464 0c7c 00000000 		.word	gv_zd_ref
 2465 0c80 00000000 		.word	gv_zdd_ref
 2466 0c84 00000000 		.word	.LANCHOR10
 2467 0c88 0000A440 		.word	1084489728
 2468 0c8c 0000A4C0 		.word	-1062993920
 2469 0c90 00F6FFFF 		.word	-2560
 2470 0c94 00005441 		.word	1096024064
 2471 0c98 000054C1 		.word	-1051459584
 2472 0c9c 0000B0FF 		.word	-5242880
 2473 0ca0 00000000 		.word	.LANCHOR4
 2474 0ca4 80841E00 		.word	2000000
 2475 0ca8 807BE1FF 		.word	-2000000
 2476 0cac 00000000 		.word	.LANCHOR11
 2477              	.L212:
 2478 0cb0 0028     		cmp	r0, #0
 2479 0cb2 B8BF     		it	lt
 2480 0cb4 0020     		movlt	r0, #0
 2481              	.L265:
 2482 0cb6 1860     		str	r0, [r3, #0]
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 2483              		.loc 3 298 0
 2484 0cb8 1F4B     		ldr	r3, .L307
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 2485              		.loc 3 299 0
 2486 0cba 2048     		ldr	r0, .L307+4
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 2487              		.loc 3 298 0
 2488 0cbc 1968     		ldr	r1, [r3, #0]
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 2489              		.loc 3 299 0
 2490 0cbe 0368     		ldr	r3, [r0, #0]
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 2491              		.loc 3 298 0
 2492 0cc0 4A42     		negs	r2, r1
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 2493              		.loc 3 299 0
 2494 0cc2 5942     		negs	r1, r3
 2495 0cc4 4C43     		muls	r4, r1, r4
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 2496              		.loc 3 298 0
 2497 0cc6 5743     		muls	r7, r2, r7
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 2498              		.loc 3 299 0
 2499 0cc8 2414     		asrs	r4, r4, #16
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 2500              		.loc 3 298 0
 2501 0cca 04EBE714 		add	r4, r4, r7, asr #7
 300:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_ki * guidance_v_z_sum_err) >> 16);
 2502              		.loc 3 300 0
 2503 0cce 1C4F     		ldr	r7, .L307+8
 2504 0cd0 1C4B     		ldr	r3, .L307+12
 2505 0cd2 3A68     		ldr	r2, [r7, #0]
 2506 0cd4 1968     		ldr	r1, [r3, #0]
 2507 0cd6 5042     		negs	r0, r2
 2508 0cd8 4843     		muls	r0, r1, r0
 299:firmwares/rotorcraft/guidance/guidance_v.c ****                       ((-guidance_v_kd * err_zd) >> 16) +
 2509              		.loc 3 299 0
 2510 0cda 04EB2047 		add	r7, r4, r0, asr #16
 302:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_delta_t = guidance_v_ff_cmd + guidance_v_fb_cmd;
 2511              		.loc 3 302 0
 2512 0cde 1A48     		ldr	r0, .L307+16
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 2513              		.loc 3 298 0
 2514 0ce0 1A4A     		ldr	r2, .L307+20
 302:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_delta_t = guidance_v_ff_cmd + guidance_v_fb_cmd;
 2515              		.loc 3 302 0
 2516 0ce2 0368     		ldr	r3, [r0, #0]
 298:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_fb_cmd = ((-guidance_v_kp * err_z)  >> 7) +
 2517              		.loc 3 298 0
 2518 0ce4 1760     		str	r7, [r2, #0]
 302:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_delta_t = guidance_v_ff_cmd + guidance_v_fb_cmd;
 2519              		.loc 3 302 0
 2520 0ce6 FF18     		adds	r7, r7, r3
 2521              		.loc 3 305 0
 2522 0ce8 B7F5165F 		cmp	r7, #9600
 2523 0cec 184B     		ldr	r3, .L307+24
 2524 0cee 02DD     		ble	.L215
 2525 0cf0 4FF41652 		mov	r2, #9600
 2526 0cf4 0DE0     		b	.L266
 2527              	.L215:
 2528 0cf6 002F     		cmp	r7, #0
 302:firmwares/rotorcraft/guidance/guidance_v.c ****   guidance_v_delta_t = guidance_v_ff_cmd + guidance_v_fb_cmd;
 2529              		.loc 3 302 0
 2530 0cf8 1F60     		str	r7, [r3, #0]
 2531              		.loc 3 305 0
 2532 0cfa 0BDA     		bge	.L184
 2533 0cfc 0022     		movs	r2, #0
 2534 0cfe 08E0     		b	.L266
 2535              	.LVL283:
 2536              	.L186:
 2537              	.LBE95:
 2538              	.LBE97:
 228:firmwares/rotorcraft/guidance/guidance_v.c ****       else if (vertical_mode == VERTICAL_MODE_MANUAL) {
 2539              		.loc 3 228 0
 2540 0d00 41B9     		cbnz	r1, .L184
 229:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_z_sp = -nav_flight_altitude; // For display only
 2541              		.loc 3 229 0
 2542 0d02 1448     		ldr	r0, .L307+28
 2543 0d04 1449     		ldr	r1, .L307+32
 2544 0d06 0368     		ldr	r3, [r0, #0]
 230:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_delta_t = nav_throttle;
 2545              		.loc 3 230 0
 2546 0d08 1448     		ldr	r0, .L307+36
 229:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_z_sp = -nav_flight_altitude; // For display only
 2547              		.loc 3 229 0
 2548 0d0a 5A42     		negs	r2, r3
 2549 0d0c 0A60     		str	r2, [r1, #0]
 230:firmwares/rotorcraft/guidance/guidance_v.c ****         guidance_v_delta_t = nav_throttle;
 2550              		.loc 3 230 0
 2551 0d0e 104B     		ldr	r3, .L307+24
 2552 0d10 0268     		ldr	r2, [r0, #0]
 2553              	.L266:
 2554 0d12 1A60     		str	r2, [r3, #0]
 2555              	.L184:
 236:firmwares/rotorcraft/guidance/guidance_v.c ****       if (radio_control.status == RC_OK)
 2556              		.loc 3 236 0
 2557 0d14 1249     		ldr	r1, .L307+40
 2558 0d16 134B     		ldr	r3, .L307+44
 2559 0d18 0878     		ldrb	r0, [r1, #0]	@ zero_extendqisi2
 2560 0d1a 0D4A     		ldr	r2, .L307+24
 2561 0d1c 40B9     		cbnz	r0, .L217
 237:firmwares/rotorcraft/guidance/guidance_v.c ****         stabilization_cmd[COMMAND_THRUST] = Min(guidance_v_rc_delta_t, guidance_v_delta_t);
 2562              		.loc 3 237 0
 2563 0d1e 1248     		ldr	r0, .L307+48
 2564 0d20 1268     		ldr	r2, [r2, #0]
 2565 0d22 0168     		ldr	r1, [r0, #0]
 2566              	.L267:
 2567 0d24 9142     		cmp	r1, r2
 2568 0d26 D4BF     		ite	le
 2569 0d28 D960     		strle	r1, [r3, #12]
 2570 0d2a DA60     		strgt	r2, [r3, #12]
 2571 0d2c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2572              	.L217:
 239:firmwares/rotorcraft/guidance/guidance_v.c ****         stabilization_cmd[COMMAND_THRUST] = guidance_v_delta_t;
 2573              		.loc 3 239 0
 2574 0d30 1168     		ldr	r1, [r2, #0]
 2575              	.L268:
 2576 0d32 D960     		str	r1, [r3, #12]
 2577              	.L41:
 2578 0d34 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2579              	.L308:
 2580              		.align	2
 2581              	.L307:
 2582 0d38 00000000 		.word	.LANCHOR1
 2583 0d3c 00000000 		.word	.LANCHOR2
 2584 0d40 00000000 		.word	.LANCHOR3
 2585 0d44 00000000 		.word	.LANCHOR4
 2586 0d48 00000000 		.word	.LANCHOR15
 2587 0d4c 00000000 		.word	.LANCHOR16
 2588 0d50 00000000 		.word	.LANCHOR17
 2589 0d54 00000000 		.word	nav_flight_altitude
 2590 0d58 00000000 		.word	.LANCHOR9
 2591 0d5c 00000000 		.word	nav_throttle
 2592 0d60 00000000 		.word	radio_control
 2593 0d64 00000000 		.word	stabilization_cmd
 2594 0d68 00000000 		.word	.LANCHOR7
 2595              		.cfi_endproc
 2596              	.LFE126:
 2598              		.global	guidance_v_z_sum_err
 2599              		.global	guidance_v_ki
 2600              		.global	guidance_v_kd
 2601              		.global	guidance_v_kp
 2602              		.global	guidance_v_zdd_ref
 2603              		.global	guidance_v_zd_ref
 2604              		.global	guidance_v_z_ref
 2605              		.global	guidance_v_zd_sp
 2606              		.global	guidance_v_z_sp
 2607              		.global	guidance_v_rc_zd_sp
 2608              		.global	guidance_v_rc_delta_t
 2609              		.global	guidance_v_nominal_throttle
 2610              		.global	guidance_v_delta_t
 2611              		.global	guidance_v_fb_cmd
 2612              		.global	guidance_v_ff_cmd
 2613              		.global	guidance_v_mode
 2614              		.global	gv_adapt_Xmeas
 2615              		.global	gv_adapt_P
 2616              		.global	gv_adapt_X
 2617 0d6c AFF30080 		.section	.bss.guidance_v_ki,"aw",%nobits
 2618              		.align	2
 2619              		.set	.LANCHOR3,. + 0
 2622              	guidance_v_ki:
 2623 0000 00000000 		.space	4
 2624              		.section	.bss.gv_adapt_P,"aw",%nobits
 2625              		.align	2
 2626              		.set	.LANCHOR6,. + 0
 2629              	gv_adapt_P:
 2630 0000 00000000 		.space	4
 2631              		.section	.bss.guidance_v_rc_zd_sp,"aw",%nobits
 2632              		.align	2
 2633              		.set	.LANCHOR8,. + 0
 2636              	guidance_v_rc_zd_sp:
 2637 0000 00000000 		.space	4
 2638              		.section	.bss.guidance_v_z_ref,"aw",%nobits
 2639              		.align	2
 2640              		.set	.LANCHOR10,. + 0
 2643              	guidance_v_z_ref:
 2644 0000 00000000 		.space	4
 2645              		.section	.bss.guidance_v_kp,"aw",%nobits
 2646              		.align	2
 2647              		.set	.LANCHOR1,. + 0
 2650              	guidance_v_kp:
 2651 0000 00000000 		.space	4
 2652              		.section	.bss.guidance_v_z_sum_err,"aw",%nobits
 2653              		.align	2
 2654              		.set	.LANCHOR4,. + 0
 2657              	guidance_v_z_sum_err:
 2658 0000 00000000 		.space	4
 2659              		.section	.bss.gv_adapt_X,"aw",%nobits
 2660              		.align	2
 2661              		.set	.LANCHOR5,. + 0
 2664              	gv_adapt_X:
 2665 0000 00000000 		.space	4
 2666              		.section	.bss.gv_adapt_Xmeas,"aw",%nobits
 2667              		.align	2
 2668              		.set	.LANCHOR14,. + 0
 2671              	gv_adapt_Xmeas:
 2672 0000 00000000 		.space	4
 2673              		.section	.bss.guidance_v_nominal_throttle,"aw",%nobits
 2674              		.align	2
 2677              	guidance_v_nominal_throttle:
 2678 0000 00000000 		.space	4
 2679              		.section	.bss.guidance_v_ff_cmd,"aw",%nobits
 2680              		.align	2
 2681              		.set	.LANCHOR15,. + 0
 2684              	guidance_v_ff_cmd:
 2685 0000 00000000 		.space	4
 2686              		.section	.bss.guidance_v_rc_delta_t,"aw",%nobits
 2687              		.align	2
 2688              		.set	.LANCHOR7,. + 0
 2691              	guidance_v_rc_delta_t:
 2692 0000 00000000 		.space	4
 2693              		.section	.bss.guidance_v_mode,"aw",%nobits
 2694              		.set	.LANCHOR0,. + 0
 2697              	guidance_v_mode:
 2698 0000 00       		.space	1
 2699              		.section	.bss.guidance_v_zd_ref,"aw",%nobits
 2700              		.align	2
 2701              		.set	.LANCHOR11,. + 0
 2704              	guidance_v_zd_ref:
 2705 0000 00000000 		.space	4
 2706              		.section	.bss.guidance_v_delta_t,"aw",%nobits
 2707              		.align	2
 2708              		.set	.LANCHOR17,. + 0
 2711              	guidance_v_delta_t:
 2712 0000 00000000 		.space	4
 2713              		.section	.bss.guidance_v_zdd_ref,"aw",%nobits
 2714              		.align	2
 2715              		.set	.LANCHOR12,. + 0
 2718              	guidance_v_zdd_ref:
 2719 0000 00000000 		.space	4
 2720              		.section	.bss.guidance_v_kd,"aw",%nobits
 2721              		.align	2
 2722              		.set	.LANCHOR2,. + 0
 2725              	guidance_v_kd:
 2726 0000 00000000 		.space	4
 2727              		.section	.bss.guidance_v_zd_sp,"aw",%nobits
 2728              		.align	2
 2729              		.set	.LANCHOR13,. + 0
 2732              	guidance_v_zd_sp:
 2733 0000 00000000 		.space	4
 2734              		.section	.bss.guidance_v_z_sp,"aw",%nobits
 2735              		.align	2
 2736              		.set	.LANCHOR9,. + 0
 2739              	guidance_v_z_sp:
 2740 0000 00000000 		.space	4
 2741              		.section	.bss.guidance_v_fb_cmd,"aw",%nobits
 2742              		.align	2
 2743              		.set	.LANCHOR16,. + 0
 2746              	guidance_v_fb_cmd:
 2747 0000 00000000 		.space	4
 2748              		.text
 2749              	.Letext0:
 2750              		.file 5 "/opt/local/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../arm-none-eabi/include/stdint.h"
 2751              		.file 6 "/Users/tony-yi/git/paparazzi_local/sw/include/std.h"
 2752              		.file 7 "./math/pprz_algebra_int.h"
 2753              		.file 8 "./paparazzi.h"
 2754              		.file 9 "./mcu_periph/sys_time.h"
 2755              		.file 10 "./subsystems/radio_control.h"
 2756              		.file 11 "./math/pprz_algebra_float.h"
 2757              		.file 12 "./math/pprz_geodetic_int.h"
 2758              		.file 13 "./math/pprz_geodetic_float.h"
 2759              		.file 14 "./math/pprz_trig_int.h"
 2760              		.file 15 "./firmwares/rotorcraft/guidance/guidance_v_ref.h"
 2761              		.file 16 "./firmwares/rotorcraft/stabilization.h"
 2762              		.file 17 "./firmwares/rotorcraft/navigation.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 guidance_v.c
/var/tmp//ccbuaZbA.s:19     .text.stateGetPositionNed_i:0000000000000000 $t
/var/tmp//ccbuaZbA.s:23     .text.stateGetPositionNed_i:0000000000000000 stateGetPositionNed_i
/var/tmp//ccbuaZbA.s:50     .text.stateGetPositionNed_i:0000000000000014 $d
/var/tmp//ccbuaZbA.s:56     .text.stateGetSpeedNed_i:0000000000000000 $t
/var/tmp//ccbuaZbA.s:60     .text.stateGetSpeedNed_i:0000000000000000 stateGetSpeedNed_i
/var/tmp//ccbuaZbA.s:86     .text.stateGetSpeedNed_i:0000000000000014 $d
/var/tmp//ccbuaZbA.s:92     .text.stateGetNedToBodyEulers_i:0000000000000000 $t
/var/tmp//ccbuaZbA.s:96     .text.stateGetNedToBodyEulers_i:0000000000000000 stateGetNedToBodyEulers_i
/var/tmp//ccbuaZbA.s:129    .text.stateGetNedToBodyEulers_i:0000000000000018 $d
/var/tmp//ccbuaZbA.s:135    .text.guidance_v_init:0000000000000000 $t
/var/tmp//ccbuaZbA.s:140    .text.guidance_v_init:0000000000000000 guidance_v_init
/var/tmp//ccbuaZbA.s:197    .text.guidance_v_init:0000000000000030 $d
/var/tmp//ccbuaZbA.s:210    .text.guidance_v_read_rc:0000000000000000 $t
/var/tmp//ccbuaZbA.s:215    .text.guidance_v_read_rc:0000000000000000 guidance_v_read_rc
/var/tmp//ccbuaZbA.s:260    .text.guidance_v_read_rc:000000000000003c $d
/var/tmp//ccbuaZbA.s:269    .text.guidance_v_mode_changed:0000000000000000 $t
/var/tmp//ccbuaZbA.s:274    .text.guidance_v_mode_changed:0000000000000000 guidance_v_mode_changed
/var/tmp//ccbuaZbA.s:303    .text.guidance_v_mode_changed:0000000000000016 $d
/var/tmp//ccbuaZbA.s:307    .text.guidance_v_mode_changed:000000000000001a $t
/var/tmp//ccbuaZbA.s:381    .text.guidance_v_mode_changed:0000000000000088 $d
/var/tmp//ccbuaZbA.s:392    .text.guidance_v_notify_in_flight:0000000000000000 $t
/var/tmp//ccbuaZbA.s:397    .text.guidance_v_notify_in_flight:0000000000000000 guidance_v_notify_in_flight
/var/tmp//ccbuaZbA.s:427    .text.guidance_v_notify_in_flight:0000000000000014 $d
/var/tmp//ccbuaZbA.s:441    .text.guidance_v_run:0000000000000000 $t
/var/tmp//ccbuaZbA.s:446    .text.guidance_v_run:0000000000000000 guidance_v_run
/var/tmp//ccbuaZbA.s:670    .text.guidance_v_run:0000000000000158 $d
/var/tmp//ccbuaZbA.s:677    .text.guidance_v_run:0000000000000162 $t
/var/tmp//ccbuaZbA.s:894    .text.guidance_v_run:0000000000000290 $d
/var/tmp//ccbuaZbA.s:937    .text.guidance_v_run:0000000000000338 $t
/var/tmp//ccbuaZbA.s:1460   .text.guidance_v_run:0000000000000620 $d
/var/tmp//ccbuaZbA.s:1492   .text.guidance_v_run:0000000000000698 $t
/var/tmp//ccbuaZbA.s:1955   .text.guidance_v_run:0000000000000938 $d
/var/tmp//ccbuaZbA.s:1989   .text.guidance_v_run:00000000000009b8 $t
/var/tmp//ccbuaZbA.s:2451   .text.guidance_v_run:0000000000000c48 $d
/var/tmp//ccbuaZbA.s:2478   .text.guidance_v_run:0000000000000cb0 $t
/var/tmp//ccbuaZbA.s:2582   .text.guidance_v_run:0000000000000d38 $d
/var/tmp//ccbuaZbA.s:2657   .bss.guidance_v_z_sum_err:0000000000000000 guidance_v_z_sum_err
/var/tmp//ccbuaZbA.s:2622   .bss.guidance_v_ki:0000000000000000 guidance_v_ki
/var/tmp//ccbuaZbA.s:2725   .bss.guidance_v_kd:0000000000000000 guidance_v_kd
/var/tmp//ccbuaZbA.s:2650   .bss.guidance_v_kp:0000000000000000 guidance_v_kp
/var/tmp//ccbuaZbA.s:2718   .bss.guidance_v_zdd_ref:0000000000000000 guidance_v_zdd_ref
/var/tmp//ccbuaZbA.s:2704   .bss.guidance_v_zd_ref:0000000000000000 guidance_v_zd_ref
/var/tmp//ccbuaZbA.s:2643   .bss.guidance_v_z_ref:0000000000000000 guidance_v_z_ref
/var/tmp//ccbuaZbA.s:2732   .bss.guidance_v_zd_sp:0000000000000000 guidance_v_zd_sp
/var/tmp//ccbuaZbA.s:2739   .bss.guidance_v_z_sp:0000000000000000 guidance_v_z_sp
/var/tmp//ccbuaZbA.s:2636   .bss.guidance_v_rc_zd_sp:0000000000000000 guidance_v_rc_zd_sp
/var/tmp//ccbuaZbA.s:2691   .bss.guidance_v_rc_delta_t:0000000000000000 guidance_v_rc_delta_t
/var/tmp//ccbuaZbA.s:2677   .bss.guidance_v_nominal_throttle:0000000000000000 guidance_v_nominal_throttle
/var/tmp//ccbuaZbA.s:2711   .bss.guidance_v_delta_t:0000000000000000 guidance_v_delta_t
/var/tmp//ccbuaZbA.s:2746   .bss.guidance_v_fb_cmd:0000000000000000 guidance_v_fb_cmd
/var/tmp//ccbuaZbA.s:2684   .bss.guidance_v_ff_cmd:0000000000000000 guidance_v_ff_cmd
/var/tmp//ccbuaZbA.s:2697   .bss.guidance_v_mode:0000000000000000 guidance_v_mode
/var/tmp//ccbuaZbA.s:2671   .bss.gv_adapt_Xmeas:0000000000000000 gv_adapt_Xmeas
/var/tmp//ccbuaZbA.s:2629   .bss.gv_adapt_P:0000000000000000 gv_adapt_P
/var/tmp//ccbuaZbA.s:2664   .bss.gv_adapt_X:0000000000000000 gv_adapt_X
/var/tmp//ccbuaZbA.s:2618   .bss.guidance_v_ki:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2625   .bss.gv_adapt_P:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2632   .bss.guidance_v_rc_zd_sp:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2639   .bss.guidance_v_z_ref:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2646   .bss.guidance_v_kp:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2653   .bss.guidance_v_z_sum_err:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2660   .bss.gv_adapt_X:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2667   .bss.gv_adapt_Xmeas:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2674   .bss.guidance_v_nominal_throttle:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2680   .bss.guidance_v_ff_cmd:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2687   .bss.guidance_v_rc_delta_t:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2698   .bss.guidance_v_mode:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2700   .bss.guidance_v_zd_ref:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2707   .bss.guidance_v_delta_t:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2714   .bss.guidance_v_zdd_ref:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2721   .bss.guidance_v_kd:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2728   .bss.guidance_v_zd_sp:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2735   .bss.guidance_v_z_sp:0000000000000000 $d
/var/tmp//ccbuaZbA.s:2742   .bss.guidance_v_fb_cmd:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
/var/tmp//ccbuaZbA.s:2617   .text.guidance_v_run:0000000000000d6c $t

UNDEFINED SYMBOLS
stateCalcPositionNed_i
state
stateCalcSpeedNed_i
orientationCalcEulers_i
radio_control
gv_set_ref
__aeabi_i2d
__aeabi_dcmplt
__aeabi_dcmpgt
__aeabi_dadd
__aeabi_d2iz
__aeabi_dmul
stateCalcAccelNed_i
gv_update_ref_from_zd_sp
stabilization_cmd
gv_z_ref
gv_zd_ref
gv_zdd_ref
pprz_trig_int
gv_update_ref_from_z_sp
vertical_mode
nav_flight_altitude
nav_climb
nav_throttle
